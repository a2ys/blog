const _astro_dataLayerContent = [["Map",1,2,9,10,17,2082,24,2103],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.7","content-config-digest","5efc57d6e4e14631","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"tokyo-night\",\"themes\":{},\"defaultColor\":false,\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null],\"rehypePlugins\":[null],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,99,100,138,139,191,192,246,247,353,354,550,551,655,656,702,703,733,734,801,802,897,898,974,975,1012,1013,1040,1041,1073,1074,1245,1246,1298,1299,1388,1389,1435,1436,1469,1470,1570,1571,1626,1627,1931,1932,1962,1963,1993,1994],"art-of-proofs",{id:11,data:13,body:26,filePath:27,digest:28,rendered:29,legacyId:98},{title:14,author:15,draft:18,date:19,description:20,featured:18,thumbnail:21,series:22,seriesOrder:25},"The Art of Proofs – Thinking Like a Mathematician (Logic & Intuition)",{id:16,collection:17},"a2ys","author",false,["Date","2025-03-22T00:00:00.000Z"],"An exploration of mathematical proof techniques, combining logical rigor with intuitive understanding to solve complex problems.","/thumbnails/toc-proofs.png",{id:23,collection:24},"toc","series",3,"## The Symphony of Symbols: Understanding Formal Languages\r\n\r\nImagine teaching a computer to recognize a valid email address or to understand English grammar. How would you precisely define what makes something \"valid\" or \"correct\"? This is where the concept of formal languages comes in—one of the most powerful ideas in computer science.\r\n\r\nA formal language isn't like English or Spanish. It's a precisely defined set of strings over some alphabet. Think of it as a club with strict membership rules: a string either belongs to the language or it doesn't, with absolutely no gray area.\r\n\r\nLet me give you an example. Consider the language of all binary strings with an equal number of 0s and 1s:\r\n$L = \\{w \\in \\{0,1\\}^* \\mid \\text{number of 0s in w = number of 1s in w}\\}$\r\n\r\nThis language includes strings like $\\varepsilon$ (the empty string), 01, 10, 0011, 0101, 1100, and infinitely many others. But strings like 0, 1, 001, or 1110 are definitely not in the club!\r\n\r\n#### The Power Hierarchy: Chomsky's Classification\r\n\r\nIn the early 1950s, the linguist Noam Chomsky revolutionized our understanding of languages by organizing them into a hierarchy based on their computational complexity. This hierarchy has become the roadmap for our journey through Theory of Computation:\r\n\r\n1. **Type 3: Regular Languages**\r\n\r\n   - The simplest class\r\n   - Can be recognized by finite automata\r\n   - Examples: valid identifiers in programming, simple patterns like phone numbers\r\n   - Think of these as languages that can be recognized without needing to remember anything (no memory required)\r\n\r\n2. **Type 2: Context-Free Languages**\r\n\r\n   - More complex than regular languages\r\n   - Can be recognized by pushdown automata (finite automata with a stack)\r\n   - Examples: most programming language syntax, balanced parentheses expressions\r\n   - These languages require limited memory (a stack) to recognize\r\n\r\n3. **Type 1: Context-Sensitive Languages**\r\n\r\n   - Even more expressive\r\n   - Can be recognized by linear bounded automata\r\n   - Examples: some natural language constructs, certain advanced programming features\r\n   - These require more sophisticated memory management\r\n\r\n4. **Type 0: Recursively Enumerable Languages**\r\n   - The most powerful class\r\n   - Can be recognized by Turing machines\r\n   - Examples: virtually any algorithm you can program\r\n   - These represent the theoretical limit of what can be computed\r\n\r\nThis hierarchy isn't just a dry classification—it's a profound insight into the nature of information processing. As we climb the hierarchy, we gain expressive power but lose certain algorithmic properties like decidability (guaranteed termination).\r\n\r\n#### Regular vs. Non-Regular: The Boundary of Simplicity\r\n\r\nUnderstanding when a language is regular or non-regular is crucial because it tells us which computational tools we need. Regular languages can be processed with the simplest machines (finite automata), while non-regular languages require more sophisticated mechanisms.\r\n\r\nA language is regular if it can be described by a regular expression or recognized by a finite automaton. For example:\r\n\r\n- All strings ending with \"101\" is regular\r\n- All strings with an equal number of 'a's and 'b's is NOT regular\r\n\r\nHow do we prove something isn't regular? This is where the famous Pumping Lemma comes in (which we'll explore in detail later). The key insight: regular languages can't \"count\" indefinitely or maintain \"balance\" across long distances in strings.\r\n\r\nThink of it this way: if you need to match opening and closing parentheses in a long expression, you need to remember how many you've seen so far—and a finite automaton has no memory for that kind of counting!\r\n\r\nThis distinction isn't merely academic. When you're designing a search algorithm, building a compiler, or creating a text validator, knowing whether your language is regular determines which algorithms and data structures are appropriate for the task.\r\n\r\nNow, let's build on this foundation and explore how mathematicians and computer scientists prove facts about these languages.\r\n\r\n## Table of Contents\r\n\r\n- [Why Proofs Matter in Theory of Computation](#why-proofs-matter-in-theory-of-computation)\r\n- [Essential Proof Techniques in Theory of Computation](#essential-proof-techniques-in-theory-of-computation)\r\n  - [Direct Proof](#direct-proof)\r\n  - [Proof by Contradiction](#proof-by-contradiction)\r\n  - [Mathematical Induction](#mathematical-induction)\r\n- [Formal Mathematical Language: Alphabets, Strings, and Languages](#formal-mathematical-language-alphabets-strings-and-languages)\r\n  - [Alphabets ($\\Sigma$)](#alphabets-sigma)\r\n  - [Strings](#strings)\r\n  - [Operations on Strings](#operations-on-strings)\r\n  - [Languages](#languages)\r\n  - [Operations on Languages](#operations-on-languages)\r\n- [Bridging to Computational Models](#bridging-to-computational-models)\r\n- [Why This Mathematical Foundation Matters](#why-this-mathematical-foundation-matters)\r\n- [Applying Proof Techniques to Language Problems](#applying-proof-techniques-to-language-problems)\r\n- [Looking Ahead: Where Mathematics Meets Machines](#looking-ahead-where-mathematics-meets-machines)\r\n\r\n## Why Proofs Matter in Theory of Computation\r\n\r\nBefore we dive into automata and formal languages, we need to understand how mathematicians and computer scientists establish truths. In Theory of Computation, we're not just implementing code—we're proving fundamental properties about computational systems. Proofs are the foundation upon which our entire understanding of computation rests.\r\n\r\nWhen Alan Turing proved the undecidability of the Halting Problem, he didn't just write a program that failed to solve it. He demonstrated, through mathematical reasoning, that no such program could ever exist. This distinction is crucial—we're seeking absolute certainty about what computation can and cannot do.\r\n\r\n## Essential Proof Techniques in Theory of Computation\r\n\r\n#### Direct Proof\r\n\r\nThe most straightforward approach is to start with known facts and step logically toward your conclusion. Let's see an example relevant to language theory:\r\n\r\n**Example**: Prove that if $L_1$ and $L_2$ are regular languages, then their union $L_1 \\cup L_2$ is also regular.\r\n\r\n**Proof**: Since $L_1$ is regular, there exists a finite automaton $M_1$ that accepts $L_1$. Similarly, there exists a finite automaton $M_2$ that accepts $L_2$. We can construct a new automaton $M$ that simulates running both $M_1$ and $M_2$ in parallel and accepts if either one accepts. Therefore, $L_1 \\cup L_2$ is regular. $\\blacksquare$\r\n\r\nThis technique will be essential when we explore closure properties of different language classes.\r\n\r\n#### Proof by Contradiction\r\n\r\nSometimes it's easier to assume the opposite of what you want to prove and show that this leads to a logical impossibility.\r\n\r\n**Example**: Let's prove that the language $L = \\{a^n b^n \\mid n \\geq 0\\}$ is not regular.\r\n\r\n**Proof**: Assume, for contradiction, that $L$ is regular. By the Pumping Lemma (which we'll explore in detail later), there exists a pumping length $p$ such that any string $s$ in $L$ with $|s| \\geq p$ can be \"pumped.\" Consider $s = a^p b^p$. According to the Pumping Lemma, $s$ can be divided into $s = xyz$ where $|xy| \\leq p$, $|y| > 0$, and $xy^i z \\in L$ for all $i \\geq 0$. Since $|xy| \\leq p$, $y$ consists only of $a$'s. But then $xy^2z$ would have more $a$'s than $b$'s, which means $xy^2z \\notin L$. This contradicts our assumption that $L$ is regular. Therefore, $L$ is not regular. $\\blacksquare$\r\n\r\nThis technique becomes particularly powerful when proving that certain problems are undecidable.\r\n\r\n#### Mathematical Induction\r\n\r\nInduction is perfect for proving properties that apply to structures of arbitrary size or complexity.\r\n\r\n**Example**: Prove that for any regular language $L$, the language $\\text{prefix}(L) = \\{x \\mid xy \\in L \\text{ for some string } y\\}$ is also regular.\r\n\r\n**Base case**: If $L = \\emptyset$, then $\\text{prefix}(L) = \\emptyset$, which is regular.\r\n\r\n**Inductive step**: Assume $\\text{prefix}(L)$ is regular for some language $L$. Let $M$ be a finite automaton accepting $L$. We can create a new automaton $M'$ that accepts $\\text{prefix}(L)$ by simply making all states from which a final state can be reached in $M$ into final states in $M'$. Since $M'$ is a finite automaton, $\\text{prefix}(L)$ is regular. $\\blacksquare$\r\n\r\nInduction will be crucial when we define recursive structures like context-free grammars.\r\n\r\n## Formal Mathematical Language: Alphabets, Strings, and Languages\r\n\r\nNow that we've explored proof techniques, let's establish the mathematical foundation for discussing computation. Just as computer programs operate on data, computational models operate on strings of symbols drawn from alphabets.\r\n\r\n#### Alphabets ($\\Sigma$)\r\n\r\nAn alphabet is simply a finite set of symbols. We typically denote it with the Greek letter $\\Sigma$ (sigma).\r\n\r\n**Examples**:\r\n\r\n- Binary alphabet: $\\Sigma = \\{0, 1\\}$\r\n- DNA alphabet: $\\Sigma = \\{A, C, G, T\\}$\r\n- ASCII alphabet: $\\Sigma = \\{\\text{all 128 ASCII characters}\\}$\r\n\r\n#### Strings\r\n\r\nA string is a finite sequence of symbols from an alphabet. The empty string, denoted by $\\varepsilon$ (epsilon), contains no symbols.\r\n\r\n**Examples over $\\Sigma = \\{a, b\\}$**:\r\n\r\n- Valid strings: $\\varepsilon, a, b, aa, ab, ba, bb, aab, \\ldots$\r\n- Length of string \"abb\" is 3, denoted $|abb| = 3$\r\n- Length of empty string $|\\varepsilon| = 0$\r\n\r\n#### Operations on Strings\r\n\r\n1. **Concatenation**: Joining strings end-to-end\r\n\r\n   - If $x = \\text{\"ab\"}$ and $y = \\text{\"ba\"}$, then $xy = \\text{\"abba\"}$\r\n   - $\\varepsilon$ acts as identity: $x\\varepsilon = \\varepsilon x = x$ for any string $x$\r\n\r\n2. **Repetition**: Repeating a string multiple times\r\n\r\n   - If $x = \\text{\"ab\"}$, then $x^2 = \\text{\"abab\"}$ and $x^3 = \\text{\"ababab\"}$\r\n   - $x^0 = \\varepsilon$ for any string $x$\r\n\r\n3. **Reverse**: Flipping a string backwards\r\n   - If $x = \\text{\"abc\"}$, then $x^R = \\text{\"cba\"}$\r\n   - $(xy)^R = y^R x^R$ for any strings $x$ and $y$\r\n\r\n#### Languages\r\n\r\nA language is a set of strings over some alphabet. A language can be finite or infinite.\r\n\r\n**Examples**:\r\n\r\n- $L_1 = \\{\\varepsilon, a, aa\\}$ (finite language with 3 strings)\r\n- $L_2 = \\{a^n \\mid n \\geq 0\\} = \\{\\varepsilon, a, aa, aaa, \\ldots\\}$ (infinite language)\r\n- $L_3 = \\{w \\in \\{a,b\\}^* \\mid w \\text{ has equal number of a's and b's}\\}$ (infinite language)\r\n\r\n#### Operations on Languages\r\n\r\n1. **Union**: $L_1 \\cup L_2 = \\{w \\mid w \\in L_1 \\text{ or } w \\in L_2\\}$\r\n\r\n2. **Intersection**: $L_1 \\cap L_2 = \\{w \\mid w \\in L_1 \\text{ and } w \\in L_2\\}$\r\n\r\n3. **Concatenation**: $L_1 L_2 = \\{xy \\mid x \\in L_1 \\text{ and } y \\in L_2\\}$\r\n\r\n4. **Kleene Star**: $L^* = \\{w_1 w_2 \\ldots w_n \\mid n \\geq 0 \\text{ and each } w_i \\in L\\}$\r\n\r\n   - This represents zero or more concatenations of strings from $L$\r\n   - Note that $\\varepsilon \\in L^*$ for any language $L$ (when $n = 0$)\r\n\r\n5. **Complement**: $\\overline{L} = \\Sigma^* - L = \\{w \\in \\Sigma^* \\mid w \\notin L\\}$\r\n\r\n## Bridging to Computational Models\r\n\r\nNow that we've built a mathematical foundation, we can introduce the concept of a computational model—a formal system for defining what is \"computable.\"\r\n\r\nEvery computational model in our journey will:\r\n\r\n1. Take a string as input\r\n2. Process it according to specific rules\r\n3. Either accept or reject the string\r\n\r\nThe set of all strings a model accepts forms a language. Different models have different expressive powers:\r\n\r\n- **Finite Automata**: Recognize regular languages (simplest)\r\n- **Pushdown Automata**: Recognize context-free languages\r\n- **Turing Machines**: Recognize recursively enumerable languages (most powerful)\r\n\r\nThese models form a hierarchy of increasing computational power, which we'll explore in detail throughout this series.\r\n\r\n## Why This Mathematical Foundation Matters\r\n\r\nYou might wonder why we need such a formal approach. Why not just jump into coding algorithms? The answer lies in precision and universality:\r\n\r\n1. **Precision**: By using mathematical language, we eliminate ambiguity. When we prove a language is regular, that's an absolute truth—not dependent on programming language or hardware.\r\n\r\n2. **Universality**: These mathematical models capture the essence of computation itself, independent of specific technologies. The insights apply to any computing system, past or future.\r\n\r\n3. **Limits**: Most importantly, this mathematical foundation allows us to prove the fundamental limits of computation—what problems can and cannot be solved algorithmically.\r\n\r\n## Applying Proof Techniques to Language Problems\r\n\r\nLet's practice applying proof techniques to a language problem:\r\n\r\n**Problem**: Prove that if $L$ is a regular language, then its reverse $L^R = \\{w^R \\mid w \\in L\\}$ is also regular.\r\n\r\n**Proof Strategy**: We'll use a constructive approach, showing how to build a new automaton that recognizes $L^R$.\r\n\r\nSince $L$ is regular, there exists a finite automaton $M = (Q, \\Sigma, \\delta, q_0, F)$ that accepts $L$. We can construct a new automaton $M' = (Q, \\Sigma, \\delta', F, \\{q_0\\})$ where:\r\n\r\n- The states remain the same\r\n- The initial state of $M'$ is the set of final states of $M$\r\n- The only final state of $M'$ is the initial state of $M$\r\n- For every transition $\\delta(q, a) = p$ in $M$, add a transition $\\delta'(p, a) = q$ in $M'$\r\n\r\nThis new automaton $M'$ recognizes exactly $L^R$. Therefore, $L^R$ is regular. $\\blacksquare$\r\n\r\n## Looking Ahead: Where Mathematics Meets Machines\r\n\r\nWith these mathematical foundations and proof techniques, you're now equipped to explore the fascinating world of computational models. In our next section, \"Finite Automata: The Language of Simplicity,\" we'll dive into the simplest computational model and see how it captures fundamental patterns in computation.\r\n\r\nRemember, these mathematical tools aren't just abstract exercises—they're the language that allows us to precisely describe and reason about the systems that power our digital world. By mastering these foundations, you're building the mental framework needed to understand everything from regular expressions in search engines to the theoretical limits of artificial intelligence.\r\n\r\nWhen you search for a text pattern, validate an email address, or use voice recognition on your phone, you're witnessing these abstract concepts in action. The Chomsky hierarchy isn't just a theoretical classification—it's a roadmap for understanding the computational power needed to solve real-world problems.\r\n\r\nAs we continue our journey through Theory of Computation, we'll see how these foundational ideas connect to everyday computing challenges, from designing efficient algorithms to understanding the fundamental limits of artificial intelligence. The mathematical language we've established here will be our guide through this fascinating landscape where abstract theory meets practical machine intelligence.","src/content/blog/art-of-proofs.md","2647994ef22d9565",{html:30,metadata:31},"<h2 id=\"the-symphony-of-symbols-understanding-formal-languages\">The Symphony of Symbols: Understanding Formal Languages</h2>\n<p>Imagine teaching a computer to recognize a valid email address or to understand English grammar. How would you precisely define what makes something “valid” or “correct”? This is where the concept of formal languages comes in—one of the most powerful ideas in computer science.</p>\n<p>A formal language isn’t like English or Spanish. It’s a precisely defined set of strings over some alphabet. Think of it as a club with strict membership rules: a string either belongs to the language or it doesn’t, with absolutely no gray area.</p>\n<p>Let me give you an example. Consider the language of all binary strings with an equal number of 0s and 1s:\r\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>w</mi><mo>∈</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mo stretchy=\"false\">}</mo><mo>∗</mo></msup><mo>∣</mo><mtext>number of 0s in w = number of 1s in w</mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L = \\{w \\in \\{0,1\\}^* \\mid \\text{number of 0s in w = number of 1s in w}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">number of 0s in w = number of 1s in w</span></span><span class=\"mclose\">}</span></span></span></span></p>\n<p>This language includes strings like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> (the empty string), 01, 10, 0011, 0101, 1100, and infinitely many others. But strings like 0, 1, 001, or 1110 are definitely not in the club!</p>\n<h4 id=\"the-power-hierarchy-chomskys-classification\">The Power Hierarchy: Chomsky’s Classification</h4>\n<p>In the early 1950s, the linguist Noam Chomsky revolutionized our understanding of languages by organizing them into a hierarchy based on their computational complexity. This hierarchy has become the roadmap for our journey through Theory of Computation:</p>\n<ol>\n<li>\n<p><strong>Type 3: Regular Languages</strong></p>\n<ul>\n<li>The simplest class</li>\n<li>Can be recognized by finite automata</li>\n<li>Examples: valid identifiers in programming, simple patterns like phone numbers</li>\n<li>Think of these as languages that can be recognized without needing to remember anything (no memory required)</li>\n</ul>\n</li>\n<li>\n<p><strong>Type 2: Context-Free Languages</strong></p>\n<ul>\n<li>More complex than regular languages</li>\n<li>Can be recognized by pushdown automata (finite automata with a stack)</li>\n<li>Examples: most programming language syntax, balanced parentheses expressions</li>\n<li>These languages require limited memory (a stack) to recognize</li>\n</ul>\n</li>\n<li>\n<p><strong>Type 1: Context-Sensitive Languages</strong></p>\n<ul>\n<li>Even more expressive</li>\n<li>Can be recognized by linear bounded automata</li>\n<li>Examples: some natural language constructs, certain advanced programming features</li>\n<li>These require more sophisticated memory management</li>\n</ul>\n</li>\n<li>\n<p><strong>Type 0: Recursively Enumerable Languages</strong></p>\n<ul>\n<li>The most powerful class</li>\n<li>Can be recognized by Turing machines</li>\n<li>Examples: virtually any algorithm you can program</li>\n<li>These represent the theoretical limit of what can be computed</li>\n</ul>\n</li>\n</ol>\n<p>This hierarchy isn’t just a dry classification—it’s a profound insight into the nature of information processing. As we climb the hierarchy, we gain expressive power but lose certain algorithmic properties like decidability (guaranteed termination).</p>\n<h4 id=\"regular-vs-non-regular-the-boundary-of-simplicity\">Regular vs. Non-Regular: The Boundary of Simplicity</h4>\n<p>Understanding when a language is regular or non-regular is crucial because it tells us which computational tools we need. Regular languages can be processed with the simplest machines (finite automata), while non-regular languages require more sophisticated mechanisms.</p>\n<p>A language is regular if it can be described by a regular expression or recognized by a finite automaton. For example:</p>\n<ul>\n<li>All strings ending with “101” is regular</li>\n<li>All strings with an equal number of ‘a’s and ‘b’s is NOT regular</li>\n</ul>\n<p>How do we prove something isn’t regular? This is where the famous Pumping Lemma comes in (which we’ll explore in detail later). The key insight: regular languages can’t “count” indefinitely or maintain “balance” across long distances in strings.</p>\n<p>Think of it this way: if you need to match opening and closing parentheses in a long expression, you need to remember how many you’ve seen so far—and a finite automaton has no memory for that kind of counting!</p>\n<p>This distinction isn’t merely academic. When you’re designing a search algorithm, building a compiler, or creating a text validator, knowing whether your language is regular determines which algorithms and data structures are appropriate for the task.</p>\n<p>Now, let’s build on this foundation and explore how mathematicians and computer scientists prove facts about these languages.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#why-proofs-matter-in-theory-of-computation\">Why Proofs Matter in Theory of Computation</a></li>\n<li><a href=\"#essential-proof-techniques-in-theory-of-computation\">Essential Proof Techniques in Theory of Computation</a>\n<ul>\n<li><a href=\"#direct-proof\">Direct Proof</a></li>\n<li><a href=\"#proof-by-contradiction\">Proof by Contradiction</a></li>\n<li><a href=\"#mathematical-induction\">Mathematical Induction</a></li>\n</ul>\n</li>\n<li><a href=\"#formal-mathematical-language-alphabets-strings-and-languages\">Formal Mathematical Language: Alphabets, Strings, and Languages</a>\n<ul>\n<li><a href=\"#alphabets-sigma\">Alphabets (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span>)</a></li>\n<li><a href=\"#strings\">Strings</a></li>\n<li><a href=\"#operations-on-strings\">Operations on Strings</a></li>\n<li><a href=\"#languages\">Languages</a></li>\n<li><a href=\"#operations-on-languages\">Operations on Languages</a></li>\n</ul>\n</li>\n<li><a href=\"#bridging-to-computational-models\">Bridging to Computational Models</a></li>\n<li><a href=\"#why-this-mathematical-foundation-matters\">Why This Mathematical Foundation Matters</a></li>\n<li><a href=\"#applying-proof-techniques-to-language-problems\">Applying Proof Techniques to Language Problems</a></li>\n<li><a href=\"#looking-ahead-where-mathematics-meets-machines\">Looking Ahead: Where Mathematics Meets Machines</a></li>\n</ul>\n<h2 id=\"why-proofs-matter-in-theory-of-computation\">Why Proofs Matter in Theory of Computation</h2>\n<p>Before we dive into automata and formal languages, we need to understand how mathematicians and computer scientists establish truths. In Theory of Computation, we’re not just implementing code—we’re proving fundamental properties about computational systems. Proofs are the foundation upon which our entire understanding of computation rests.</p>\n<p>When Alan Turing proved the undecidability of the Halting Problem, he didn’t just write a program that failed to solve it. He demonstrated, through mathematical reasoning, that no such program could ever exist. This distinction is crucial—we’re seeking absolute certainty about what computation can and cannot do.</p>\n<h2 id=\"essential-proof-techniques-in-theory-of-computation\">Essential Proof Techniques in Theory of Computation</h2>\n<h4 id=\"direct-proof\">Direct Proof</h4>\n<p>The most straightforward approach is to start with known facts and step logically toward your conclusion. Let’s see an example relevant to language theory:</p>\n<p><strong>Example</strong>: Prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are regular languages, then their union <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>L</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_1 \\cup L_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is also regular.</p>\n<p><strong>Proof</strong>: Since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is regular, there exists a finite automaton <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">M_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> that accepts <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. Similarly, there exists a finite automaton <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">M_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> that accepts <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. We can construct a new automaton <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> that simulates running both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">M_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">M_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in parallel and accepts if either one accepts. Therefore, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>L</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_1 \\cup L_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is regular. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">■</mi></mrow><annotation encoding=\"application/x-tex\">\\blacksquare</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.675em;\"></span><span class=\"mord amsrm\">■</span></span></span></span></p>\n<p>This technique will be essential when we explore closure properties of different language classes.</p>\n<h4 id=\"proof-by-contradiction\">Proof by Contradiction</h4>\n<p>Sometimes it’s easier to assume the opposite of what you want to prove and show that this leads to a logical impossibility.</p>\n<p><strong>Example</strong>: Let’s prove that the language <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msup><mi>a</mi><mi>n</mi></msup><msup><mi>b</mi><mi>n</mi></msup><mo>∣</mo><mi>n</mi><mo>≥</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L = \\{a^n b^n \\mid n \\geq 0\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span> is not regular.</p>\n<p><strong>Proof</strong>: Assume, for contradiction, that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is regular. By the Pumping Lemma (which we’ll explore in detail later), there exists a pumping length <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> such that any string <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>s</mi><mi mathvariant=\"normal\">∣</mi><mo>≥</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">|s| \\geq p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> can be “pumped.” Consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>=</mo><msup><mi>a</mi><mi>p</mi></msup><msup><mi>b</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">s = a^p b^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span>. According to the Pumping Lemma, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> can be divided into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>=</mo><mi>x</mi><mi>y</mi><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">s = xyz</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">yz</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi>y</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">|xy| \\leq p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>y</mi><mi mathvariant=\"normal\">∣</mi><mo>></mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">|y| > 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><msup><mi>y</mi><mi>i</mi></msup><mi>z</mi><mo>∈</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">xy^i z \\in L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0191em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">i \\geq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7955em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. Since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi>y</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">|xy| \\leq p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> consists only of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>‘s. But then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><msup><mi>y</mi><mn>2</mn></msup><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">xy^2z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> would have more <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>‘s than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>‘s, which means <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><msup><mi>y</mi><mn>2</mn></msup><mi>z</mi><mo mathvariant=\"normal\">∉</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">xy^2z \\notin L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>. This contradicts our assumption that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is regular. Therefore, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is not regular. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">■</mi></mrow><annotation encoding=\"application/x-tex\">\\blacksquare</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.675em;\"></span><span class=\"mord amsrm\">■</span></span></span></span></p>\n<p>This technique becomes particularly powerful when proving that certain problems are undecidable.</p>\n<h4 id=\"mathematical-induction\">Mathematical Induction</h4>\n<p>Induction is perfect for proving properties that apply to structures of arbitrary size or complexity.</p>\n<p><strong>Example</strong>: Prove that for any regular language <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>, the language <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>prefix</mtext><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∣</mo><mi>x</mi><mi>y</mi><mo>∈</mo><mi>L</mi><mtext> for some string </mtext><mi>y</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\text{prefix}(L) = \\{x \\mid xy \\in L \\text{ for some string } y\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">prefix</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord text\"><span class=\"mord\"> for some string </span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">}</span></span></span></span> is also regular.</p>\n<p><strong>Base case</strong>: If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>=</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">L = \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>prefix</mtext><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\text{prefix}(L) = \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">prefix</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span>, which is regular.</p>\n<p><strong>Inductive step</strong>: Assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>prefix</mtext><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{prefix}(L)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">prefix</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span></span></span></span> is regular for some language <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>. Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> be a finite automaton accepting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>. We can create a new automaton <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">M'</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> that accepts <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>prefix</mtext><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{prefix}(L)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">prefix</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span></span></span></span> by simply making all states from which a final state can be reached in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> into final states in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">M'</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>. Since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">M'</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is a finite automaton, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>prefix</mtext><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{prefix}(L)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">prefix</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span></span></span></span> is regular. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">■</mi></mrow><annotation encoding=\"application/x-tex\">\\blacksquare</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.675em;\"></span><span class=\"mord amsrm\">■</span></span></span></span></p>\n<p>Induction will be crucial when we define recursive structures like context-free grammars.</p>\n<h2 id=\"formal-mathematical-language-alphabets-strings-and-languages\">Formal Mathematical Language: Alphabets, Strings, and Languages</h2>\n<p>Now that we’ve explored proof techniques, let’s establish the mathematical foundation for discussing computation. Just as computer programs operate on data, computational models operate on strings of symbols drawn from alphabets.</p>\n<h4 id=\"alphabets-σsigmaς\">Alphabets (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span>)</h4>\n<p>An alphabet is simply a finite set of symbols. We typically denote it with the Greek letter <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span> (sigma).</p>\n<p><strong>Examples</strong>:</p>\n<ul>\n<li>Binary alphabet: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma = \\{0, 1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span></li>\n<li>DNA alphabet: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>G</mi><mo separator=\"true\">,</mo><mi>T</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma = \\{A, C, G, T\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">}</span></span></span></span></li>\n<li>ASCII alphabet: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mtext>all 128 ASCII characters</mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma = \\{\\text{all 128 ASCII characters}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord text\"><span class=\"mord\">all 128 ASCII characters</span></span><span class=\"mclose\">}</span></span></span></span></li>\n</ul>\n<h4 id=\"strings\">Strings</h4>\n<p>A string is a finite sequence of symbols from an alphabet. The empty string, denoted by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> (epsilon), contains no symbols.</p>\n<p><strong>Examples over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma = \\{a, b\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">}</span></span></span></span></strong>:</p>\n<ul>\n<li>Valid strings: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi><mo separator=\"true\">,</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>a</mi><mi>a</mi><mo separator=\"true\">,</mo><mi>a</mi><mi>b</mi><mo separator=\"true\">,</mo><mi>b</mi><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mi>b</mi><mo separator=\"true\">,</mo><mi>a</mi><mi>a</mi><mi>b</mi><mo separator=\"true\">,</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">\\varepsilon, a, b, aa, ab, ba, bb, aab, \\ldots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">aa</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ba</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">bb</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">aab</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span></span></span></span></li>\n<li>Length of string “abb” is 3, denoted <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>a</mi><mi>b</mi><mi>b</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">|abb| = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">abb</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span></li>\n<li>Length of empty string <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>ε</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">|\\varepsilon| = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">ε</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></li>\n</ul>\n<h4 id=\"operations-on-strings\">Operations on Strings</h4>\n<ol>\n<li>\n<p><strong>Concatenation</strong>: Joining strings end-to-end</p>\n<ul>\n<li>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mtext>\"ab\"</mtext></mrow><annotation encoding=\"application/x-tex\">x = \\text{\"ab\"}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">\"ab\"</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mtext>\"ba\"</mtext></mrow><annotation encoding=\"application/x-tex\">y = \\text{\"ba\"}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">\"ba\"</span></span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>y</mi><mo>=</mo><mtext>\"abba\"</mtext></mrow><annotation encoding=\"application/x-tex\">xy = \\text{\"abba\"}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">\"abba\"</span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> acts as identity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>ε</mi><mo>=</mo><mi>ε</mi><mi>x</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x\\varepsilon = \\varepsilon x = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">ε</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> for any string <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></li>\n</ul>\n</li>\n<li>\n<p><strong>Repetition</strong>: Repeating a string multiple times</p>\n<ul>\n<li>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mtext>\"ab\"</mtext></mrow><annotation encoding=\"application/x-tex\">x = \\text{\"ab\"}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">\"ab\"</span></span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>=</mo><mtext>\"abab\"</mtext></mrow><annotation encoding=\"application/x-tex\">x^2 = \\text{\"abab\"}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">\"abab\"</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>3</mn></msup><mo>=</mo><mtext>\"ababab\"</mtext></mrow><annotation encoding=\"application/x-tex\">x^3 = \\text{\"ababab\"}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">\"ababab\"</span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>0</mn></msup><mo>=</mo><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">x^0 = \\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> for any string <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></li>\n</ul>\n</li>\n<li>\n<p><strong>Reverse</strong>: Flipping a string backwards</p>\n<ul>\n<li>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mtext>\"abc\"</mtext></mrow><annotation encoding=\"application/x-tex\">x = \\text{\"abc\"}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">\"abc\"</span></span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>R</mi></msup><mo>=</mo><mtext>\"cba\"</mtext></mrow><annotation encoding=\"application/x-tex\">x^R = \\text{\"cba\"}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">\"cba\"</span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mi>y</mi><msup><mo stretchy=\"false\">)</mo><mi>R</mi></msup><mo>=</mo><msup><mi>y</mi><mi>R</mi></msup><msup><mi>x</mi><mi>R</mi></msup></mrow><annotation encoding=\"application/x-tex\">(xy)^R = y^R x^R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0358em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span></span></span></span> for any strings <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"languages\">Languages</h4>\n<p>A language is a set of strings over some alphabet. A language can be finite or infinite.</p>\n<p><strong>Examples</strong>:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub><mo>=</mo><mo stretchy=\"false\">{</mo><mi>ε</mi><mo separator=\"true\">,</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>a</mi><mi>a</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L_1 = \\{\\varepsilon, a, aa\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">ε</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">aa</span><span class=\"mclose\">}</span></span></span></span> (finite language with 3 strings)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>2</mn></msub><mo>=</mo><mo stretchy=\"false\">{</mo><msup><mi>a</mi><mi>n</mi></msup><mo>∣</mo><mi>n</mi><mo>≥</mo><mn>0</mn><mo stretchy=\"false\">}</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>ε</mi><mo separator=\"true\">,</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>a</mi><mi>a</mi><mo separator=\"true\">,</mo><mi>a</mi><mi>a</mi><mi>a</mi><mo separator=\"true\">,</mo><mo>…</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L_2 = \\{a^n \\mid n \\geq 0\\} = \\{\\varepsilon, a, aa, aaa, \\ldots\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">ε</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">aa</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">aaa</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mclose\">}</span></span></span></span> (infinite language)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>3</mn></msub><mo>=</mo><mo stretchy=\"false\">{</mo><mi>w</mi><mo>∈</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><msup><mo stretchy=\"false\">}</mo><mo>∗</mo></msup><mo>∣</mo><mi>w</mi><mtext> has equal number of a’s and b’s</mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L_3 = \\{w \\in \\{a,b\\}^* \\mid w \\text{ has equal number of a's and b's}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord text\"><span class=\"mord\"> has equal number of a’s and b’s</span></span><span class=\"mclose\">}</span></span></span></span> (infinite language)</li>\n</ul>\n<h4 id=\"operations-on-languages\">Operations on Languages</h4>\n<ol>\n<li>\n<p><strong>Union</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>L</mi><mn>2</mn></msub><mo>=</mo><mo stretchy=\"false\">{</mo><mi>w</mi><mo>∣</mo><mi>w</mi><mo>∈</mo><msub><mi>L</mi><mn>1</mn></msub><mtext> or </mtext><mi>w</mi><mo>∈</mo><msub><mi>L</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L_1 \\cup L_2 = \\{w \\mid w \\in L_1 \\text{ or } w \\in L_2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord\"> or </span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></p>\n</li>\n<li>\n<p><strong>Intersection</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub><mo>∩</mo><msub><mi>L</mi><mn>2</mn></msub><mo>=</mo><mo stretchy=\"false\">{</mo><mi>w</mi><mo>∣</mo><mi>w</mi><mo>∈</mo><msub><mi>L</mi><mn>1</mn></msub><mtext> and </mtext><mi>w</mi><mo>∈</mo><msub><mi>L</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L_1 \\cap L_2 = \\{w \\mid w \\in L_1 \\text{ and } w \\in L_2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord\"> and </span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></p>\n</li>\n<li>\n<p><strong>Concatenation</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub><msub><mi>L</mi><mn>2</mn></msub><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi>y</mi><mo>∣</mo><mi>x</mi><mo>∈</mo><msub><mi>L</mi><mn>1</mn></msub><mtext> and </mtext><mi>y</mi><mo>∈</mo><msub><mi>L</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L_1 L_2 = \\{xy \\mid x \\in L_1 \\text{ and } y \\in L_2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord\"> and </span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></p>\n</li>\n<li>\n<p><strong>Kleene Star</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mo>∗</mo></msup><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>w</mi><mn>1</mn></msub><msub><mi>w</mi><mn>2</mn></msub><mo>…</mo><msub><mi>w</mi><mi>n</mi></msub><mo>∣</mo><mi>n</mi><mo>≥</mo><mn>0</mn><mtext> and each </mtext><msub><mi>w</mi><mi>i</mi></msub><mo>∈</mo><mi>L</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L^* = \\{w_1 w_2 \\ldots w_n \\mid n \\geq 0 \\text{ and each } w_i \\in L\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\">0</span><span class=\"mord text\"><span class=\"mord\"> and each </span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">}</span></span></span></span></p>\n<ul>\n<li>This represents zero or more concatenations of strings from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span></li>\n<li>Note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi><mo>∈</mo><msup><mi>L</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\varepsilon \\in L^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> for any language <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> (when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>)</li>\n</ul>\n</li>\n<li>\n<p><strong>Complement</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>L</mi><mo stretchy=\"true\">‾</mo></mover><mo>=</mo><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup><mo>−</mo><mi>L</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>w</mi><mo>∈</mo><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup><mo>∣</mo><mi>w</mi><mo mathvariant=\"normal\">∉</mo><mi>L</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\overline{L} = \\Sigma^* - L = \\{w \\in \\Sigma^* \\mid w \\notin L\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.772em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">}</span></span></span></span></p>\n</li>\n</ol>\n<h2 id=\"bridging-to-computational-models\">Bridging to Computational Models</h2>\n<p>Now that we’ve built a mathematical foundation, we can introduce the concept of a computational model—a formal system for defining what is “computable.”</p>\n<p>Every computational model in our journey will:</p>\n<ol>\n<li>Take a string as input</li>\n<li>Process it according to specific rules</li>\n<li>Either accept or reject the string</li>\n</ol>\n<p>The set of all strings a model accepts forms a language. Different models have different expressive powers:</p>\n<ul>\n<li><strong>Finite Automata</strong>: Recognize regular languages (simplest)</li>\n<li><strong>Pushdown Automata</strong>: Recognize context-free languages</li>\n<li><strong>Turing Machines</strong>: Recognize recursively enumerable languages (most powerful)</li>\n</ul>\n<p>These models form a hierarchy of increasing computational power, which we’ll explore in detail throughout this series.</p>\n<h2 id=\"why-this-mathematical-foundation-matters\">Why This Mathematical Foundation Matters</h2>\n<p>You might wonder why we need such a formal approach. Why not just jump into coding algorithms? The answer lies in precision and universality:</p>\n<ol>\n<li>\n<p><strong>Precision</strong>: By using mathematical language, we eliminate ambiguity. When we prove a language is regular, that’s an absolute truth—not dependent on programming language or hardware.</p>\n</li>\n<li>\n<p><strong>Universality</strong>: These mathematical models capture the essence of computation itself, independent of specific technologies. The insights apply to any computing system, past or future.</p>\n</li>\n<li>\n<p><strong>Limits</strong>: Most importantly, this mathematical foundation allows us to prove the fundamental limits of computation—what problems can and cannot be solved algorithmically.</p>\n</li>\n</ol>\n<h2 id=\"applying-proof-techniques-to-language-problems\">Applying Proof Techniques to Language Problems</h2>\n<p>Let’s practice applying proof techniques to a language problem:</p>\n<p><strong>Problem</strong>: Prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is a regular language, then its reverse <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mi>R</mi></msup><mo>=</mo><mo stretchy=\"false\">{</mo><msup><mi>w</mi><mi>R</mi></msup><mo>∣</mo><mi>w</mi><mo>∈</mo><mi>L</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L^R = \\{w^R \\mid w \\in L\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">}</span></span></span></span> is also regular.</p>\n<p><strong>Proof Strategy</strong>: We’ll use a constructive approach, showing how to build a new automaton that recognizes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mi>R</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>Since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is regular, there exists a finite automaton <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>Q</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Σ</mi><mo separator=\"true\">,</mo><mi>δ</mi><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">M = (Q, \\Sigma, \\delta, q_0, F)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">Q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Σ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span></span></span></span> that accepts <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>. We can construct a new automaton <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>=</mo><mo stretchy=\"false\">(</mo><mi>Q</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Σ</mi><mo separator=\"true\">,</mo><msup><mi>δ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo separator=\"true\">,</mo><mi>F</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>0</mn></msub><mo stretchy=\"false\">}</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">M' = (Q, \\Sigma, \\delta', F, \\{q_0\\})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">Q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Σ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">})</span></span></span></span> where:</p>\n<ul>\n<li>The states remain the same</li>\n<li>The initial state of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">M'</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is the set of final states of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span></li>\n<li>The only final state of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">M'</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is the initial state of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span></li>\n<li>For every transition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mi>q</mi><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">\\delta(q, a) = p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, add a transition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>δ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>p</mi><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">\\delta'(p, a) = q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">M'</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<p>This new automaton <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">M'</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> recognizes exactly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mi>R</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span></span></span></span>. Therefore, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mi>R</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span></span></span></span> is regular. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">■</mi></mrow><annotation encoding=\"application/x-tex\">\\blacksquare</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.675em;\"></span><span class=\"mord amsrm\">■</span></span></span></span></p>\n<h2 id=\"looking-ahead-where-mathematics-meets-machines\">Looking Ahead: Where Mathematics Meets Machines</h2>\n<p>With these mathematical foundations and proof techniques, you’re now equipped to explore the fascinating world of computational models. In our next section, “Finite Automata: The Language of Simplicity,” we’ll dive into the simplest computational model and see how it captures fundamental patterns in computation.</p>\n<p>Remember, these mathematical tools aren’t just abstract exercises—they’re the language that allows us to precisely describe and reason about the systems that power our digital world. By mastering these foundations, you’re building the mental framework needed to understand everything from regular expressions in search engines to the theoretical limits of artificial intelligence.</p>\n<p>When you search for a text pattern, validate an email address, or use voice recognition on your phone, you’re witnessing these abstract concepts in action. The Chomsky hierarchy isn’t just a theoretical classification—it’s a roadmap for understanding the computational power needed to solve real-world problems.</p>\n<p>As we continue our journey through Theory of Computation, we’ll see how these foundational ideas connect to everyday computing challenges, from designing efficient algorithms to understanding the fundamental limits of artificial intelligence. The mathematical language we’ve established here will be our guide through this fascinating landscape where abstract theory meets practical machine intelligence.</p>",{headings:32,localImagePaths:92,remoteImagePaths:93,frontmatter:94,imagePaths:97},[33,37,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{depth:34,slug:35,text:36},2,"the-symphony-of-symbols-understanding-formal-languages","The Symphony of Symbols: Understanding Formal Languages",{depth:38,slug:39,text:40},4,"the-power-hierarchy-chomskys-classification","The Power Hierarchy: Chomsky’s Classification",{depth:38,slug:42,text:43},"regular-vs-non-regular-the-boundary-of-simplicity","Regular vs. Non-Regular: The Boundary of Simplicity",{depth:34,slug:45,text:46},"table-of-contents","Table of Contents",{depth:34,slug:48,text:49},"why-proofs-matter-in-theory-of-computation","Why Proofs Matter in Theory of Computation",{depth:34,slug:51,text:52},"essential-proof-techniques-in-theory-of-computation","Essential Proof Techniques in Theory of Computation",{depth:38,slug:54,text:55},"direct-proof","Direct Proof",{depth:38,slug:57,text:58},"proof-by-contradiction","Proof by Contradiction",{depth:38,slug:60,text:61},"mathematical-induction","Mathematical Induction",{depth:34,slug:63,text:64},"formal-mathematical-language-alphabets-strings-and-languages","Formal Mathematical Language: Alphabets, Strings, and Languages",{depth:38,slug:66,text:67},"alphabets-σsigmaς","Alphabets (Σ\\SigmaΣ)",{depth:38,slug:69,text:70},"strings","Strings",{depth:38,slug:72,text:73},"operations-on-strings","Operations on Strings",{depth:38,slug:75,text:76},"languages","Languages",{depth:38,slug:78,text:79},"operations-on-languages","Operations on Languages",{depth:34,slug:81,text:82},"bridging-to-computational-models","Bridging to Computational Models",{depth:34,slug:84,text:85},"why-this-mathematical-foundation-matters","Why This Mathematical Foundation Matters",{depth:34,slug:87,text:88},"applying-proof-techniques-to-language-problems","Applying Proof Techniques to Language Problems",{depth:34,slug:90,text:91},"looking-ahead-where-mathematics-meets-machines","Looking Ahead: Where Mathematics Meets Machines",[],[],{title:14,date:95,description:20,author:16,series:23,thumbnail:21,seriesOrder:25,minutesRead:96},["Date","2025-03-22T00:00:00.000Z"],"10 min read",[],"art-of-proofs.md","church-functions",{id:99,data:101,body:109,filePath:110,digest:111,rendered:112,legacyId:137},{title:102,author:103,draft:18,date:104,description:105,featured:18,thumbnail:106,series:107,seriesOrder:25},"Season 1, Act III: Church’s Functions & The Lambda Magic",{id:16,collection:17},["Date","2025-08-25T00:00:00.000Z"],"Foundations of programming logic","/thumbnails/cs-season-one.png",{id:108,collection:24},"cs-season-one","## Introduction\r\n\r\nAfter Kurt Gödel showed that math had built-in limits, the big question became: \"Okay, so what can we solve?\" If we can't create a perfect system to prove everything, maybe we can define exactly what is possible to compute.\r\n\r\nEnter **Alonzo Church**, an American mathematician and logician. He wasn't thinking about physical machines or gears. He was thinking about the purest, most fundamental building block of mathematics: the **function**.\r\n\r\n## What's a Function, Anyway?\r\n\r\nForget your high school algebra class for a moment. Think of a function as a simple machine or a rule.\r\n\r\n- You put something in.\r\n- It does something specific to it.\r\n- It spits something out.\r\n\r\nFor example, a function called `add_five` could be a machine that takes any number you give it and adds five to it.\r\n\r\n- Input: 3 → `add_five` → Output: 8\r\n- Input: 10 → `add_five` → Output: 15\r\n\r\nSimple, right? Church believed that _all_ of computation, from simple arithmetic to complex logic, could be described using only these simple input-output rules.\r\n\r\n## The Magic of Lambda (λ)\r\n\r\nTo explore this idea, Church invented a tiny, powerful language to describe functions. He called it the **Lambda Calculus**. It's not a programming language you'd use to build an app, but it's the ancestor of many modern ones.\r\n\r\nThe core idea is the \"lambda expression,\" which is a way to write a function without even giving it a name. It’s a pure, anonymous rule.\r\n\r\nIn mathematics, you might write the `add_five` function as $f(x) = x + 5$.\r\n\r\nIn Lambda Calculus, Church wrote it like this:\r\n\r\n$$\r\nλx.x + 5\r\n$$\r\n\r\nLet's break that down:\r\n\r\n- **$λ$ (lambda)**: This is just a symbol that says, \"Hey, I'm defining a function right here!\"\r\n- **$x$**: This is the name of the input (the argument).\r\n- **$.$ (dot)**: This separates the input from the rule.\r\n- **$x + 5$**: This is the rule itself - what to do with the input.\r\n\r\nThis little piece of notation says: \"Here is a function that takes an input, which we'll call 'x', and returns that 'x' with 5 added to it.\"\r\n\r\n## Building a Universe from Functions\r\n\r\nHere's where it gets wild. Church showed that you don't need anything else. You don't even need numbers like 1, 2, 3, or operators like `+`. You can build the entire concept of numbers and arithmetic using only these tiny lambda functions.\r\n\r\nFor example, he defined the number \"zero\" as a function, \"one\" as a different function that applies another function once, \"two\" as a function that applies another function twice, and so on. He then created functions that could take these \"number-functions\" and perform addition and multiplication on them.\r\n\r\nIt was a complete, self-contained system for computation built from a single, elegant idea.\r\n\r\n## The Foundation of Programming Logic\r\n\r\nAlonzo Church had created the first universal model of computation. He proposed that any problem that could be solved by an algorithm - any \"effectively calculable\" function - could be expressed in the Lambda Calculus. This is known as the **Church-Turing thesis** (we'll meet Turing next!).\r\n\r\nWhile you might not see $λ$ symbols everywhere, the ghost of Lambda Calculus is in almost every major programming language today:\r\n\r\n- It's the foundation of functional programming languages like Lisp, Haskell, and F#.\r\n- When programmers in Python, JavaScript, or C# use \"lambda functions\" or \"anonymous functions,\" they are using a direct descendant of Church's 1930s invention.\r\n\r\nChurch gave us a powerful new way to think about problems: not as a sequence of steps, but as a series of transformations. You take an input, apply a function to transform it, take that output, and feed it into another function.\r\n\r\nAt the very same time, across the Atlantic, a young British mathematician named Alan Turing was attacking the exact same problem from a completely different angle. He wasn't thinking about pure logic; he was imagining a machine...","src/content/blog/church-functions.md","d4d17063485fe4b1",{html:113,metadata:114},"<h2 id=\"introduction\">Introduction</h2>\n<p>After Kurt Gödel showed that math had built-in limits, the big question became: “Okay, so what can we solve?” If we can’t create a perfect system to prove everything, maybe we can define exactly what is possible to compute.</p>\n<p>Enter <strong>Alonzo Church</strong>, an American mathematician and logician. He wasn’t thinking about physical machines or gears. He was thinking about the purest, most fundamental building block of mathematics: the <strong>function</strong>.</p>\n<h2 id=\"whats-a-function-anyway\">What’s a Function, Anyway?</h2>\n<p>Forget your high school algebra class for a moment. Think of a function as a simple machine or a rule.</p>\n<ul>\n<li>You put something in.</li>\n<li>It does something specific to it.</li>\n<li>It spits something out.</li>\n</ul>\n<p>For example, a function called <code>add_five</code> could be a machine that takes any number you give it and adds five to it.</p>\n<ul>\n<li>Input: 3 → <code>add_five</code> → Output: 8</li>\n<li>Input: 10 → <code>add_five</code> → Output: 15</li>\n</ul>\n<p>Simple, right? Church believed that <em>all</em> of computation, from simple arithmetic to complex logic, could be described using only these simple input-output rules.</p>\n<h2 id=\"the-magic-of-lambda-λ\">The Magic of Lambda (λ)</h2>\n<p>To explore this idea, Church invented a tiny, powerful language to describe functions. He called it the <strong>Lambda Calculus</strong>. It’s not a programming language you’d use to build an app, but it’s the ancestor of many modern ones.</p>\n<p>The core idea is the “lambda expression,” which is a way to write a function without even giving it a name. It’s a pure, anonymous rule.</p>\n<p>In mathematics, you might write the <code>add_five</code> function as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">f(x) = x + 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span>.</p>\n<p>In Lambda Calculus, Church wrote it like this:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>λ</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi><mi>x</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">λx.x + 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span></span>\n<p>Let’s break that down:</p>\n<ul>\n<li><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">λ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span> (lambda)</strong>: This is just a symbol that says, “Hey, I’m defining a function right here!”</li>\n<li><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></strong>: This is the name of the input (the argument).</li>\n<li><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.1056em;\"></span><span class=\"mord\">.</span></span></span></span> (dot)</strong>: This separates the input from the rule.</li>\n<li><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">x + 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span></strong>: This is the rule itself - what to do with the input.</li>\n</ul>\n<p>This little piece of notation says: “Here is a function that takes an input, which we’ll call ‘x’, and returns that ‘x’ with 5 added to it.”</p>\n<h2 id=\"building-a-universe-from-functions\">Building a Universe from Functions</h2>\n<p>Here’s where it gets wild. Church showed that you don’t need anything else. You don’t even need numbers like 1, 2, 3, or operators like <code>+</code>. You can build the entire concept of numbers and arithmetic using only these tiny lambda functions.</p>\n<p>For example, he defined the number “zero” as a function, “one” as a different function that applies another function once, “two” as a function that applies another function twice, and so on. He then created functions that could take these “number-functions” and perform addition and multiplication on them.</p>\n<p>It was a complete, self-contained system for computation built from a single, elegant idea.</p>\n<h2 id=\"the-foundation-of-programming-logic\">The Foundation of Programming Logic</h2>\n<p>Alonzo Church had created the first universal model of computation. He proposed that any problem that could be solved by an algorithm - any “effectively calculable” function - could be expressed in the Lambda Calculus. This is known as the <strong>Church-Turing thesis</strong> (we’ll meet Turing next!).</p>\n<p>While you might not see <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">λ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span> symbols everywhere, the ghost of Lambda Calculus is in almost every major programming language today:</p>\n<ul>\n<li>It’s the foundation of functional programming languages like Lisp, Haskell, and F#.</li>\n<li>When programmers in Python, JavaScript, or C# use “lambda functions” or “anonymous functions,” they are using a direct descendant of Church’s 1930s invention.</li>\n</ul>\n<p>Church gave us a powerful new way to think about problems: not as a sequence of steps, but as a series of transformations. You take an input, apply a function to transform it, take that output, and feed it into another function.</p>\n<p>At the very same time, across the Atlantic, a young British mathematician named Alan Turing was attacking the exact same problem from a completely different angle. He wasn’t thinking about pure logic; he was imagining a machine…</p>",{headings:115,localImagePaths:131,remoteImagePaths:132,frontmatter:133,imagePaths:136},[116,119,122,125,128],{depth:34,slug:117,text:118},"introduction","Introduction",{depth:34,slug:120,text:121},"whats-a-function-anyway","What’s a Function, Anyway?",{depth:34,slug:123,text:124},"the-magic-of-lambda-λ","The Magic of Lambda (λ)",{depth:34,slug:126,text:127},"building-a-universe-from-functions","Building a Universe from Functions",{depth:34,slug:129,text:130},"the-foundation-of-programming-logic","The Foundation of Programming Logic",[],[],{title:102,date:134,description:105,author:16,series:108,thumbnail:106,seriesOrder:25,minutesRead:135},["Date","2025-08-25T00:00:00.000Z"],"4 min read",[],"church-functions.md","context-switching",{id:138,data:140,body:149,filePath:150,digest:151,rendered:152,legacyId:190},{title:141,author:142,draft:18,date:143,description:144,featured:18,thumbnail:145,series:146,seriesOrder:148},"Context Switching: The Hidden Cost of Multitasking",{id:16,collection:17},["Date","2025-05-22T00:00:00.000Z"],"Exploring the concept of context switching in operating systems and its impact on performance.","/thumbnails/os-context-switching.png",{id:147,collection:24},"os",8,"## Introduction\r\n\r\n> Context switching is a fundamental concept in operating systems that allows multiple processes to share the CPU. This process is also a low-level operation which is more relevant to the architecture of computer systems than the operating system itself.\r\n\r\nIn our previous posts, we've explored how operating systems juggle multiple processes using CPU scheduling and respond to external events through interrupts. But we haven't yet examined what happens during the critical moment when your computer transitions from running one process to another — an operation known as context switching.\r\n\r\nThis seemingly simple act of swapping processes is one of the most fundamental yet complex operations in your operating system. It enables the illusion of multitasking, but comes with surprising performance implications that affect your computing experience every day.\r\n\r\n## Table of Contents\r\n\r\n- [What Exactly Is a Context Switch?](#what-exactly-is-a-context-switch)\r\n- [When Do Context Switches Happen?](#when-do-context-switches-happen)\r\n- [The Anatomy of a Context Switch](#the-anatomy-of-a-context-switch)\r\n- [The Hidden Costs of Context Switching](#the-hidden-costs-of-context-switching)\r\n  - [Direct CPU Time Cost](#direct-cpu-time-cost)\r\n  - [Cache and TLB Pollution](#cache-and-tlb-pollution)\r\n  - [Pipeline Flushes](#pipeline-flushes)\r\n  - [Shared Resource Contention](#shared-resource-contention)\r\n- [Coming Up Next](#coming-up-next)\r\n\r\n## What Exactly Is a Context Switch?\r\n\r\nA context switch is the procedure of saving the state of a currently executing process so that it can be restored and resumed later, and then loading the saved state of a different process so the CPU can execute it.\r\n\r\nThe \"context\" being switched includes everything the CPU needs to resume execution exactly where it left off:\r\n\r\n- Values in CPU registers\r\n- Program counter (the address of the next instruction)\r\n- Stack pointer\r\n- Memory management information (page tables)\r\n- Various CPU flags and status bits\r\n\r\nThink of it like a chef preparing multiple dishes at once, carefully noting the exact state of each recipe before switching to another, ensuring nothing burns or gets forgotten.\r\n\r\n## When Do Context Switches Happen?\r\n\r\nContext switches occur in several scenarios:\r\n\r\n1. **Timer interrupts**: When a process's time slice expires\r\n2. **Blocking system calls**: When a process waits for I/O or other resources\r\n3. **Priority-based preemption**: When a higher-priority process becomes ready\r\n4. **Yielding**: When a process voluntarily gives up the CPU\r\n5. **Interrupts**: When hardware events require immediate attention\r\n\r\nEvery switch is a complex dance between hardware and software, requiring careful coordination to maintain system stability.\r\n\r\n## The Anatomy of a Context Switch\r\n\r\nLet's break down what happens during a typical context switch triggered by a timer interrupt:\r\n\r\n1. **CPU Receives Interrupt**: The timer interrupt signals that the current process's time slice has ended.\r\n2. **Save Process State**: The CPU saves the current process's register values and other state information onto the kernel stack.\r\n3. **Switch to Kernel Mode**: The CPU transitions from user mode to kernel mode to safely handle the interrupt.\r\n4. **Execute Interrupt Handler**: The operating system's interrupt handler for the timer runs.\r\n5. **Invoke Scheduler**: The scheduler determines which process should run next.\r\n6. **Update Memory Management**: The memory management unit updates its settings, such as switching page tables, for the new process.\r\n7. **Restore New Process State**: The CPU loads the saved state (registers, program counter, etc.) of the next process.\r\n8. **Return to User Mode**: The CPU switches back to user mode and resumes execution of the new process.\r\n\r\nThis entire sequence can take anywhere from under a microsecond to several microseconds, depending on your hardware and OS implementation.\r\n\r\n## The Hidden Costs of Context Switching\r\n\r\nWhile context switching is essential for multitasking, it comes with a hidden cost. Each switch requires time and resources, which can lead to performance degradation if not managed properly.\r\n\r\n#### Direct CPU Time Cost\r\n\r\nThe CPU spends time saving and restoring registers instead of executing application code. This direct cost is typically a few microseconds per switch.\r\n\r\n#### Cache and TLB Pollution\r\n\r\nModern CPUs rely heavily on caches to speed up memory access:\r\n\r\n- **CPU Caches**: Store recently accessed memory locations\r\n- **Translation Lookaside Buffer (TLB)**: Caches virtual-to-physical address translations\r\n\r\nWhen a context switch occurs, these caches suddenly contain data for the wrong process. This \"cache pollution\" forces the new process to rebuild the cache contents, causing a performance hit that can be much larger than the direct context switch cost.\r\n\r\n#### Pipeline Flushes\r\n\r\nModern CPUs use instruction pipelining, where multiple instructions are processed simultaneously at different stages. A context switch forces the pipeline to be flushed and refilled, causing additional delays.\r\n\r\n#### Shared Resource Contention\r\n\r\nAs processes switch rapidly, they compete for shared hardware resources like CPU caches, memory buses, and prefetch predictors. This contention can degrade performance beyond what you'd expect from the individual costs.\r\n\r\n## Coming Up Next\r\n\r\nNow that we understand the mechanics and costs of switching between processes, our next post will explore the difference between **Threads vs. Processes** and explain when you'd want to use each approach. We'll dive into different threading models and examine the performance implications of various concurrency strategies.","src/content/blog/context-switching.md","3bb56f81c1d79d01",{html:153,metadata:154},"<h2 id=\"introduction\">Introduction</h2>\n<blockquote>\n<p>Context switching is a fundamental concept in operating systems that allows multiple processes to share the CPU. This process is also a low-level operation which is more relevant to the architecture of computer systems than the operating system itself.</p>\n</blockquote>\n<p>In our previous posts, we’ve explored how operating systems juggle multiple processes using CPU scheduling and respond to external events through interrupts. But we haven’t yet examined what happens during the critical moment when your computer transitions from running one process to another — an operation known as context switching.</p>\n<p>This seemingly simple act of swapping processes is one of the most fundamental yet complex operations in your operating system. It enables the illusion of multitasking, but comes with surprising performance implications that affect your computing experience every day.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#what-exactly-is-a-context-switch\">What Exactly Is a Context Switch?</a></li>\n<li><a href=\"#when-do-context-switches-happen\">When Do Context Switches Happen?</a></li>\n<li><a href=\"#the-anatomy-of-a-context-switch\">The Anatomy of a Context Switch</a></li>\n<li><a href=\"#the-hidden-costs-of-context-switching\">The Hidden Costs of Context Switching</a>\n<ul>\n<li><a href=\"#direct-cpu-time-cost\">Direct CPU Time Cost</a></li>\n<li><a href=\"#cache-and-tlb-pollution\">Cache and TLB Pollution</a></li>\n<li><a href=\"#pipeline-flushes\">Pipeline Flushes</a></li>\n<li><a href=\"#shared-resource-contention\">Shared Resource Contention</a></li>\n</ul>\n</li>\n<li><a href=\"#coming-up-next\">Coming Up Next</a></li>\n</ul>\n<h2 id=\"what-exactly-is-a-context-switch\">What Exactly Is a Context Switch?</h2>\n<p>A context switch is the procedure of saving the state of a currently executing process so that it can be restored and resumed later, and then loading the saved state of a different process so the CPU can execute it.</p>\n<p>The “context” being switched includes everything the CPU needs to resume execution exactly where it left off:</p>\n<ul>\n<li>Values in CPU registers</li>\n<li>Program counter (the address of the next instruction)</li>\n<li>Stack pointer</li>\n<li>Memory management information (page tables)</li>\n<li>Various CPU flags and status bits</li>\n</ul>\n<p>Think of it like a chef preparing multiple dishes at once, carefully noting the exact state of each recipe before switching to another, ensuring nothing burns or gets forgotten.</p>\n<h2 id=\"when-do-context-switches-happen\">When Do Context Switches Happen?</h2>\n<p>Context switches occur in several scenarios:</p>\n<ol>\n<li><strong>Timer interrupts</strong>: When a process’s time slice expires</li>\n<li><strong>Blocking system calls</strong>: When a process waits for I/O or other resources</li>\n<li><strong>Priority-based preemption</strong>: When a higher-priority process becomes ready</li>\n<li><strong>Yielding</strong>: When a process voluntarily gives up the CPU</li>\n<li><strong>Interrupts</strong>: When hardware events require immediate attention</li>\n</ol>\n<p>Every switch is a complex dance between hardware and software, requiring careful coordination to maintain system stability.</p>\n<h2 id=\"the-anatomy-of-a-context-switch\">The Anatomy of a Context Switch</h2>\n<p>Let’s break down what happens during a typical context switch triggered by a timer interrupt:</p>\n<ol>\n<li><strong>CPU Receives Interrupt</strong>: The timer interrupt signals that the current process’s time slice has ended.</li>\n<li><strong>Save Process State</strong>: The CPU saves the current process’s register values and other state information onto the kernel stack.</li>\n<li><strong>Switch to Kernel Mode</strong>: The CPU transitions from user mode to kernel mode to safely handle the interrupt.</li>\n<li><strong>Execute Interrupt Handler</strong>: The operating system’s interrupt handler for the timer runs.</li>\n<li><strong>Invoke Scheduler</strong>: The scheduler determines which process should run next.</li>\n<li><strong>Update Memory Management</strong>: The memory management unit updates its settings, such as switching page tables, for the new process.</li>\n<li><strong>Restore New Process State</strong>: The CPU loads the saved state (registers, program counter, etc.) of the next process.</li>\n<li><strong>Return to User Mode</strong>: The CPU switches back to user mode and resumes execution of the new process.</li>\n</ol>\n<p>This entire sequence can take anywhere from under a microsecond to several microseconds, depending on your hardware and OS implementation.</p>\n<h2 id=\"the-hidden-costs-of-context-switching\">The Hidden Costs of Context Switching</h2>\n<p>While context switching is essential for multitasking, it comes with a hidden cost. Each switch requires time and resources, which can lead to performance degradation if not managed properly.</p>\n<h4 id=\"direct-cpu-time-cost\">Direct CPU Time Cost</h4>\n<p>The CPU spends time saving and restoring registers instead of executing application code. This direct cost is typically a few microseconds per switch.</p>\n<h4 id=\"cache-and-tlb-pollution\">Cache and TLB Pollution</h4>\n<p>Modern CPUs rely heavily on caches to speed up memory access:</p>\n<ul>\n<li><strong>CPU Caches</strong>: Store recently accessed memory locations</li>\n<li><strong>Translation Lookaside Buffer (TLB)</strong>: Caches virtual-to-physical address translations</li>\n</ul>\n<p>When a context switch occurs, these caches suddenly contain data for the wrong process. This “cache pollution” forces the new process to rebuild the cache contents, causing a performance hit that can be much larger than the direct context switch cost.</p>\n<h4 id=\"pipeline-flushes\">Pipeline Flushes</h4>\n<p>Modern CPUs use instruction pipelining, where multiple instructions are processed simultaneously at different stages. A context switch forces the pipeline to be flushed and refilled, causing additional delays.</p>\n<h4 id=\"shared-resource-contention\">Shared Resource Contention</h4>\n<p>As processes switch rapidly, they compete for shared hardware resources like CPU caches, memory buses, and prefetch predictors. This contention can degrade performance beyond what you’d expect from the individual costs.</p>\n<h2 id=\"coming-up-next\">Coming Up Next</h2>\n<p>Now that we understand the mechanics and costs of switching between processes, our next post will explore the difference between <strong>Threads vs. Processes</strong> and explain when you’d want to use each approach. We’ll dive into different threading models and examine the performance implications of various concurrency strategies.</p>",{headings:155,localImagePaths:185,remoteImagePaths:186,frontmatter:187,imagePaths:189},[156,157,158,161,164,167,170,173,176,179,182],{depth:34,slug:117,text:118},{depth:34,slug:45,text:46},{depth:34,slug:159,text:160},"what-exactly-is-a-context-switch","What Exactly Is a Context Switch?",{depth:34,slug:162,text:163},"when-do-context-switches-happen","When Do Context Switches Happen?",{depth:34,slug:165,text:166},"the-anatomy-of-a-context-switch","The Anatomy of a Context Switch",{depth:34,slug:168,text:169},"the-hidden-costs-of-context-switching","The Hidden Costs of Context Switching",{depth:38,slug:171,text:172},"direct-cpu-time-cost","Direct CPU Time Cost",{depth:38,slug:174,text:175},"cache-and-tlb-pollution","Cache and TLB Pollution",{depth:38,slug:177,text:178},"pipeline-flushes","Pipeline Flushes",{depth:38,slug:180,text:181},"shared-resource-contention","Shared Resource Contention",{depth:34,slug:183,text:184},"coming-up-next","Coming Up Next",[],[],{title:141,date:188,description:144,author:16,thumbnail:145,series:147,seriesOrder:148,minutesRead:135},["Date","2025-05-22T00:00:00.000Z"],[],"context-switching.md","dsa-introduction",{id:191,data:193,body:202,filePath:203,digest:204,rendered:205,legacyId:245},{title:194,author:195,draft:18,date:196,description:197,featured:18,thumbnail:198,series:199,seriesOrder:201},"Introduction to Data Structures and Algorithms",{id:16,collection:17},["Date","2024-12-06T00:00:00.000Z"],"An introduction to Data Structures and Algorithms.","/thumbnails/dsa-intro.webp",{id:200,collection:24},"dsa",1,"## Introduction to the series\r\n\r\nData Structures and Algorithms are the backbone of computer science, essential for solving problems efficiently and designing effective systems. This series will take you through the concepts in DSA step by step, starting with foundational principles and advancing to more complex topics.\r\n\r\n## Why Focus on DSA?\r\n\r\n- **Efficient Problem-Solving:** Understanding DSA enables you to implement solutions that are both time-efficient and resource-efficient by choosing the optimal methods for processing and managing data.\r\n- **Key to Technical Interviews:** Leading tech companies prioritize DSA expertise during interviews, assessing how candidates approach real-world challenges.\r\n- **Scalable System Design:** With DSA, you can build systems that handle large-scale operations and datasets effectively.\r\n- **Enhanced Coding Versatility:** Even everyday programming tasks benefit from DSA, leading to cleaner, faster, and more robust code.\r\n\r\n## What Are Data Structures and Algorithms?\r\n\r\n#### Data Structures\r\n\r\nData structures are systematic ways of organizing and managing data to enable efficient access and modification. They are indispensable tools in programming. Key examples include:\r\n\r\n- **Arrays:** Sequential memory structures for storing elements of the same type, providing constant-time access by index.\r\n- **Linked Lists:** Dynamic structures made up of nodes that point to subsequent nodes, facilitating efficient insertion and deletion operations.\r\n- **Trees and Graphs:** Advanced structures used to represent hierarchical and interconnected data, commonly applied in scenarios like database indexing or network modeling.\r\n\r\n#### Algorithms\r\n\r\nAlgorithms are structured procedures or sets of rules designed to solve specific computational problems. They operate on data structures as their tools. Examples include:\r\n\r\n- **Searching Algorithms:** Techniques such as binary search for efficiently locating items.\r\n- **Sorting Algorithms:** Methods like merge sort or quicksort for organizing data systematically.\r\n- **Pathfinding Algorithms:** Strategies such as Dijkstra’s algorithm or Bellman for determining the shortest paths in graphs.\r\n\r\n#### Bridging Data Structures and Algorithms\r\n\r\nAlgorithms and data structures are closely interlinked. For instance, binary search is highly efficient when applied to sorted arrays, while breadth-first search (BFS) relies on graph representations.\r\n\r\n## Analyzing Efficiency\r\n\r\nAnalyzing the efficiency of algorithms is essential for effective problem-solving. This involves evaluating their:\r\n\r\n- **Time Complexity:** The relationship between input size and runtime, expressed using Big-O notation (e.g., $O(n)$, $O(\\log n)$, $O(n^2)$).\r\n- **Space Complexity:** The amount of additional memory used beyond the input data.\r\n\r\n## What This Series Covers\r\n\r\nHere is an overview of the topics we will explore:\r\n\r\n- **Core Principles:** A comprehensive dive into time and space complexity analysis.\r\n- **Elementary Data Structures:** Arrays, strings, and linked lists.\r\n- **Intermediate Constructs:** Stacks, queues, trees, and heaps.\r\n- **Advanced Structures:** Graphs, tries, and hash tables.\r\n- **Algorithmic Techniques:** Sorting, searching, dynamic programming, and more.\r\n- **Practical Applications:** Real-world use cases powered by DSA.\r\n\r\nThis is not the exact order of the series, but it provides a roadmap. I may cover some topics in a different order based on their complexity and interdependencies.\r\n\r\n## A Study Roadmap for Learners\r\n\r\n- **Start with Basics:** Focus initially on fundamental structures like arrays and strings to build confidence.\r\n- **Engage in Practice:** Solve problems on platforms such as LeetCode, Codeforces, or HackerRank.\r\n- **Understand the Concepts:** Prioritize understanding the rationale behind each algorithm instead of memorizing solutions.\r\n- **Visualize Structures:** Use diagrams and simulation tools to clarify complex concepts.\r\n\r\n## Next Steps\r\n\r\nThe next post will be on analysis of algorithms, a crucial aspect of DSA. Stay tuned for a deep dive into time and space complexity analysis, essential for evaluating the efficiency of algorithms.","src/content/blog/dsa-introduction.md","cbb4acd4e50c9066",{html:206,metadata:207},"<h2 id=\"introduction-to-the-series\">Introduction to the series</h2>\n<p>Data Structures and Algorithms are the backbone of computer science, essential for solving problems efficiently and designing effective systems. This series will take you through the concepts in DSA step by step, starting with foundational principles and advancing to more complex topics.</p>\n<h2 id=\"why-focus-on-dsa\">Why Focus on DSA?</h2>\n<ul>\n<li><strong>Efficient Problem-Solving:</strong> Understanding DSA enables you to implement solutions that are both time-efficient and resource-efficient by choosing the optimal methods for processing and managing data.</li>\n<li><strong>Key to Technical Interviews:</strong> Leading tech companies prioritize DSA expertise during interviews, assessing how candidates approach real-world challenges.</li>\n<li><strong>Scalable System Design:</strong> With DSA, you can build systems that handle large-scale operations and datasets effectively.</li>\n<li><strong>Enhanced Coding Versatility:</strong> Even everyday programming tasks benefit from DSA, leading to cleaner, faster, and more robust code.</li>\n</ul>\n<h2 id=\"what-are-data-structures-and-algorithms\">What Are Data Structures and Algorithms?</h2>\n<h4 id=\"data-structures\">Data Structures</h4>\n<p>Data structures are systematic ways of organizing and managing data to enable efficient access and modification. They are indispensable tools in programming. Key examples include:</p>\n<ul>\n<li><strong>Arrays:</strong> Sequential memory structures for storing elements of the same type, providing constant-time access by index.</li>\n<li><strong>Linked Lists:</strong> Dynamic structures made up of nodes that point to subsequent nodes, facilitating efficient insertion and deletion operations.</li>\n<li><strong>Trees and Graphs:</strong> Advanced structures used to represent hierarchical and interconnected data, commonly applied in scenarios like database indexing or network modeling.</li>\n</ul>\n<h4 id=\"algorithms\">Algorithms</h4>\n<p>Algorithms are structured procedures or sets of rules designed to solve specific computational problems. They operate on data structures as their tools. Examples include:</p>\n<ul>\n<li><strong>Searching Algorithms:</strong> Techniques such as binary search for efficiently locating items.</li>\n<li><strong>Sorting Algorithms:</strong> Methods like merge sort or quicksort for organizing data systematically.</li>\n<li><strong>Pathfinding Algorithms:</strong> Strategies such as Dijkstra’s algorithm or Bellman for determining the shortest paths in graphs.</li>\n</ul>\n<h4 id=\"bridging-data-structures-and-algorithms\">Bridging Data Structures and Algorithms</h4>\n<p>Algorithms and data structures are closely interlinked. For instance, binary search is highly efficient when applied to sorted arrays, while breadth-first search (BFS) relies on graph representations.</p>\n<h2 id=\"analyzing-efficiency\">Analyzing Efficiency</h2>\n<p>Analyzing the efficiency of algorithms is essential for effective problem-solving. This involves evaluating their:</p>\n<ul>\n<li><strong>Time Complexity:</strong> The relationship between input size and runtime, expressed using Big-O notation (e.g., <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>).</li>\n<li><strong>Space Complexity:</strong> The amount of additional memory used beyond the input data.</li>\n</ul>\n<h2 id=\"what-this-series-covers\">What This Series Covers</h2>\n<p>Here is an overview of the topics we will explore:</p>\n<ul>\n<li><strong>Core Principles:</strong> A comprehensive dive into time and space complexity analysis.</li>\n<li><strong>Elementary Data Structures:</strong> Arrays, strings, and linked lists.</li>\n<li><strong>Intermediate Constructs:</strong> Stacks, queues, trees, and heaps.</li>\n<li><strong>Advanced Structures:</strong> Graphs, tries, and hash tables.</li>\n<li><strong>Algorithmic Techniques:</strong> Sorting, searching, dynamic programming, and more.</li>\n<li><strong>Practical Applications:</strong> Real-world use cases powered by DSA.</li>\n</ul>\n<p>This is not the exact order of the series, but it provides a roadmap. I may cover some topics in a different order based on their complexity and interdependencies.</p>\n<h2 id=\"a-study-roadmap-for-learners\">A Study Roadmap for Learners</h2>\n<ul>\n<li><strong>Start with Basics:</strong> Focus initially on fundamental structures like arrays and strings to build confidence.</li>\n<li><strong>Engage in Practice:</strong> Solve problems on platforms such as LeetCode, Codeforces, or HackerRank.</li>\n<li><strong>Understand the Concepts:</strong> Prioritize understanding the rationale behind each algorithm instead of memorizing solutions.</li>\n<li><strong>Visualize Structures:</strong> Use diagrams and simulation tools to clarify complex concepts.</li>\n</ul>\n<h2 id=\"next-steps\">Next Steps</h2>\n<p>The next post will be on analysis of algorithms, a crucial aspect of DSA. Stay tuned for a deep dive into time and space complexity analysis, essential for evaluating the efficiency of algorithms.</p>",{headings:208,localImagePaths:239,remoteImagePaths:240,frontmatter:241,imagePaths:244},[209,212,215,218,221,224,227,230,233,236],{depth:34,slug:210,text:211},"introduction-to-the-series","Introduction to the series",{depth:34,slug:213,text:214},"why-focus-on-dsa","Why Focus on DSA?",{depth:34,slug:216,text:217},"what-are-data-structures-and-algorithms","What Are Data Structures and Algorithms?",{depth:38,slug:219,text:220},"data-structures","Data Structures",{depth:38,slug:222,text:223},"algorithms","Algorithms",{depth:38,slug:225,text:226},"bridging-data-structures-and-algorithms","Bridging Data Structures and Algorithms",{depth:34,slug:228,text:229},"analyzing-efficiency","Analyzing Efficiency",{depth:34,slug:231,text:232},"what-this-series-covers","What This Series Covers",{depth:34,slug:234,text:235},"a-study-roadmap-for-learners","A Study Roadmap for Learners",{depth:34,slug:237,text:238},"next-steps","Next Steps",[],[],{title:194,date:242,description:197,author:16,series:200,thumbnail:198,seriesOrder:201,minutesRead:243},["Date","2024-12-06T00:00:00.000Z"],"3 min read",[],"dsa-introduction.md","finite-automata",{id:246,data:248,body:255,filePath:256,digest:257,rendered:258,legacyId:352},{title:249,author:250,draft:18,date:251,description:252,featured:18,thumbnail:253,series:254,seriesOrder:38},"Finite Automata: The Language of Simplicity - When Machines Recognize Patterns",{id:16,collection:17},["Date","2025-03-23T00:00:00.000Z"],"A post on analyzing the efficiency of algorithms.","/thumbnails/toc-finite-automata.png",{id:23,collection:24},"## Introduction: The Beauty of Simple Machines\r\n\r\nEver noticed how a traffic light works? It simply cycles through green, yellow, and red. It doesn't need to remember yesterday's traffic or what time it is – it just needs to know its current color and when to change. This simple behavior is what computer scientists call a **finite automaton** – probably the most elegant basic computational model ever created.\r\n\r\nIn our last article, we met the brilliant minds behind the Theory of Computation. Now, let's look at one of their most useful inventions: finite automata – simple computational models that show up everywhere from your keyboard to search engines to the software that makes programming languages work.\r\n\r\n## Formal Definition: The Mathematical Foundation\r\n\r\nBefore we explore examples, let's establish the formal mathematical definition of finite automata, which will help us understand their capabilities and limitations.\r\n\r\n#### Definition 1: Deterministic Finite Automaton (DFA)\r\n\r\nA deterministic finite automaton is formally defined as a 5-tuple $(Q, \\Sigma, \\delta, q_0, F)$ where:\r\n\r\n- $Q$ is a finite set of states\r\n- $\\Sigma$ is a finite set of input symbols called the alphabet\r\n- $\\delta: Q \\times \\Sigma \\rightarrow Q$ is the transition function\r\n- $q_0 \\in Q$ is the initial state\r\n- $F \\subseteq Q$ is the set of accepting (or final) states\r\n\r\nThe transition function $\\delta$ maps a state and an input symbol to a next state. The deterministic nature means that for each state and input symbol, there is exactly one next state.\r\n\r\n#### Definition 2: Non-deterministic Finite Automaton (NFA)\r\n\r\nA non-deterministic finite automaton is also defined as a 5-tuple $(Q, \\Sigma, \\delta, q_0, F)$, but with one crucial difference:\r\n\r\n- $\\delta: Q \\times (\\Sigma \\cup \\{\\epsilon\\}) \\rightarrow \\mathcal{P}(Q)$ is the transition function\r\n\r\nHere, $\\mathcal{P}(Q)$ represents the power set of $Q$ (the set of all subsets of $Q$). This means the transition function maps a state and an input symbol (or the empty string $\\epsilon$) to a set of possible next states.\r\n\r\n#### The Language of a Finite Automaton\r\n\r\nThe language $L(A)$ accepted by a finite automaton $A$ is the set of all strings that when processed by $A$, lead to an accepting state:\r\n\r\n$L(A) = \\{w \\in \\Sigma^* : \\delta^*(q_0, w) \\cap F \\neq \\emptyset\\}$\r\n\r\nWhere $\\delta^*$ is the extended transition function that works on strings rather than individual symbols.\r\n\r\nNow that we have the formal foundation, let's explore what makes finite automata so elegant and useful.\r\n\r\n## What Exactly Is a Finite Automaton?\r\n\r\nA finite automaton is a computational model that reads input one symbol at a time and changes its state based on those symbols. Think of it as a machine with a limited number of internal configurations (states), moving from one state to another as it processes input.\r\n\r\nWhat makes finite automata so elegant:\r\n\r\n- They have a **fixed, limited number of states** (that's why we call them \"finite\")\r\n- They have **no memory** beyond their current state\r\n- They can only **read input in one direction** (left to right) without going backward\r\n- For each input symbol, they **make one state transition**\r\n- They either **accept or reject** the entire input string\r\n\r\nLet's visualize this with a simple example:\r\n\r\nImagine you're standing in a room with three doors labeled 'a', 'b', and 'c'. Your job is to follow directions like \"a, b, a, c\" by walking through those doors. Each door leads to another room (maybe even the same room) with its own set of doors. Some rooms are marked as \"accepting\" rooms. If you end up in an accepting room after following all the directions, you've accepted the sequence.\r\n\r\nThat's it! **You've just acted like a finite automaton** with your body. The rooms are states, the doors are transitions, and the sequence of letters is the input string.\r\n\r\n**Theoretical Perspective:** This room-door visualization directly maps to our formal definition. The rooms represent the set $Q$ of states, the door labels represent the alphabet $\\Sigma$, the connections between rooms represent the transition function $\\delta$, your starting room is the initial state $q_0$, and the \"accepting\" rooms represent the set $F$ of final states.\r\n\r\n## Real-World Examples\r\n\r\nBefore we get into the formal stuff, let's look at some everyday examples to get a feel for finite automata:\r\n\r\n#### The Coffee Vending Machine\r\n\r\nThink about a simple coffee machine with states: READY, COINS_INSERTED, and DISPENSING.\r\n\r\n- It starts in READY state\r\n- When you put in coins, it moves to COINS_INSERTED\r\n- When you press the coffee button (if in COINS_INSERTED), it moves to DISPENSING\r\n- After pouring your coffee, it goes back to READY\r\n\r\nThis machine doesn't need to \"remember\" how many coffees it has made today or what time it is. It only needs to know its current state and what input it gets (coins or button press).\r\n\r\n**Theoretical Formulation:** We can represent this coffee machine as a DFA where:\r\n\r\n- $Q = \\{\\text{READY}, \\text{COINS\\_INSERTED}, \\text{DISPENSING}\\}$\r\n- $\\Sigma = \\{\\text{insert\\_coins}, \\text{press\\_button}, \\text{dispense\\_complete}\\}$\r\n- $q_0 = \\text{READY}$\r\n- $F = \\{\\text{READY}\\}$ (assuming we consider the machine as \"accepting\" when it's ready for a new customer)\r\n- The transition function $\\delta$ is defined as:\r\n  - $\\delta(\\text{READY}, \\text{insert\\_coins}) = \\text{COINS\\_INSERTED}$\r\n  - $\\delta(\\text{COINS\\_INSERTED}, \\text{press\\_button}) = \\text{DISPENSING}$\r\n  - $\\delta(\\text{DISPENSING}, \\text{dispense\\_complete}) = \\text{READY}$\r\n  - All other transitions lead to an implicit error state\r\n\r\n#### The Elevator\r\n\r\nPicture a basic elevator in a three-floor building:\r\n\r\n- It can be on Floor 1, Floor 2, or Floor 3 (these are the states)\r\n- It gets commands: \"go up\" or \"go down\"\r\n- From Floor 1, it can only go up; from Floor 3, it can only go down; from Floor 2, it can go either way\r\n\r\nThe elevator doesn't need to remember where it's been - it only needs to know its current floor and which way it's told to move.\r\n\r\n**Theoretical Formulation:** This elevator can be modeled as a DFA where:\r\n\r\n- $Q = \\{\\text{Floor1}, \\text{Floor2}, \\text{Floor3}\\}$\r\n- $\\Sigma = \\{\\text{up}, \\text{down}\\}$\r\n- $q_0 = \\text{Floor1}$ (assuming the elevator starts on the first floor)\r\n- $F = \\{Floor1, Floor2, Floor3\\}$ (all states are accepting since being on any floor is a valid final position)\r\n- The transition function $\\delta$ is defined as:\r\n  - $\\delta(\\text{Floor1}, \\text{up}) = \\text{Floor2}$\r\n  - $\\delta(\\text{Floor2}, \\text{up}) = \\text{Floor3}$\r\n  - $\\delta(\\text{Floor2}, \\text{down}) = \\text{Floor1}$\r\n  - $\\delta(\\text{Floor3}, \\text{down}) = \\text{Floor2}$\r\n  - $\\delta(\\text{Floor1}, \\text{down})$ and $\\delta(\\text{Floor3}, \\text{up})$ are undefined (or lead to an error state)\r\n\r\n#### The Password Checker\r\n\r\nImagine a simple password system that accepts the password \"abba\":\r\n\r\n- It starts in state S0 (beginning state)\r\n- If it reads 'a', it moves to state S1\r\n- From S1, if it reads 'b', it moves to state S2\r\n- From S2, if it reads 'b', it moves to state S3\r\n- From S3, if it reads 'a', it moves to state S4 (accepting state)\r\n- Any other sequence leads to rejection\r\n\r\nThe system doesn't need to store the characters you've already typed - it only needs to track which state it's in, which implicitly shows how much of the pattern you've correctly entered so far.\r\n\r\n**Theoretical Formulation:** This password checker is a perfect example of a DFA where:\r\n\r\n- $Q = \\{S0, S1, S2, S3, S4, S_{reject}\\}$\r\n- $\\Sigma = \\{a, b\\}$\r\n- $q_0 = S0$\r\n- $F = \\{S4\\}$\r\n- The transition function $\\delta$ is defined as:\r\n  - $\\delta(S0, a) = S1$\r\n  - $\\delta(S1, b) = S2$\r\n  - $\\delta(S2, b) = S3$\r\n  - $\\delta(S3, a) = S4$\r\n  - All other transitions lead to $S_{reject}$\r\n\r\nThe language accepted by this DFA is the singleton set $L = \\{abba\\}$.\r\n\r\nEach of these examples shows a key feature of finite automata: they make decisions based only on their current state and the current input symbol, with no extra memory needed.\r\n\r\n## Deterministic Finite Automata (DFA): Precision and Predictability\r\n\r\nNow let's get more formal with our first automaton type: the Deterministic Finite Automaton (DFA).\r\n\r\nImagine you're playing a game with very strict rules. At any moment, given your current position and the next instruction, there's exactly one place you can move to. No choices, no ambiguity, complete predictability. That's a DFA.\r\n\r\nLet's design a simple DFA that accepts all strings with an even number of 'a's (including zero 'a's):\r\n\r\nThis DFA has two states:\r\n\r\n- $q_0$: We've seen an even number of 'a's so far (accepting state)\r\n- $q_1$: We've seen an odd number of 'a's so far (non-accepting state)\r\n\r\nThe transitions:\r\n\r\n- From $q_0$, if we read 'a', go to $q_1$ (even + 1 = odd)\r\n- From $q_1$, if we read 'a', go to $q_0$ (odd + 1 = even)\r\n- From either state, if we read 'b', stay in the same state (since 'b' doesn't affect our count of 'a's)\r\n\r\n**Formal Definition:** This DFA can be represented as $(Q, \\Sigma, \\delta, q_0, F)$ where:\r\n\r\n- $Q = \\{q_0, q_1\\}$\r\n- $\\Sigma = \\{a, b\\}$\r\n- $q_0$ is the initial state\r\n- $F = \\{q_0\\}$\r\n- The transition function $\\delta$ is defined as:\r\n  - $\\delta(q_0, a) = q_1$\r\n  - $\\delta(q_0, b) = q_0$\r\n  - $\\delta(q_1, a) = q_0$\r\n  - $\\delta(q_1, b) = q_1$\r\n\r\nLet's walk through a simple example: the string \"abbaba\"\r\n\r\n1. Start in state $q_0$ (even count of 'a's: 0)\r\n2. Read 'a': move to $q_1$ (odd count: 1)\r\n3. Read 'b': stay in $q_1$ (odd count: still 1)\r\n4. Read 'b': stay in $q_1$ (odd count: still 1)\r\n5. Read 'a': move to $q_0$ (even count: 2)\r\n6. Read 'b': stay in $q_0$ (even count: still 2)\r\n7. Read 'a': move to $q_1$ (odd count: 3)\r\n\r\nWe end in state $q_1$, which isn't an accepting state, so the string is rejected. This makes sense - \"abbaba\" has 3 'a's, which isn't an even number.\r\n\r\n**Extended Transition Function:** In formal theory, we define an extended transition function $\\delta^*: Q \\times \\Sigma^* \\rightarrow Q$ that works on strings rather than individual symbols:\r\n\r\n- $\\delta^*(q, \\varepsilon) = q$ for all $q \\in Q$ (where $\\varepsilon$ is the empty string)\r\n- $\\delta^*(q, wa) = \\delta(\\delta^*(q, w), a)$ for all $q \\in Q$, $w \\in \\Sigma^*$, and $a \\in \\Sigma$\r\n\r\nUsing this extended transition function, we can say a string $w$ is accepted by the DFA if and only if $\\delta^*(q_0, w) \\in F$.\r\n\r\n#### The Beauty of DFAs\r\n\r\nDFAs have several nice properties:\r\n\r\n- They always give a definite yes/no answer\r\n- They process input in linear time (O(n) where n is the input length)\r\n- They can be implemented very efficiently in hardware and software\r\n- They are closed under operations like union, intersection, and complement (meaning if we can build DFAs for languages A and B, we can build DFAs for A∪B, A∩B, and the complement of A)\r\n\r\n**Closure Properties:** Formally, if $L_1$ and $L_2$ are regular languages (languages recognized by DFAs), then the following are also regular:\r\n\r\n- $L_1 \\cup L_2$ (union)\r\n- $L_1 \\cap L_2$ (intersection)\r\n- $\\overline{L_1}$ (complement)\r\n- $L_1 \\cdot L_2$ (concatenation)\r\n- $L_1^*$ (Kleene star)\r\n\r\n## Non-deterministic Finite Automata (NFA): The Power of Choice\r\n\r\nNow, let's shift gears with a new thought experiment:\r\n\r\nImagine playing a game where at certain points, you can clone yourself and explore multiple paths at the same time. If any version of you reaches the goal, you win! That's how an NFA works.\r\n\r\nNon-deterministic Finite Automata (NFAs) introduce a fascinating concept: choice. An NFA can have multiple possible transitions for the same state and input symbol. It's like the machine can \"guess\" which path will lead to acceptance.\r\n\r\nLet's design an NFA that accepts strings ending with \"ab\":\r\n\r\nThis NFA has three states:\r\n\r\n- $q_0$: Initial state\r\n- $q_1$: We've just seen an 'a'\r\n- $q_2$: We've just seen \"ab\" (accepting state)\r\n\r\nThe transitions:\r\n\r\n- From $q_0$, on input 'a', go to $q_1$\r\n- From $q_0$, on any input, we can also stay in $q_0$ (this is the non-deterministic part!)\r\n- From $q_1$, on input 'b', go to $q_2$\r\n- From $q_2$, on any input, go to a dead state (not shown, for simplicity)\r\n\r\n**Formal Definition:** This NFA can be represented as $(Q, \\Sigma, \\delta, q_0, F)$ where:\r\n\r\n- $Q = \\{q_0, q_1, q_2\\}$\r\n- $\\Sigma = \\{a, b\\}$\r\n- $q_0$ is the initial state\r\n- $F = \\{q_2\\}$\r\n- The transition function $\\delta$ is defined as:\r\n  - $\\delta(q_0, a) = \\{q_0, q_1\\}$ (we can either stay in $q_0$ or move to $q_1$)\r\n  - $\\delta(q_0, b) = \\{q_0\\}$ (we stay in $q_0$)\r\n  - $\\delta(q_1, b) = \\{q_2\\}$ (we move to $q_2$)\r\n  - $\\delta(q_1, a) = \\emptyset$ (no valid transition)\r\n  - $\\delta(q_2, a) = \\delta(q_2, b) = \\emptyset$ (no valid transition)\r\n\r\nThere's something magical about this: the NFA can \"decide\" to stay in $q_0$ for most of the string, then suddenly transition to $q_1$ when it sees an 'a' that might be part of the final \"ab\" sequence.\r\n\r\n**Formal Language Description:** The language recognized by this NFA is $L = \\{w \\in \\{a,b\\}^* | w \\text{ ends with } \"ab\"\\}$, which can also be written as $L = \\{a,b\\}^* \\cdot \\{ab\\}$.\r\n\r\n#### The Intuition of Non-determinism\r\n\r\nPeople often ask: \"How does the machine know which choice to make?\"\r\n\r\nThe answer is beautiful: it doesn't need to! We can think of an NFA as exploring all possible paths at the same time. If ANY path leads to acceptance, the string is accepted.\r\n\r\n**Formal Definition of Acceptance:** A string $w$ is accepted by an NFA if and only if there exists at least one sequence of transitions from the initial state to an accepting state while reading $w$. Mathematically, $w$ is accepted if and only if $\\delta^*(q_0, w) \\cap F \\neq \\emptyset$.\r\n\r\nAnother way to picture it: imagine the NFA creating multiple copies of itself at each choice point, each following a different path. If any copy reaches an accepting state, the input is accepted.\r\n\r\n## Epsilon Transitions: The Art of Silent Moves\r\n\r\nNFAs have another cool feature: $\\varepsilon$-transitions (epsilon transitions). These are transitions that the machine can take without reading any input symbol – essentially \"free moves.\"\r\n\r\nImagine playing a board game where sometimes you can teleport to certain spaces without rolling the dice or taking a turn. These \"free moves\" dramatically change your strategy!\r\n\r\nLet's see how $\\varepsilon$-transitions work with a simple example: an NFA that accepts strings containing either \"ab\" or \"ba\":\r\n\r\nIn this NFA:\r\n\r\n- We start at state $q_0$\r\n- From $q_0$, we can take $\\varepsilon$-transitions to either $q_1$ or $q_4$ (without reading any input)\r\n- From $q_1$, if we read 'a', we go to $q_2$\r\n- From $q_2$, if we read 'b', we go to $q_3$ (accepting state)\r\n- From $q_4$, if we read 'b', we go to $q_5$\r\n- From $q_5$, if we read 'a', we go to $q_6$ (accepting state)\r\n\r\n**Formal Definition:** This NFA with $\\varepsilon$-transitions can be represented as $(Q, \\Sigma, \\delta, q_0, F)$ where:\r\n\r\n- $Q = \\{q_0, q_1, q_2, q_3, q_4, q_5, q_6\\}$\r\n- $\\Sigma = \\{a, b\\}$\r\n- $q_0$ is the initial state\r\n- $F = \\{q_3, q_6\\}$\r\n- The transition function $\\delta$ includes:\r\n  - $\\delta(q_0, \\varepsilon) = \\{q_1, q_4\\}$ (epsilon transitions)\r\n  - $\\delta(q_1, a) = \\{q_2\\}$\r\n  - $\\delta(q_2, b) = \\{q_3\\}$\r\n  - $\\delta(q_4, b) = \\{q_5\\}$\r\n  - $\\delta(q_5, a) = \\{q_6\\}$\r\n\r\n**Epsilon Closure:** In formal theory, we define the $\\varepsilon$-closure of a state $q$ as the set of all states reachable from $q$ by following zero or more $\\varepsilon$-transitions:\r\n$\\varepsilon\\text{-closure}(q) = \\{p \\in Q | q \\xrightarrow{\\varepsilon^*} p\\}$\r\n\r\nThe $\\varepsilon$-transitions allow us to \"guess\" whether we should look for \"ab\" or \"ba\" without committing to either path until we see the actual input.\r\n\r\n## The Surprising Truth: NFA = DFA\r\n\r\nHere's where things get fascinating: despite their differences, NFAs and DFAs are equivalent in power! Any language that can be recognized by an NFA can also be recognized by a DFA, and vice versa.\r\n\r\n**Theorem:** A language is accepted by some DFA if and only if it is accepted by some NFA.\r\n\r\nHow is this possible? Through a process called the \"subset construction,\" we can convert any NFA to an equivalent DFA. The key insight: a state in the new DFA corresponds to a set of possible states in the original NFA.\r\n\r\nLet's convert a simple NFA to a DFA:\r\n\r\nConsider an NFA that accepts strings containing \"ab\":\r\n\r\n**Subset Construction Algorithm:**\r\n\r\n1. Define the start state of the DFA as $\\{q_0\\}$ (or $\\varepsilon\\text{-closure}(q_0)$ if the NFA has $\\varepsilon$-transitions)\r\n2. For each state $S$ in the DFA and each input symbol $a$, define the transition:\r\n   $\\delta_{DFA}(S, a) = \\bigcup_{q \\in S} \\delta_{NFA}(q, a)$\r\n   (or $\\bigcup_{q \\in S} \\varepsilon\\text{-closure}(\\delta_{NFA}(q, a))$ if the NFA has $\\varepsilon$-transitions)\r\n3. A state $S$ in the DFA is accepting if and only if $S \\cap F_{NFA} \\neq \\emptyset$\r\n\r\nThe resulting DFA might have more states than the original NFA (potentially up to $2^n$ states, where $n$ is the number of states in the NFA), but it will recognize exactly the same language.\r\n\r\n**Formal Proof Sketch:** The key insight is that a state in the DFA represents the set of all possible states the NFA could be in after reading a particular prefix of the input. By tracking all possible states simultaneously, the DFA can simulate the NFA's non-deterministic behavior in a deterministic way.\r\n\r\nThis equivalence leads to an important practical insight: NFAs often let us design simpler, more intuitive solutions, which we can then mechanically convert to DFAs for efficient implementation.\r\n\r\n## Minimizing DFAs: The Beauty of Efficiency\r\n\r\nOnce we have a DFA, we can often make it even more elegant through minimization – reducing the number of states while preserving its behavior.\r\n\r\nImagine you're designing a subway map. If two stations connect to exactly the same set of other stations, you could potentially combine them into a single station without changing where passengers can travel.\r\n\r\n**Theorem (Myhill-Nerode):** For any regular language $L$, there is a unique minimal DFA (up to isomorphism) that recognizes $L$.\r\n\r\nThe key insight: two states can be combined if they behave identically for all possible input sequences. The formal algorithm for DFA minimization:\r\n\r\n1. Start by dividing states into accepting and non-accepting groups\r\n2. Repeatedly refine these groups: two states stay in the same group only if, for each input symbol, they transition to states in the same group\r\n3. Continue until no further refinement is possible\r\n4. Each final group becomes a single state in the minimized DFA\r\n\r\n**Formal Algorithm (Hopcroft's Algorithm):**\r\n\r\n1. Partition the states into two sets: accepting states and non-accepting states\r\n2. For each set in the partition, check if all states in the set transition to the same set for each input symbol\r\n3. If not, split the set into smaller sets based on their transitions\r\n4. Repeat until no more splits are possible\r\n5. Each set in the final partition becomes a single state in the minimized DFA\r\n\r\nThis process gives us the smallest DFA that recognizes the same language – a model of mathematical elegance and practical efficiency.\r\n\r\n## Real-World Applications: Where Theory Meets Practice\r\n\r\nFinite automata aren't just elegant theoretical concepts – they're powerful practical tools used throughout computing:\r\n\r\n#### 1. Lexical Analysis in Compilers\r\n\r\nWhen you compile code, the first phase (lexical analysis) uses finite automata to break your code into tokens like \"variable,\" \"keyword,\" or \"operator.\" The scanner reads your source code character by character, using a DFA to recognize valid tokens.\r\n\r\n**Theoretical Connection:** For each token type in the programming language (identifier, keyword, number, etc.), we define a regular expression describing its pattern. We then convert these regular expressions to NFAs, combine them into a single NFA, convert to a DFA, and minimize it for efficiency.\r\n\r\n#### 2. Regular Expression Matching\r\n\r\nEvery time you use search with patterns like `.*\\.jpg` to find image files, you're using finite automata behind the scenes. Regular expressions are converted to NFAs, which are then converted to DFAs for efficient matching.\r\n\r\n**Theoretical Connection:** The theory of regular expressions and finite automata are deeply connected – they represent exactly the same class of languages (regular languages). Any pattern describable by a regular expression can be recognized by a finite automaton, and vice versa.\r\n\r\n#### 3. Protocol Implementation\r\n\r\nNetwork protocols, from TCP/IP to Bluetooth, use finite state machines to track connection states and ensure reliable communication. States like \"LISTENING,\" \"ESTABLISHED,\" and \"CLOSED\" with transitions based on packets received or sent.\r\n\r\n**Theoretical Connection:** The formal modeling of protocols as finite state machines allows for rigorous verification of their properties, such as ensuring that no deadlock states exist.\r\n\r\n#### 4. Digital Circuit Design\r\n\r\nHardware engineers use finite state machines to design sequential circuits. Each flip-flop represents a bit of the current state, with combinational logic implementing the transition function.\r\n\r\n**Theoretical Connection:** The Moore and Mealy machine models in digital design are direct applications of finite automata theory, with the main difference being that they produce output signals on transitions or states.\r\n\r\n#### 5. Natural Language Processing\r\n\r\nIn text processing, finite automata help with tasks like tokenization, stemming, and simple pattern matching – foundational steps in understanding human language.\r\n\r\n**Theoretical Connection:** While full natural language processing requires more powerful computational models (context-free or even context-sensitive), finite automata are valuable for handling the lexical aspects of language processing.\r\n\r\n#### 6. Game Development\r\n\r\nCharacter behaviors in games are often modeled as finite state machines with states like \"PATROLLING,\" \"ATTACKING,\" or \"FLEEING,\" with transitions based on game events.\r\n\r\n**Theoretical Connection:** The deterministic nature of DFAs ensures predictable behavior for game entities, while the ability to model complex state transitions allows for sophisticated AI behaviors.\r\n\r\n#### 7. User Interface Design\r\n\r\nUI components often follow finite state machine models with states like \"INACTIVE,\" \"FOCUSED,\" \"PRESSED,\" etc., with transitions based on user interactions.\r\n\r\n**Theoretical Connection:** The formal modeling of UI components as finite state machines helps ensure that all possible user interactions are handled appropriately, leading to more robust interfaces.\r\n\r\n## Thinking Like a Finite Automaton (Interactive Exercise)\r\n\r\nLet's put theory into practice with a thought experiment:\r\n\r\nImagine you're a DFA designed to recognize valid email addresses (simplified for this exercise). You have the following states:\r\n\r\n- START: Initial state\r\n- GOT_USERNAME: We've seen a valid username\r\n- GOT_AT: We've seen '@' after the username\r\n- GOT_DOMAIN: We've seen a valid domain name\r\n- GOT_DOT: We've seen '.' after the domain\r\n- GOT_TLD: We've seen a valid top-level domain (accepting state)\r\n- ERROR: Invalid input (reject state)\r\n\r\nTry to trace through these inputs in your mind, tracking your state changes:\r\n\r\n1. `alice@example.com`\r\n2. `bob@.com`\r\n3. `charlie@domain`\r\n4. `@domain.com`\r\n\r\nFor each character, ask yourself: \"What state am I in, and where do I go after reading this character?\"\r\n\r\n**Formal Exercise:** For the email DFA described above, try to write out the formal transition function $\\delta$ that captures all the valid transitions. Think about what characters are allowed in usernames, domains, and TLDs, and how to handle invalid inputs.\r\n\r\nThis mental exercise helps develop a feel for how finite automata process input step by step.\r\n\r\n## Challenging Problems: Test Your Understanding\r\n\r\nNow let's test your understanding with some more challenging problems about finite automata:\r\n\r\n1. **DFA Construction:** Construct a DFA that accepts all binary strings that, when interpreted as a binary number, are divisible by 3. For example, the strings \"0\", \"11\", \"110\" should be accepted, while \"1\", \"10\", \"100\" should be rejected.\r\n\r\n2. **NFA to DFA Conversion:** Convert the following NFA to an equivalent DFA using the subset construction algorithm:\r\n\r\n   - States: $\\{q_0, q_1, q_2\\}$\r\n   - Alphabet: $\\{0, 1\\}$\r\n   - Transitions:\r\n     - $\\delta(q_0, 0) = \\{q_0, q_1\\}$\r\n     - $\\delta(q_0, 1) = \\{q_0\\}$\r\n     - $\\delta(q_1, 0) = \\emptyset$\r\n     - $\\delta(q_1, 1) = \\{q_2\\}$\r\n     - $\\delta(q_2, 0) = \\{q_2\\}$\r\n     - $\\delta(q_2, 1) = \\{q_2\\}$\r\n   - Initial state: $q_0$\r\n   - Accepting states: $\\{q_2\\}$\r\n\r\n3. **Proof Challenge:** Prove that the language $L = \\{a^n b^n | n \\geq 1\\}$ (i.e., strings with an equal number of a's followed by an equal number of b's) is not regular. Hint: Use the Pumping Lemma for regular languages.\r\n\r\n4. **Minimization Exercise:** Consider a DFA with states $\\{q_0, q_1, q_2, q_3, q_4\\}$, alphabet $\\{0, 1\\}$, initial state $q_0$, and accepting states $\\{q_0, q_3\\}$. The transition function is:\r\n\r\n   - $\\delta(q_0, 0) = q_1$, $\\delta(q_0, 1) = q_2$\r\n   - $\\delta(q_1, 0) = q_3$, $\\delta(q_1, 1) = q_4$\r\n   - $\\delta(q_2, 0) = q_4$, $\\delta(q_2, 1) = q_3$\r\n   - $\\delta(q_3, 0) = q_3$, $\\delta(q_3, 1) = q_3$\r\n   - $\\delta(q_4, 0) = q_4$, $\\delta(q_4, 1) = q_4$\r\n\r\n   Apply the DFA minimization algorithm to find the minimal equivalent DFA.\r\n\r\n5. **Closure Properties:** Let $L_1$ and $L_2$ be regular languages. Prove that the language $L = \\{xy | x \\in L_1, y \\in L_2, |x| = |y|\\}$ (strings formed by concatenating equal-length strings from $L_1$ and $L_2$) is not necessarily regular.\r\n\r\nThese problems will help deepen your understanding of finite automata theory and its applications. Try to solve them on your own before looking for solutions!\r\n\r\n## Coming Next: Regular Expressions - The Language of Patterns\r\n\r\nNow that you understand finite automata, we're ready to explore Regular Expressions – a powerful pattern language that's equivalent in power to finite automata but offers a more concise way to describe patterns.\r\n\r\nIn our next article, we'll explore how regular expressions work, their connection to finite automata, and how they're used in everything from text editors to search engines to data validation.\r\n\r\nUntil then, try to spot finite automata in the world around you – they're in your toaster, your traffic lights, your keyboard, and countless other devices and systems!","src/content/blog/finite-automata.md","ba4790cc1a12af8f",{html:259,metadata:260},"<h2 id=\"introduction-the-beauty-of-simple-machines\">Introduction: The Beauty of Simple Machines</h2>\n<p>Ever noticed how a traffic light works? It simply cycles through green, yellow, and red. It doesn’t need to remember yesterday’s traffic or what time it is – it just needs to know its current color and when to change. This simple behavior is what computer scientists call a <strong>finite automaton</strong> – probably the most elegant basic computational model ever created.</p>\n<p>In our last article, we met the brilliant minds behind the Theory of Computation. Now, let’s look at one of their most useful inventions: finite automata – simple computational models that show up everywhere from your keyboard to search engines to the software that makes programming languages work.</p>\n<h2 id=\"formal-definition-the-mathematical-foundation\">Formal Definition: The Mathematical Foundation</h2>\n<p>Before we explore examples, let’s establish the formal mathematical definition of finite automata, which will help us understand their capabilities and limitations.</p>\n<h4 id=\"definition-1-deterministic-finite-automaton-dfa\">Definition 1: Deterministic Finite Automaton (DFA)</h4>\n<p>A deterministic finite automaton is formally defined as a 5-tuple <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>Q</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Σ</mi><mo separator=\"true\">,</mo><mi>δ</mi><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(Q, \\Sigma, \\delta, q_0, F)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">Q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Σ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span></span></span></span> where:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> is a finite set of states</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span> is a finite set of input symbols called the alphabet</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo>:</mo><mi>Q</mi><mo>×</mo><mi mathvariant=\"normal\">Σ</mi><mo>→</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">\\delta: Q \\times \\Sigma \\rightarrow Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> is the transition function</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub><mo>∈</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">q_0 \\in Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> is the initial state</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>⊆</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">F \\subseteq Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> is the set of accepting (or final) states</li>\n</ul>\n<p>The transition function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> maps a state and an input symbol to a next state. The deterministic nature means that for each state and input symbol, there is exactly one next state.</p>\n<h4 id=\"definition-2-non-deterministic-finite-automaton-nfa\">Definition 2: Non-deterministic Finite Automaton (NFA)</h4>\n<p>A non-deterministic finite automaton is also defined as a 5-tuple <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>Q</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Σ</mi><mo separator=\"true\">,</mo><mi>δ</mi><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(Q, \\Sigma, \\delta, q_0, F)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">Q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Σ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span></span></span></span>, but with one crucial difference:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo>:</mo><mi>Q</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Σ</mi><mo>∪</mo><mo stretchy=\"false\">{</mo><mi>ϵ</mi><mo stretchy=\"false\">}</mo><mo stretchy=\"false\">)</mo><mo>→</mo><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>Q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\delta: Q \\times (\\Sigma \\cup \\{\\epsilon\\}) \\rightarrow \\mathcal{P}(Q)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">ϵ</span><span class=\"mclose\">})</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">)</span></span></span></span> is the transition function</li>\n</ul>\n<p>Here, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">P</mi><mo stretchy=\"false\">(</mo><mi>Q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{P}(Q)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">)</span></span></span></span> represents the power set of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> (the set of all subsets of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span>). This means the transition function maps a state and an input symbol (or the empty string <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span></span>) to a set of possible next states.</p>\n<h4 id=\"the-language-of-a-finite-automaton\">The Language of a Finite Automaton</h4>\n<p>The language <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> accepted by a finite automaton <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is the set of all strings that when processed by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, lead to an accepting state:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>w</mi><mo>∈</mo><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup><mo>:</mo><msup><mi>δ</mi><mo>∗</mo></msup><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo>∩</mo><mi>F</mi><mo mathvariant=\"normal\">≠</mo><mi mathvariant=\"normal\">∅</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L(A) = \\{w \\in \\Sigma^* : \\delta^*(q_0, w) \\cap F \\neq \\emptyset\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∅</span><span class=\"mclose\">}</span></span></span></span></p>\n<p>Where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>δ</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\delta^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> is the extended transition function that works on strings rather than individual symbols.</p>\n<p>Now that we have the formal foundation, let’s explore what makes finite automata so elegant and useful.</p>\n<h2 id=\"what-exactly-is-a-finite-automaton\">What Exactly Is a Finite Automaton?</h2>\n<p>A finite automaton is a computational model that reads input one symbol at a time and changes its state based on those symbols. Think of it as a machine with a limited number of internal configurations (states), moving from one state to another as it processes input.</p>\n<p>What makes finite automata so elegant:</p>\n<ul>\n<li>They have a <strong>fixed, limited number of states</strong> (that’s why we call them “finite”)</li>\n<li>They have <strong>no memory</strong> beyond their current state</li>\n<li>They can only <strong>read input in one direction</strong> (left to right) without going backward</li>\n<li>For each input symbol, they <strong>make one state transition</strong></li>\n<li>They either <strong>accept or reject</strong> the entire input string</li>\n</ul>\n<p>Let’s visualize this with a simple example:</p>\n<p>Imagine you’re standing in a room with three doors labeled ‘a’, ‘b’, and ‘c’. Your job is to follow directions like “a, b, a, c” by walking through those doors. Each door leads to another room (maybe even the same room) with its own set of doors. Some rooms are marked as “accepting” rooms. If you end up in an accepting room after following all the directions, you’ve accepted the sequence.</p>\n<p>That’s it! <strong>You’ve just acted like a finite automaton</strong> with your body. The rooms are states, the doors are transitions, and the sequence of letters is the input string.</p>\n<p><strong>Theoretical Perspective:</strong> This room-door visualization directly maps to our formal definition. The rooms represent the set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> of states, the door labels represent the alphabet <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span>, the connections between rooms represent the transition function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>, your starting room is the initial state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and the “accepting” rooms represent the set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> of final states.</p>\n<h2 id=\"real-world-examples\">Real-World Examples</h2>\n<p>Before we get into the formal stuff, let’s look at some everyday examples to get a feel for finite automata:</p>\n<h4 id=\"the-coffee-vending-machine\">The Coffee Vending Machine</h4>\n<p>Think about a simple coffee machine with states: READY, COINS_INSERTED, and DISPENSING.</p>\n<ul>\n<li>It starts in READY state</li>\n<li>When you put in coins, it moves to COINS_INSERTED</li>\n<li>When you press the coffee button (if in COINS_INSERTED), it moves to DISPENSING</li>\n<li>After pouring your coffee, it goes back to READY</li>\n</ul>\n<p>This machine doesn’t need to “remember” how many coffees it has made today or what time it is. It only needs to know its current state and what input it gets (coins or button press).</p>\n<p><strong>Theoretical Formulation:</strong> We can represent this coffee machine as a DFA where:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mtext>READY</mtext><mo separator=\"true\">,</mo><mtext>COINS_INSERTED</mtext><mo separator=\"true\">,</mo><mtext>DISPENSING</mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Q = \\{\\text{READY}, \\text{COINS\\_INSERTED}, \\text{DISPENSING}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mopen\">{</span><span class=\"mord text\"><span class=\"mord\">READY</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">COINS_INSERTED</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">DISPENSING</span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mtext>insert_coins</mtext><mo separator=\"true\">,</mo><mtext>press_button</mtext><mo separator=\"true\">,</mo><mtext>dispense_complete</mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma = \\{\\text{insert\\_coins}, \\text{press\\_button}, \\text{dispense\\_complete}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mopen\">{</span><span class=\"mord text\"><span class=\"mord\">insert_coins</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">press_button</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">dispense_complete</span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub><mo>=</mo><mtext>READY</mtext></mrow><annotation encoding=\"application/x-tex\">q_0 = \\text{READY}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord text\"><span class=\"mord\">READY</span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mtext>READY</mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">F = \\{\\text{READY}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord text\"><span class=\"mord\">READY</span></span><span class=\"mclose\">}</span></span></span></span> (assuming we consider the machine as “accepting” when it’s ready for a new customer)</li>\n<li>The transition function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> is defined as:\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mtext>READY</mtext><mo separator=\"true\">,</mo><mtext>insert_coins</mtext><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>COINS_INSERTED</mtext></mrow><annotation encoding=\"application/x-tex\">\\delta(\\text{READY}, \\text{insert\\_coins}) = \\text{COINS\\_INSERTED}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">READY</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">insert_coins</span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9933em;vertical-align:-0.31em;\"></span><span class=\"mord text\"><span class=\"mord\">COINS_INSERTED</span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mtext>COINS_INSERTED</mtext><mo separator=\"true\">,</mo><mtext>press_button</mtext><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>DISPENSING</mtext></mrow><annotation encoding=\"application/x-tex\">\\delta(\\text{COINS\\_INSERTED}, \\text{press\\_button}) = \\text{DISPENSING}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">COINS_INSERTED</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">press_button</span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord text\"><span class=\"mord\">DISPENSING</span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mtext>DISPENSING</mtext><mo separator=\"true\">,</mo><mtext>dispense_complete</mtext><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>READY</mtext></mrow><annotation encoding=\"application/x-tex\">\\delta(\\text{DISPENSING}, \\text{dispense\\_complete}) = \\text{READY}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">DISPENSING</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">dispense_complete</span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord text\"><span class=\"mord\">READY</span></span></span></span></span></li>\n<li>All other transitions lead to an implicit error state</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"the-elevator\">The Elevator</h4>\n<p>Picture a basic elevator in a three-floor building:</p>\n<ul>\n<li>It can be on Floor 1, Floor 2, or Floor 3 (these are the states)</li>\n<li>It gets commands: “go up” or “go down”</li>\n<li>From Floor 1, it can only go up; from Floor 3, it can only go down; from Floor 2, it can go either way</li>\n</ul>\n<p>The elevator doesn’t need to remember where it’s been - it only needs to know its current floor and which way it’s told to move.</p>\n<p><strong>Theoretical Formulation:</strong> This elevator can be modeled as a DFA where:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mtext>Floor1</mtext><mo separator=\"true\">,</mo><mtext>Floor2</mtext><mo separator=\"true\">,</mo><mtext>Floor3</mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Q = \\{\\text{Floor1}, \\text{Floor2}, \\text{Floor3}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord text\"><span class=\"mord\">Floor1</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">Floor2</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">Floor3</span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mtext>up</mtext><mo separator=\"true\">,</mo><mtext>down</mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma = \\{\\text{up}, \\text{down}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord text\"><span class=\"mord\">up</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">down</span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub><mo>=</mo><mtext>Floor1</mtext></mrow><annotation encoding=\"application/x-tex\">q_0 = \\text{Floor1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">Floor1</span></span></span></span></span> (assuming the elevator starts on the first floor)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>F</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>r</mi><mn>1</mn><mo separator=\"true\">,</mo><mi>F</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>r</mi><mn>2</mn><mo separator=\"true\">,</mo><mi>F</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>r</mi><mn>3</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">F = \\{Floor1, Floor2, Floor3\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Fl</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">oor</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Fl</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">oor</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Fl</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">oor</span><span class=\"mord\">3</span><span class=\"mclose\">}</span></span></span></span> (all states are accepting since being on any floor is a valid final position)</li>\n<li>The transition function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> is defined as:\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mtext>Floor1</mtext><mo separator=\"true\">,</mo><mtext>up</mtext><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>Floor2</mtext></mrow><annotation encoding=\"application/x-tex\">\\delta(\\text{Floor1}, \\text{up}) = \\text{Floor2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">Floor1</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">up</span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">Floor2</span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mtext>Floor2</mtext><mo separator=\"true\">,</mo><mtext>up</mtext><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>Floor3</mtext></mrow><annotation encoding=\"application/x-tex\">\\delta(\\text{Floor2}, \\text{up}) = \\text{Floor3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">Floor2</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">up</span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">Floor3</span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mtext>Floor2</mtext><mo separator=\"true\">,</mo><mtext>down</mtext><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>Floor1</mtext></mrow><annotation encoding=\"application/x-tex\">\\delta(\\text{Floor2}, \\text{down}) = \\text{Floor1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">Floor2</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">down</span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">Floor1</span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mtext>Floor3</mtext><mo separator=\"true\">,</mo><mtext>down</mtext><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>Floor2</mtext></mrow><annotation encoding=\"application/x-tex\">\\delta(\\text{Floor3}, \\text{down}) = \\text{Floor2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">Floor3</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">down</span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">Floor2</span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mtext>Floor1</mtext><mo separator=\"true\">,</mo><mtext>down</mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(\\text{Floor1}, \\text{down})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">Floor1</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">down</span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mtext>Floor3</mtext><mo separator=\"true\">,</mo><mtext>up</mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(\\text{Floor3}, \\text{up})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">Floor3</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">up</span></span><span class=\"mclose\">)</span></span></span></span> are undefined (or lead to an error state)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"the-password-checker\">The Password Checker</h4>\n<p>Imagine a simple password system that accepts the password “abba”:</p>\n<ul>\n<li>It starts in state S0 (beginning state)</li>\n<li>If it reads ‘a’, it moves to state S1</li>\n<li>From S1, if it reads ‘b’, it moves to state S2</li>\n<li>From S2, if it reads ‘b’, it moves to state S3</li>\n<li>From S3, if it reads ‘a’, it moves to state S4 (accepting state)</li>\n<li>Any other sequence leads to rejection</li>\n</ul>\n<p>The system doesn’t need to store the characters you’ve already typed - it only needs to track which state it’s in, which implicitly shows how much of the pattern you’ve correctly entered so far.</p>\n<p><strong>Theoretical Formulation:</strong> This password checker is a perfect example of a DFA where:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>S</mi><mn>0</mn><mo separator=\"true\">,</mo><mi>S</mi><mn>1</mn><mo separator=\"true\">,</mo><mi>S</mi><mn>2</mn><mo separator=\"true\">,</mo><mi>S</mi><mn>3</mn><mo separator=\"true\">,</mo><mi>S</mi><mn>4</mn><mo separator=\"true\">,</mo><msub><mi>S</mi><mrow><mi>r</mi><mi>e</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Q = \\{S0, S1, S2, S3, S4, S_{reject}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">re</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\">ec</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma = \\{a, b\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub><mo>=</mo><mi>S</mi><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">q_0 = S0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">0</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>S</mi><mn>4</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">F = \\{S4\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">4</span><span class=\"mclose\">}</span></span></span></span></li>\n<li>The transition function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> is defined as:\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mn>0</mn><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>S</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\delta(S0, a) = S1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">1</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mn>1</mn><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>S</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\delta(S1, b) = S2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">2</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mn>2</mn><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>S</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">\\delta(S2, b) = S3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">3</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mn>3</mn><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>S</mi><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">\\delta(S3, a) = S4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">4</span></span></span></span></li>\n<li>All other transitions lead to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mrow><mi>r</mi><mi>e</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">S_{reject}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">re</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\">ec</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<p>The language accepted by this DFA is the singleton set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mi>b</mi><mi>b</mi><mi>a</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L = \\{abba\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">abba</span><span class=\"mclose\">}</span></span></span></span>.</p>\n<p>Each of these examples shows a key feature of finite automata: they make decisions based only on their current state and the current input symbol, with no extra memory needed.</p>\n<h2 id=\"deterministic-finite-automata-dfa-precision-and-predictability\">Deterministic Finite Automata (DFA): Precision and Predictability</h2>\n<p>Now let’s get more formal with our first automaton type: the Deterministic Finite Automaton (DFA).</p>\n<p>Imagine you’re playing a game with very strict rules. At any moment, given your current position and the next instruction, there’s exactly one place you can move to. No choices, no ambiguity, complete predictability. That’s a DFA.</p>\n<p>Let’s design a simple DFA that accepts all strings with an even number of ‘a’s (including zero ‘a’s):</p>\n<p>This DFA has two states:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: We’ve seen an even number of ‘a’s so far (accepting state)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: We’ve seen an odd number of ‘a’s so far (non-accepting state)</li>\n</ul>\n<p>The transitions:</p>\n<ul>\n<li>From <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, if we read ‘a’, go to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (even + 1 = odd)</li>\n<li>From <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, if we read ‘a’, go to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (odd + 1 = even)</li>\n<li>From either state, if we read ‘b’, stay in the same state (since ‘b’ doesn’t affect our count of ‘a’s)</li>\n</ul>\n<p><strong>Formal Definition:</strong> This DFA can be represented as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>Q</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Σ</mi><mo separator=\"true\">,</mo><mi>δ</mi><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(Q, \\Sigma, \\delta, q_0, F)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">Q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Σ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span></span></span></span> where:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>1</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Q = \\{q_0, q_1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma = \\{a, b\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the initial state</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>0</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">F = \\{q_0\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li>The transition function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> is defined as:\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_0, a) = q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_0, b) = q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_1, a) = q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_1, b) = q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<p>Let’s walk through a simple example: the string “abbaba”</p>\n<ol>\n<li>Start in state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (even count of ‘a’s: 0)</li>\n<li>Read ‘a’: move to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (odd count: 1)</li>\n<li>Read ‘b’: stay in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (odd count: still 1)</li>\n<li>Read ‘b’: stay in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (odd count: still 1)</li>\n<li>Read ‘a’: move to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (even count: 2)</li>\n<li>Read ‘b’: stay in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (even count: still 2)</li>\n<li>Read ‘a’: move to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (odd count: 3)</li>\n</ol>\n<p>We end in state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, which isn’t an accepting state, so the string is rejected. This makes sense - “abbaba” has 3 ‘a’s, which isn’t an even number.</p>\n<p><strong>Extended Transition Function:</strong> In formal theory, we define an extended transition function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>δ</mi><mo>∗</mo></msup><mo>:</mo><mi>Q</mi><mo>×</mo><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup><mo>→</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">\\delta^*: Q \\times \\Sigma^* \\rightarrow Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> that works on strings rather than individual symbols:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>δ</mi><mo>∗</mo></msup><mo stretchy=\"false\">(</mo><mi>q</mi><mo separator=\"true\">,</mo><mi>ε</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">\\delta^*(q, \\varepsilon) = q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>∈</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">q \\in Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span> (where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> is the empty string)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>δ</mi><mo>∗</mo></msup><mo stretchy=\"false\">(</mo><mi>q</mi><mo separator=\"true\">,</mo><mi>w</mi><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>δ</mi><mo stretchy=\"false\">(</mo><msup><mi>δ</mi><mo>∗</mo></msup><mo stretchy=\"false\">(</mo><mi>q</mi><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\delta^*(q, wa) = \\delta(\\delta^*(q, w), a)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>∈</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">q \\in Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mo>∈</mo><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">w \\in \\Sigma^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">a \\in \\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span></li>\n</ul>\n<p>Using this extended transition function, we can say a string <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> is accepted by the DFA if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>δ</mi><mo>∗</mo></msup><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">\\delta^*(q_0, w) \\in F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>.</p>\n<h4 id=\"the-beauty-of-dfas\">The Beauty of DFAs</h4>\n<p>DFAs have several nice properties:</p>\n<ul>\n<li>They always give a definite yes/no answer</li>\n<li>They process input in linear time (O(n) where n is the input length)</li>\n<li>They can be implemented very efficiently in hardware and software</li>\n<li>They are closed under operations like union, intersection, and complement (meaning if we can build DFAs for languages A and B, we can build DFAs for A∪B, A∩B, and the complement of A)</li>\n</ul>\n<p><strong>Closure Properties:</strong> Formally, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are regular languages (languages recognized by DFAs), then the following are also regular:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>L</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_1 \\cup L_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (union)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub><mo>∩</mo><msub><mi>L</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_1 \\cap L_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (intersection)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><msub><mi>L</mi><mn>1</mn></msub><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{L_1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0333em;vertical-align:-0.15em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span> (complement)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub><mo>⋅</mo><msub><mi>L</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_1 \\cdot L_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (concatenation)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>L</mi><mn>1</mn><mo>∗</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">L_1^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9368em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-2.4519em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span></span></span></span> (Kleene star)</li>\n</ul>\n<h2 id=\"non-deterministic-finite-automata-nfa-the-power-of-choice\">Non-deterministic Finite Automata (NFA): The Power of Choice</h2>\n<p>Now, let’s shift gears with a new thought experiment:</p>\n<p>Imagine playing a game where at certain points, you can clone yourself and explore multiple paths at the same time. If any version of you reaches the goal, you win! That’s how an NFA works.</p>\n<p>Non-deterministic Finite Automata (NFAs) introduce a fascinating concept: choice. An NFA can have multiple possible transitions for the same state and input symbol. It’s like the machine can “guess” which path will lead to acceptance.</p>\n<p>Let’s design an NFA that accepts strings ending with “ab”:</p>\n<p>This NFA has three states:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: Initial state</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: We’ve just seen an ‘a’</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: We’ve just seen “ab” (accepting state)</li>\n</ul>\n<p>The transitions:</p>\n<ul>\n<li>From <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, on input ‘a’, go to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>From <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, on any input, we can also stay in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (this is the non-deterministic part!)</li>\n<li>From <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, on input ‘b’, go to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>From <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, on any input, go to a dead state (not shown, for simplicity)</li>\n</ul>\n<p><strong>Formal Definition:</strong> This NFA can be represented as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>Q</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Σ</mi><mo separator=\"true\">,</mo><mi>δ</mi><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(Q, \\Sigma, \\delta, q_0, F)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">Q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Σ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span></span></span></span> where:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Q = \\{q_0, q_1, q_2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma = \\{a, b\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the initial state</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">F = \\{q_2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li>The transition function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> is defined as:\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>1</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(q_0, a) = \\{q_0, q_1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> (we can either stay in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> or move to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>0</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(q_0, b) = \\{q_0\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> (we stay in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(q_1, b) = \\{q_2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> (we move to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\delta(q_1, a) = \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span> (no valid transition)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\delta(q_2, a) = \\delta(q_2, b) = \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span> (no valid transition)</li>\n</ul>\n</li>\n</ul>\n<p>There’s something magical about this: the NFA can “decide” to stay in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> for most of the string, then suddenly transition to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> when it sees an ‘a’ that might be part of the final “ab” sequence.</p>\n<p><strong>Formal Language Description:</strong> The language recognized by this NFA is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>w</mi><mo>∈</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><msup><mo stretchy=\"false\">}</mo><mo>∗</mo></msup><mi mathvariant=\"normal\">∣</mi><mi>w</mi><mtext> ends with </mtext><mi mathvariant=\"normal\">\"</mi><mi>a</mi><mi>b</mi><mi mathvariant=\"normal\">\"</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L = \\{w \\in \\{a,b\\}^* | w \\text{ ends with } \"ab\"\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord text\"><span class=\"mord\"> ends with </span></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">ab</span><span class=\"mord\">\"</span><span class=\"mclose\">}</span></span></span></span>, which can also be written as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><msup><mo stretchy=\"false\">}</mo><mo>∗</mo></msup><mo>⋅</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mi>b</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L = \\{a,b\\}^* \\cdot \\{ab\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">ab</span><span class=\"mclose\">}</span></span></span></span>.</p>\n<h4 id=\"the-intuition-of-non-determinism\">The Intuition of Non-determinism</h4>\n<p>People often ask: “How does the machine know which choice to make?”</p>\n<p>The answer is beautiful: it doesn’t need to! We can think of an NFA as exploring all possible paths at the same time. If ANY path leads to acceptance, the string is accepted.</p>\n<p><strong>Formal Definition of Acceptance:</strong> A string <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> is accepted by an NFA if and only if there exists at least one sequence of transitions from the initial state to an accepting state while reading <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span>. Mathematically, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> is accepted if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>δ</mi><mo>∗</mo></msup><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo>∩</mo><mi>F</mi><mo mathvariant=\"normal\">≠</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\delta^*(q_0, w) \\cap F \\neq \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span>.</p>\n<p>Another way to picture it: imagine the NFA creating multiple copies of itself at each choice point, each following a different path. If any copy reaches an accepting state, the input is accepted.</p>\n<h2 id=\"epsilon-transitions-the-art-of-silent-moves\">Epsilon Transitions: The Art of Silent Moves</h2>\n<p>NFAs have another cool feature: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>-transitions (epsilon transitions). These are transitions that the machine can take without reading any input symbol – essentially “free moves.”</p>\n<p>Imagine playing a board game where sometimes you can teleport to certain spaces without rolling the dice or taking a turn. These “free moves” dramatically change your strategy!</p>\n<p>Let’s see how <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>-transitions work with a simple example: an NFA that accepts strings containing either “ab” or “ba”:</p>\n<p>In this NFA:</p>\n<ul>\n<li>We start at state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>From <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, we can take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>-transitions to either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (without reading any input)</li>\n<li>From <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, if we read ‘a’, we go to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>From <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, if we read ‘b’, we go to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (accepting state)</li>\n<li>From <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, if we read ‘b’, we go to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>5</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>From <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>5</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, if we read ‘a’, we go to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>6</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (accepting state)</li>\n</ul>\n<p><strong>Formal Definition:</strong> This NFA with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>-transitions can be represented as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>Q</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Σ</mi><mo separator=\"true\">,</mo><mi>δ</mi><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(Q, \\Sigma, \\delta, q_0, F)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">Q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Σ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span></span></span></span> where:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>4</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>5</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>6</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Q = \\{q_0, q_1, q_2, q_3, q_4, q_5, q_6\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma = \\{a, b\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the initial state</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>6</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">F = \\{q_3, q_6\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li>The transition function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> includes:\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mi>ε</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>4</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(q_0, \\varepsilon) = \\{q_1, q_4\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> (epsilon transitions)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(q_1, a) = \\{q_2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>3</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(q_2, b) = \\{q_3\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>4</mn></msub><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>5</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(q_4, b) = \\{q_5\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>5</mn></msub><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>6</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(q_5, a) = \\{q_6\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<p><strong>Epsilon Closure:</strong> In formal theory, we define the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>-closure of a state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> as the set of all states reachable from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> by following zero or more <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>-transitions:\r\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi><mtext>-closure</mtext><mo stretchy=\"false\">(</mo><mi>q</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mi>p</mi><mo>∈</mo><mi>Q</mi><mi mathvariant=\"normal\">∣</mi><mi>q</mi><mover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><msup><mi>ε</mi><mo>∗</mo></msup></mpadded></mover><mi>p</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\varepsilon\\text{-closure}(q) = \\{p \\in Q | q \\xrightarrow{\\varepsilon^*} p\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mord text\"><span class=\"mord\">-closure</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4063em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1563em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ε</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7633em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.522em\" viewBox=\"0 0 400000 522\" preserveAspectRatio=\"xMaxYMin slice\"><path d=\"M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">}</span></span></span></span></p>\n<p>The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>-transitions allow us to “guess” whether we should look for “ab” or “ba” without committing to either path until we see the actual input.</p>\n<h2 id=\"the-surprising-truth-nfa--dfa\">The Surprising Truth: NFA = DFA</h2>\n<p>Here’s where things get fascinating: despite their differences, NFAs and DFAs are equivalent in power! Any language that can be recognized by an NFA can also be recognized by a DFA, and vice versa.</p>\n<p><strong>Theorem:</strong> A language is accepted by some DFA if and only if it is accepted by some NFA.</p>\n<p>How is this possible? Through a process called the “subset construction,” we can convert any NFA to an equivalent DFA. The key insight: a state in the new DFA corresponds to a set of possible states in the original NFA.</p>\n<p>Let’s convert a simple NFA to a DFA:</p>\n<p>Consider an NFA that accepts strings containing “ab”:</p>\n<p><strong>Subset Construction Algorithm:</strong></p>\n<ol>\n<li>Define the start state of the DFA as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>0</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{q_0\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> (or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi><mtext>-closure</mtext><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varepsilon\\text{-closure}(q_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mord text\"><span class=\"mord\">-closure</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> if the NFA has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>-transitions)</li>\n<li>For each state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> in the DFA and each input symbol <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>, define the transition:\r\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>δ</mi><mrow><mi>D</mi><mi>F</mi><mi>A</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>⋃</mo><mrow><mi>q</mi><mo>∈</mo><mi>S</mi></mrow></msub><msub><mi>δ</mi><mrow><mi>N</mi><mi>F</mi><mi>A</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>q</mi><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\delta_{DFA}(S, a) = \\bigcup_{q \\in S} \\delta_{NFA}(q, a)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0379em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal mtight\">A</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⋃</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0379em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">NF</span><span class=\"mord mathnormal mtight\">A</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span>\r\n(or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⋃</mo><mrow><mi>q</mi><mo>∈</mo><mi>S</mi></mrow></msub><mi>ε</mi><mtext>-closure</mtext><mo stretchy=\"false\">(</mo><msub><mi>δ</mi><mrow><mi>N</mi><mi>F</mi><mi>A</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>q</mi><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcup_{q \\in S} \\varepsilon\\text{-closure}(\\delta_{NFA}(q, a))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⋃</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mord text\"><span class=\"mord\">-closure</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0379em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">NF</span><span class=\"mord mathnormal mtight\">A</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">))</span></span></span></span> if the NFA has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>-transitions)</li>\n<li>A state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> in the DFA is accepting if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>∩</mo><msub><mi>F</mi><mrow><mi>N</mi><mi>F</mi><mi>A</mi></mrow></msub><mo mathvariant=\"normal\">≠</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">S \\cap F_{NFA} \\neq \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">NF</span><span class=\"mord mathnormal mtight\">A</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span></li>\n</ol>\n<p>The resulting DFA might have more states than the original NFA (potentially up to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> states, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is the number of states in the NFA), but it will recognize exactly the same language.</p>\n<p><strong>Formal Proof Sketch:</strong> The key insight is that a state in the DFA represents the set of all possible states the NFA could be in after reading a particular prefix of the input. By tracking all possible states simultaneously, the DFA can simulate the NFA’s non-deterministic behavior in a deterministic way.</p>\n<p>This equivalence leads to an important practical insight: NFAs often let us design simpler, more intuitive solutions, which we can then mechanically convert to DFAs for efficient implementation.</p>\n<h2 id=\"minimizing-dfas-the-beauty-of-efficiency\">Minimizing DFAs: The Beauty of Efficiency</h2>\n<p>Once we have a DFA, we can often make it even more elegant through minimization – reducing the number of states while preserving its behavior.</p>\n<p>Imagine you’re designing a subway map. If two stations connect to exactly the same set of other stations, you could potentially combine them into a single station without changing where passengers can travel.</p>\n<p><strong>Theorem (Myhill-Nerode):</strong> For any regular language <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>, there is a unique minimal DFA (up to isomorphism) that recognizes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>.</p>\n<p>The key insight: two states can be combined if they behave identically for all possible input sequences. The formal algorithm for DFA minimization:</p>\n<ol>\n<li>Start by dividing states into accepting and non-accepting groups</li>\n<li>Repeatedly refine these groups: two states stay in the same group only if, for each input symbol, they transition to states in the same group</li>\n<li>Continue until no further refinement is possible</li>\n<li>Each final group becomes a single state in the minimized DFA</li>\n</ol>\n<p><strong>Formal Algorithm (Hopcroft’s Algorithm):</strong></p>\n<ol>\n<li>Partition the states into two sets: accepting states and non-accepting states</li>\n<li>For each set in the partition, check if all states in the set transition to the same set for each input symbol</li>\n<li>If not, split the set into smaller sets based on their transitions</li>\n<li>Repeat until no more splits are possible</li>\n<li>Each set in the final partition becomes a single state in the minimized DFA</li>\n</ol>\n<p>This process gives us the smallest DFA that recognizes the same language – a model of mathematical elegance and practical efficiency.</p>\n<h2 id=\"real-world-applications-where-theory-meets-practice\">Real-World Applications: Where Theory Meets Practice</h2>\n<p>Finite automata aren’t just elegant theoretical concepts – they’re powerful practical tools used throughout computing:</p>\n<h4 id=\"1-lexical-analysis-in-compilers\">1. Lexical Analysis in Compilers</h4>\n<p>When you compile code, the first phase (lexical analysis) uses finite automata to break your code into tokens like “variable,” “keyword,” or “operator.” The scanner reads your source code character by character, using a DFA to recognize valid tokens.</p>\n<p><strong>Theoretical Connection:</strong> For each token type in the programming language (identifier, keyword, number, etc.), we define a regular expression describing its pattern. We then convert these regular expressions to NFAs, combine them into a single NFA, convert to a DFA, and minimize it for efficiency.</p>\n<h4 id=\"2-regular-expression-matching\">2. Regular Expression Matching</h4>\n<p>Every time you use search with patterns like <code>.*\\.jpg</code> to find image files, you’re using finite automata behind the scenes. Regular expressions are converted to NFAs, which are then converted to DFAs for efficient matching.</p>\n<p><strong>Theoretical Connection:</strong> The theory of regular expressions and finite automata are deeply connected – they represent exactly the same class of languages (regular languages). Any pattern describable by a regular expression can be recognized by a finite automaton, and vice versa.</p>\n<h4 id=\"3-protocol-implementation\">3. Protocol Implementation</h4>\n<p>Network protocols, from TCP/IP to Bluetooth, use finite state machines to track connection states and ensure reliable communication. States like “LISTENING,” “ESTABLISHED,” and “CLOSED” with transitions based on packets received or sent.</p>\n<p><strong>Theoretical Connection:</strong> The formal modeling of protocols as finite state machines allows for rigorous verification of their properties, such as ensuring that no deadlock states exist.</p>\n<h4 id=\"4-digital-circuit-design\">4. Digital Circuit Design</h4>\n<p>Hardware engineers use finite state machines to design sequential circuits. Each flip-flop represents a bit of the current state, with combinational logic implementing the transition function.</p>\n<p><strong>Theoretical Connection:</strong> The Moore and Mealy machine models in digital design are direct applications of finite automata theory, with the main difference being that they produce output signals on transitions or states.</p>\n<h4 id=\"5-natural-language-processing\">5. Natural Language Processing</h4>\n<p>In text processing, finite automata help with tasks like tokenization, stemming, and simple pattern matching – foundational steps in understanding human language.</p>\n<p><strong>Theoretical Connection:</strong> While full natural language processing requires more powerful computational models (context-free or even context-sensitive), finite automata are valuable for handling the lexical aspects of language processing.</p>\n<h4 id=\"6-game-development\">6. Game Development</h4>\n<p>Character behaviors in games are often modeled as finite state machines with states like “PATROLLING,” “ATTACKING,” or “FLEEING,” with transitions based on game events.</p>\n<p><strong>Theoretical Connection:</strong> The deterministic nature of DFAs ensures predictable behavior for game entities, while the ability to model complex state transitions allows for sophisticated AI behaviors.</p>\n<h4 id=\"7-user-interface-design\">7. User Interface Design</h4>\n<p>UI components often follow finite state machine models with states like “INACTIVE,” “FOCUSED,” “PRESSED,” etc., with transitions based on user interactions.</p>\n<p><strong>Theoretical Connection:</strong> The formal modeling of UI components as finite state machines helps ensure that all possible user interactions are handled appropriately, leading to more robust interfaces.</p>\n<h2 id=\"thinking-like-a-finite-automaton-interactive-exercise\">Thinking Like a Finite Automaton (Interactive Exercise)</h2>\n<p>Let’s put theory into practice with a thought experiment:</p>\n<p>Imagine you’re a DFA designed to recognize valid email addresses (simplified for this exercise). You have the following states:</p>\n<ul>\n<li>START: Initial state</li>\n<li>GOT_USERNAME: We’ve seen a valid username</li>\n<li>GOT_AT: We’ve seen ’@’ after the username</li>\n<li>GOT_DOMAIN: We’ve seen a valid domain name</li>\n<li>GOT_DOT: We’ve seen ’.’ after the domain</li>\n<li>GOT_TLD: We’ve seen a valid top-level domain (accepting state)</li>\n<li>ERROR: Invalid input (reject state)</li>\n</ul>\n<p>Try to trace through these inputs in your mind, tracking your state changes:</p>\n<ol>\n<li><code>alice@example.com</code></li>\n<li><code>bob@.com</code></li>\n<li><code>charlie@domain</code></li>\n<li><code>@domain.com</code></li>\n</ol>\n<p>For each character, ask yourself: “What state am I in, and where do I go after reading this character?”</p>\n<p><strong>Formal Exercise:</strong> For the email DFA described above, try to write out the formal transition function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> that captures all the valid transitions. Think about what characters are allowed in usernames, domains, and TLDs, and how to handle invalid inputs.</p>\n<p>This mental exercise helps develop a feel for how finite automata process input step by step.</p>\n<h2 id=\"challenging-problems-test-your-understanding\">Challenging Problems: Test Your Understanding</h2>\n<p>Now let’s test your understanding with some more challenging problems about finite automata:</p>\n<ol>\n<li>\n<p><strong>DFA Construction:</strong> Construct a DFA that accepts all binary strings that, when interpreted as a binary number, are divisible by 3. For example, the strings “0”, “11”, “110” should be accepted, while “1”, “10”, “100” should be rejected.</p>\n</li>\n<li>\n<p><strong>NFA to DFA Conversion:</strong> Convert the following NFA to an equivalent DFA using the subset construction algorithm:</p>\n<ul>\n<li>States: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{q_0, q_1, q_2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li>Alphabet: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0, 1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span></li>\n<li>Transitions:\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>1</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(q_0, 0) = \\{q_0, q_1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>0</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(q_0, 1) = \\{q_0\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\delta(q_1, 0) = \\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(q_1, 1) = \\{q_2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(q_2, 0) = \\{q_2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(q_2, 1) = \\{q_2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n</ul>\n</li>\n<li>Initial state: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>Accepting states: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{q_2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n</ul>\n</li>\n<li>\n<p><strong>Proof Challenge:</strong> Prove that the language <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msup><mi>a</mi><mi>n</mi></msup><msup><mi>b</mi><mi>n</mi></msup><mi mathvariant=\"normal\">∣</mi><mi>n</mi><mo>≥</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L = \\{a^n b^n | n \\geq 1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> (i.e., strings with an equal number of a’s followed by an equal number of b’s) is not regular. Hint: Use the Pumping Lemma for regular languages.</p>\n</li>\n<li>\n<p><strong>Minimization Exercise:</strong> Consider a DFA with states <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>4</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{q_0, q_1, q_2, q_3, q_4\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span>, alphabet <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0, 1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>, initial state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">q_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and accepting states <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>q</mi><mn>3</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{q_0, q_3\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span>. The transition function is:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_0, 0) = q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_0, 1) = q_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_1, 0) = q_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_1, 1) = q_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_2, 0) = q_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_2, 1) = q_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_3, 0) = q_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_3, 1) = q_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>4</mn></msub><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_4, 0) = q_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><msub><mi>q</mi><mn>4</mn></msub><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>q</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta(q_4, 1) = q_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<p>Apply the DFA minimization algorithm to find the minimal equivalent DFA.</p>\n</li>\n<li>\n<p><strong>Closure Properties:</strong> Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> be regular languages. Prove that the language <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi>y</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mo>∈</mo><msub><mi>L</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><msub><mi>L</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>y</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">L = \\{xy | x \\in L_1, y \\in L_2, |x| = |y|\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span><span class=\"mclose\">}</span></span></span></span> (strings formed by concatenating equal-length strings from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>) is not necessarily regular.</p>\n</li>\n</ol>\n<p>These problems will help deepen your understanding of finite automata theory and its applications. Try to solve them on your own before looking for solutions!</p>\n<h2 id=\"coming-next-regular-expressions---the-language-of-patterns\">Coming Next: Regular Expressions - The Language of Patterns</h2>\n<p>Now that you understand finite automata, we’re ready to explore Regular Expressions – a powerful pattern language that’s equivalent in power to finite automata but offers a more concise way to describe patterns.</p>\n<p>In our next article, we’ll explore how regular expressions work, their connection to finite automata, and how they’re used in everything from text editors to search engines to data validation.</p>\n<p>Until then, try to spot finite automata in the world around you – they’re in your toaster, your traffic lights, your keyboard, and countless other devices and systems!</p>",{headings:261,localImagePaths:346,remoteImagePaths:347,frontmatter:348,imagePaths:351},[262,265,268,271,274,277,280,283,286,289,292,295,298,301,304,307,310,313,316,319,322,325,328,331,334,337,340,343],{depth:34,slug:263,text:264},"introduction-the-beauty-of-simple-machines","Introduction: The Beauty of Simple Machines",{depth:34,slug:266,text:267},"formal-definition-the-mathematical-foundation","Formal Definition: The Mathematical Foundation",{depth:38,slug:269,text:270},"definition-1-deterministic-finite-automaton-dfa","Definition 1: Deterministic Finite Automaton (DFA)",{depth:38,slug:272,text:273},"definition-2-non-deterministic-finite-automaton-nfa","Definition 2: Non-deterministic Finite Automaton (NFA)",{depth:38,slug:275,text:276},"the-language-of-a-finite-automaton","The Language of a Finite Automaton",{depth:34,slug:278,text:279},"what-exactly-is-a-finite-automaton","What Exactly Is a Finite Automaton?",{depth:34,slug:281,text:282},"real-world-examples","Real-World Examples",{depth:38,slug:284,text:285},"the-coffee-vending-machine","The Coffee Vending Machine",{depth:38,slug:287,text:288},"the-elevator","The Elevator",{depth:38,slug:290,text:291},"the-password-checker","The Password Checker",{depth:34,slug:293,text:294},"deterministic-finite-automata-dfa-precision-and-predictability","Deterministic Finite Automata (DFA): Precision and Predictability",{depth:38,slug:296,text:297},"the-beauty-of-dfas","The Beauty of DFAs",{depth:34,slug:299,text:300},"non-deterministic-finite-automata-nfa-the-power-of-choice","Non-deterministic Finite Automata (NFA): The Power of Choice",{depth:38,slug:302,text:303},"the-intuition-of-non-determinism","The Intuition of Non-determinism",{depth:34,slug:305,text:306},"epsilon-transitions-the-art-of-silent-moves","Epsilon Transitions: The Art of Silent Moves",{depth:34,slug:308,text:309},"the-surprising-truth-nfa--dfa","The Surprising Truth: NFA = DFA",{depth:34,slug:311,text:312},"minimizing-dfas-the-beauty-of-efficiency","Minimizing DFAs: The Beauty of Efficiency",{depth:34,slug:314,text:315},"real-world-applications-where-theory-meets-practice","Real-World Applications: Where Theory Meets Practice",{depth:38,slug:317,text:318},"1-lexical-analysis-in-compilers","1. Lexical Analysis in Compilers",{depth:38,slug:320,text:321},"2-regular-expression-matching","2. Regular Expression Matching",{depth:38,slug:323,text:324},"3-protocol-implementation","3. Protocol Implementation",{depth:38,slug:326,text:327},"4-digital-circuit-design","4. Digital Circuit Design",{depth:38,slug:329,text:330},"5-natural-language-processing","5. Natural Language Processing",{depth:38,slug:332,text:333},"6-game-development","6. Game Development",{depth:38,slug:335,text:336},"7-user-interface-design","7. User Interface Design",{depth:34,slug:338,text:339},"thinking-like-a-finite-automaton-interactive-exercise","Thinking Like a Finite Automaton (Interactive Exercise)",{depth:34,slug:341,text:342},"challenging-problems-test-your-understanding","Challenging Problems: Test Your Understanding",{depth:34,slug:344,text:345},"coming-next-regular-expressions---the-language-of-patterns","Coming Next: Regular Expressions - The Language of Patterns",[],[],{title:249,date:349,description:252,author:16,thumbnail:253,series:23,seriesOrder:38,minutesRead:350},["Date","2025-03-23T00:00:00.000Z"],"19 min read",[],"finite-automata.md","algorithmic-analysis",{id:353,data:355,body:362,filePath:363,digest:364,rendered:365,legacyId:549},{title:356,author:357,draft:18,date:358,description:252,featured:359,thumbnail:360,series:361,seriesOrder:34},"Understanding Algorithm Analysis",{id:16,collection:17},["Date","2024-12-07T00:00:00.000Z"],true,"/thumbnails/algorithmic-analysis.webp",{id:200,collection:24},"## Introduction\r\n\r\nFor designing better algorithms, one must know how to analyze their efficiency. Even though you may not be able to predict the exact runtime of an algorithm, you can estimate its performance using algorithm analysis tools.\r\n\r\nWe will explore the mathematics behind algorithm analysis, common time complexities, and practical strategies for optimizing performance. After reading this post, you will be better equipped to evaluate and improve the efficiency of your algorithms, and will be able to predict the performance of an algorithm!\r\n\r\n## Table of Contents\r\n\r\n- [Why Analyze Algorithms?](#why-analyze-algorithms)\r\n- [Time Complexity: The Basics](#time-complexity-the-basics)\r\n  - [Time Complexity Notations](#time-complexity-notations)\r\n  - [Calculating Time Complexity](#calculating-time-complexity)\r\n- [Time Complexity: a step forward](#time-complexity-a-step-forward)\r\n  - [Counting Operations/Iterations Method](#counting-operationsiterations-method)\r\n  - [Recurrence Relations Method](#recurrence-relations-method)\r\n- [Time Complexity: Counting Operations/Iterations Method](#time-complexity-counting-operationsiterations-method)\r\n- [Building Up: Recursive Functions and Recurrence Relations](#building-up-recursive-functions-and-recurrence-relations)\r\n  - [What is a Recurrence Relation?](#what-is-a-recurrence-relation)\r\n- [Time Complexity: Solving Recurrence Relations](#time-complexity-solving-recurrence-relations)\r\n  - [Substitution Method](#substitution-method)\r\n  - [Recurrence Tree Method](#recurrence-tree-method)\r\n  - [Master Theorem](#master-theorem)\r\n  - [Additional: Master Theorem for reducing recurrences](#additional-master-theorem-for-reducing-recurrences)\r\n    - [A challenge for you ♨️](#a-challenge-for-you-️)\r\n- [Mathematics and Computer Science: Generating Functions](#mathematics-and-computer-science-generating-functions)\r\n- [A Pit Stop: Time Complexity of the Fibonacci Sequence](#a-pit-stop-time-complexity-of-the-fibonacci-sequence)\r\n  - [Iterative Fibonacci](#iterative-fibonacci)\r\n  - [Recursive Fibonacci: The Golden Ratio](#recursive-fibonacci-the-golden-ratio)\r\n- [Common Time Complexities](#common-time-complexities)\r\n- [Steps to Analyze Time Complexity](#steps-to-analyze-time-complexity)\r\n  - [Best, Average, and Worst Cases](#best-average-and-worst-cases)\r\n- [Space Complexity](#space-complexity)\r\n  - [Why Space Complexity Matters?](#why-space-complexity-matters)\r\n  - [Components of Space Complexity](#components-of-space-complexity)\r\n  - [Key Scenarios](#key-scenarios)\r\n  - [Steps to Analyze Space Complexity](#steps-to-analyze-space-complexity)\r\n- [Balancing Time and Space](#balancing-time-and-space)\r\n  - [Best Practices for Space Optimization](#best-practices-for-space-optimization)\r\n- [Practice Problems](#practice-problems)\r\n- [Looking Ahead](#looking-ahead)\r\n\r\n## Why Analyze Algorithms?\r\n\r\nAlgorithm analysis serves several critical purposes:\r\n\r\n- **Evaluate Efficiency:** Understand how an algorithm's performance scales with increasing input size.\r\n- **Optimize Resource Usage:** Balance time and memory requirements for practical implementations.\r\n- **Enhance Scalability:** Design algorithms capable of managing large datasets and computational demands.\r\n\r\nBy thoroughly analyzing an algorithm's behavior, you can identify inefficiencies and improve the overall performance of your code.\r\n\r\n## Time Complexity: The Basics\r\n\r\nTime complexity measures the relationship between an algorithm's runtime and the size of its input, typically denoted as Order of a function of $n$.\r\n\r\n#### Time Complexity Notations\r\n\r\nWe analyze time complexity using three primary notations:\r\n\r\n1. **Big O Notation ($O$):** Describes the upper bound of an algorithm's runtime.\r\n2. **Omega Notation ($\\Omega$):** Represents the lower bound of an algorithm's runtime.\r\n3. **Theta Notation ($\\Theta$):** Denotes the tight bound of an algorithm's runtime.\r\n\r\nThe Big O notation is the most commonly used, providing a worst-case performance guarantee. Analysis of an algorithm is generally done using the method of [Asymptotic Analysis](https://en.wikipedia.org/wiki/Asymptotic_analysis).\r\n\r\nAsymptotic analysis is a method of describing limiting behavior, focusing on the performance of algorithms as input sizes grow towards infinity. Asymptotic analysis is not a part I will cover in this post, but it is a crucial concept to understand when analyzing algorithms.\r\n\r\n#### Calculating Time Complexity\r\n\r\nTo determine the time complexity of an algorithm, we evaluate the number of basic operations executed as a function of the input size. We then express this relationship using Big O notation.\r\n\r\nMathematically, we write the time complexity of an algorithm as $O(f(n))$, where $f(n)$ represents the number of operations performed for an input of size $n$.\r\n\r\nThe time complexity of an algorithm can be linear, logarithmic, quadratic, exponential, or factorial, depending on the growth rate of the function $f(n)$.\r\n\r\nOrder of a function of $n$ is a mathematical concept that describes the behavior of a function as the input size $n$ approaches infinity. The order of a function is denoted using Big O notation.\r\n\r\nExamples of finding order of a function of $n$:\r\n\r\n- $f(n) = 5n + 3$ is $O(n)$.\r\n- $f(n) = 3n^2 + 2n + 1$ is $O(n^2)$.\r\n- $f(n) = 2^n + 3n$ is $O(2^n)$.\r\n- $f(n) = n! + 2n$ is $O(n!)$.\r\n- $f(n) = \\log n + 3$ is $O(\\log n)$.\r\n- $f(n) = 1$ is $O(1)$.\r\n- $f(n) = n^2 + n\\log n$ is $O(n^2)$.\r\n- $f(n) = 2n^3 + 3n^2 + 4n + 5$ is $O(n^3)$.\r\n\r\nWhen finding the order of a function of $n$, we ignore constants and lower-order terms. This simplification helps us focus on the dominant factor that determines the algorithm's performance. Thus we are left with the most significant term that influences the algorithm's runtime.\r\n\r\nThere are several methods to analyze time complexity, including:\r\n\r\n- **Counting Operations:** Enumerate the number of basic operations executed.\r\n- **Recurrence Relations:** Formulate recursive equations to model the algorithm's behavior.\r\n- **Amortized Analysis:** Analyze the average time taken per operation over a sequence of operations.\r\n\r\n## Time Complexity: a step forward\r\n\r\nIn this section, we will look at the methods of time complexity analysis. We will discuss the counting operations/iterations method and the recurrence relations method. These methods are essential for understanding the performance of algorithms and predicting their behavior as the input size grows.\r\n\r\n#### Counting Operations/Iterations Method\r\n\r\nThe simplest approach to analyzing time complexity involves counting the number of operations or iterations executed by an algorithm. We express this count as a function of the input size $n$. This method is particularly useful for iterative algorithms with a fixed number of operations per iteration.\r\n\r\nConsider the following example:\r\n\r\n```python\r\ndef sum_of_n(n):\r\n    total = 0\r\n    for i in range(1, n + 1):\r\n        total += i\r\n    return total\r\n```\r\n\r\nIn this code snippet, the `sum_of_n` function calculates the sum of the first $n$ natural numbers. The loop iterates $n$ times, performing a constant number of operations in each iteration. Therefore, the time complexity of this algorithm is $O(n)$.\r\n\r\n#### Recurrence Relations Method\r\n\r\nRecurrence relations are equations that describe the runtime of recursive algorithms. By formulating a recurrence relation, we can model the algorithm's behavior and derive its time complexity.\r\n\r\nConsider the following example:\r\n\r\n```python\r\ndef fibonacci(n):\r\n    if n <= 1:\r\n        return n\r\n    return fibonacci(n - 1) + fibonacci(n - 2)\r\n```\r\n\r\nThe `fibonacci` function calculates the $n^{\\text{th}}$ Fibonacci number using a recursive approach. To analyze its time complexity, we can formulate a recurrence relation:\r\n\r\n$$\r\nT(n) = T(n - 1) + T(n - 2) + O(1)\r\n$$\r\n\r\nHere, $T(n)$ represents the runtime of the `fibonacci` function for an input of size $n$. The recurrence relation captures the recursive nature of the algorithm, allowing us to derive its time complexity. You will learn more about solving recurrence relations to get the time complexity in the upcoming sections.\r\n\r\n## Time Complexity: Counting Operations/Iterations Method\r\n\r\nLet's get back to the basics of analyzing time complexity using the counting operations/iterations method. This method is intuitive and straightforward, making it a popular choice for evaluating algorithm performance.\r\n\r\nMost of the times, you would not encounter recursive algorithms in real-world applications, and the counting operations method is sufficient for analyzing time complexity. That does not mean you should ignore the other methods; they are essential for understanding the mathematical foundations of algorithm analysis.\r\n\r\nBy systematically counting the number of operations or iterations performed as a function of the input size\r\n$𝑛$, we can determine the algorithm's time complexity.\r\n\r\n**Steps to follow**:\r\n\r\n1. Identify the parts of the code contributing to the computational cost (loops, conditionals, etc.).\r\n2. Count the number of operations executed within each block as a function of $n$.\r\n3. Sum these contributions to derive the overall time complexity.\r\n\r\nThis method is particularly suited for **iterative algorithms**, where the number of iterations is clearly defined.\r\n\r\nI'll teach you this part only with examples. Let's begin!\r\n\r\n###### Example 1: Linear Iteration\r\n\r\n```python\r\ndef sum_of_n(n):\r\n    total = 0\r\n    for i in range(1, n + 1):\r\n        total += i\r\n    return total\r\n```\r\n\r\n**Analysis**: The loop iterates $n$ times, performing a constant number of operations (increment and addition) during each iteration. Thus, the time complexity is:\r\n\r\n$$\r\nO(n)\r\n$$\r\n\r\n###### Example 2: Nested Loops (Quadratic Time)\r\n\r\n```python\r\ndef print_pairs(arr):\r\n    n = len(arr)\r\n    for i in range(n):\r\n        for j in range(n):\r\n            print(arr[i], arr[j])\r\n```\r\n\r\n**Analysis**: The outer loop runs $n$ times, and for each iteration of the outer loop, the inner loop also runs $n$ times. This results in $n \\times n = n^2$ iterations in total. Therefore, the time complexity is:\r\n\r\n$$\r\nO(n^2)\r\n$$\r\n\r\n###### Example 3: Logarithmic Time (Binary Search)\r\n\r\n```python\r\ndef binary_search(arr, target):\r\n    low, high = 0, len(arr) - 1\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if arr[mid] == target:\r\n            return mid\r\n        elif arr[mid] < target:\r\n            low = mid + 1\r\n        else:\r\n            high = mid - 1\r\n    return -1\r\n```\r\n\r\n**Analysis**: In each iteration of the `while` loop, the search space is halved. Starting with `n` elements, the number of iterations required is approximately $\\log_2 n$. Therefore, the time complexity is:\r\n\r\n$$\r\nO(\\log n)\r\n$$\r\n\r\n###### Example 4: Constant Time (Accessing an Array Element)\r\n\r\n```python\r\ndef get_element(arr, index):\r\n    return arr[index]\r\n```\r\n\r\n**Analysis**: Accessing an element in an array by index is a constant-time operation, as it does not depend on the size of the array. Therefore, the time complexity is:\r\n\r\n$$\r\nO(1)\r\n$$\r\n\r\n#### Let's get tricky!\r\n\r\nNow, let's analyze the time complexity of some tricky algorithms, where the counting operations method might not be straightforward.\r\n\r\n###### Example 5: Division by 2\r\n\r\n```python\r\ndef halve_until_one(n):\r\n    while n > 1:\r\n        print(n)\r\n        n //= 2\r\n```\r\n\r\n- The value of $n$ is halved in each iteration of the `while` loop.\r\n- This process continues until $n$ becomes $1$, resulting in approximately $\\log_2 n$ iterations.\r\n- Time Complexity:\r\n\r\n  $$\r\n  O(\\log n)\r\n  $$\r\n\r\n###### Example 6: Multiplication by 3\r\n\r\n```python\r\ndef triple_until_n(n):\r\n    i = 1\r\n    while i < n:\r\n        print(i)\r\n        i *= 3\r\n```\r\n\r\n- The value of $i$ is multiplied by 3 in each iteration of the `while` loop.\r\n- This process continues until $i \\geq n$, resulting in approximately $\\log_3 n$ iterations.\r\n- Time Complexity:\r\n\r\n  $$\r\n  O(\\log_3 n) = O(\\frac{\\log n}{\\log 3}) \\approx O(\\log n)\r\n  $$\r\n\r\n###### Example 7: Exponential Growth\r\n\r\n```python\r\ndef exponential_growth(n):\r\n    i = 1\r\n    while i < n:\r\n        print(i)\r\n        i *= i\r\n```\r\n\r\n- The value of $i$ is squared in each iteration of the `while` loop.\r\n- This process continues until $i \\geq n$, resulting in approximately $\\log_2 \\log_2 n$ iterations.\r\n- Time Complexity:\r\n\r\n  $$\r\n  O(\\log_2 \\log_2 n)\r\n  $$\r\n\r\n###### Example 8: Decrement by a Constant Value\r\n\r\n```python\r\ndef countdown_by_5(n):\r\n    while n > 0:\r\n        print(n)\r\n        n -= 5\r\n```\r\n\r\n- The value of $n$ is decremented by 5 in each iteration of the `while` loop.\r\n- This process continues until $n$ becomes $0$, resulting in approximately $n/5$ iterations.\r\n- Time Complexity:\r\n\r\n  $$\r\n  O(n)\r\n  $$\r\n\r\n###### Example 9: Triangular Nested Loops\r\n\r\n```python\r\ndef triangular_pattern(n):\r\n    for i in range(1, n + 1):\r\n        for j in range(1, i + 1):\r\n            print(f\"({i}, {j})\")\r\n```\r\n\r\n- The outer loop runs $n$ times, and for each iteration of the outer loop, the inner loop runs $i$ times, where $i$ is the current value of the outer loop variable.\r\n- Total iterations:\r\n\r\n  $$\r\n  1 + 2 + 3 + \\ldots + n = \\sum_{i=1}^{n} i = \\frac{n(n + 1)}{2}\r\n  $$\r\n\r\n- Time Complexity:\r\n\r\n  $$\r\n  O(n^2)\r\n  $$\r\n\r\n###### Example 10: Logarithmic Inner Loop\r\n\r\n```python\r\ndef logarithmic_inner_loop(n):\r\n    for i in range(1, n + 1):\r\n        j = 1\r\n        while j <= i:\r\n            print(f\"({i}, {j})\")\r\n            j *= 2\r\n```\r\n\r\n- The outer loop runs $n$ times.\r\n- For each iteration of the outer loop, the inner loop runs $\\log_2 i$ times, since $j$ is doubled in each iteration.\r\n- Total iterations:\r\n\r\n  $$\r\n  \\log_2 1 + \\log_2 2 + \\log_2 3 + \\ldots + \\log_2 n = \\sum_{i=1}^{n} \\log_2 i\r\n  $$\r\n\r\n- Using the approximation for the harmonic series, this evaluates to:\r\n\r\n  $$\r\n  O(n \\log n)\r\n  $$\r\n\r\n###### Example 11: Nested Loops with Dependent Ranges\r\n\r\n```python\r\ndef dependent_nested_loops(n):\r\n    for i in range(1, n + 1):\r\n        for j in range(1, n - i + 1):\r\n            print(f\"({i}, {j})\")\r\n```\r\n\r\n- The outer loop runs $n$ times.\r\n- For each iteration of the outer loop, the inner loop runs $n - i$ times.\r\n- Total iterations:\r\n\r\n  $$\r\n  (n - 1) + (n - 2) + (n - 3) + \\ldots + 1 = \\sum_{i=1}^{n-1} i = \\frac{(n - 1)n}{2}\r\n  $$\r\n\r\n- Time Complexity:\r\n\r\n  $$\r\n  O(n^2)\r\n  $$\r\n\r\n###### Example 12: Nested Loops with Different Ranges\r\n\r\n```python\r\ndef different_ranges(n, m):\r\n    for i in range(1, n + 1):\r\n        for j in range(1, m + 1):\r\n            print(f\"({i}, {j})\")\r\n```\r\n\r\n- The outer loop runs $n$ times.\r\n- For each iteration of the outer loop, the inner loop runs $m$ times.\r\n- Total iterations:\r\n\r\n  $$\r\n  n \\times m\r\n  $$\r\n\r\n- Time Complexity:\r\n\r\n  $$\r\n  O(n \\times m)\r\n  $$\r\n\r\n###### Example 13: Combination of Multiplicative and Dependent Loops\r\n\r\n```python\r\ndef mixed_loops(n):\r\n    for i in range(1, n + 1):\r\n        j = i\r\n        while j < n:\r\n            print(f\"({i}, {j})\")\r\n            j *= 2\r\n```\r\n\r\n- The outer loop runs $n$ times.\r\n- For each iteration of the outer loop, the inner loop runs approximately $\\log_2 (n/i)$ times.\r\n- Total iterations:\r\n\r\n  $$\r\n  \\sum_{i=1}^{n} \\log_2 \\left(\\frac{n}{i}\\right)\r\n  $$\r\n\r\n- This sum approximates to:\r\n\r\n  $$\r\n  O(n \\log n)\r\n  $$\r\n\r\n#### Key Takeaways\r\n\r\nCounting operations/iterations is a practical method for analyzing the time complexity of algorithms, especially for iterative algorithms with a fixed number of operations per iteration. With this method, you can evaluate the performance of algorithms intuitively. Thus, you can identify bottlenecks in your code, and improve your code.\r\n\r\n## Building Up: Recursive Functions and Recurrence Relations\r\n\r\nRecursive algorithms solve problems by breaking them into smaller subproblems, typically calling themselves with smaller inputs. This structure often leads to a recurrence relation—an equation that expresses the runtime $T(n)$ of the algorithm in terms of smaller inputs.\r\n\r\n#### What is a Recurrence Relation?\r\n\r\nAs you've already read in the previous section, a recurrence relation is an equation that describes the runtime of a recursive algorithm. It consists of:\r\n\r\n- **Recursive calls**: How many smaller problems are being solved.\r\n- **Work done per call**: The operations performed outside the recursive calls.\r\n\r\nFor example, consider the recursive function:\r\n\r\n```python\r\ndef factorial(n):\r\n    if n == 0:\r\n        return 1\r\n    return n * factorial(n - 1)\r\n```\r\n\r\nRecurrence relation for the `factorial` function:\r\n\r\n$$\r\nT(n) = T(n - 1) + O(1)\r\n$$\r\n\r\n- $T(n)$ represents the runtime of the `factorial` function for an input of size $n$.\r\n- $T(n - 1)$ is the recursive call to solve the subproblem of size $n - 1$.\r\n- $O(1)$ is the time taken for the multiplication operation.\r\n\r\nIn the next few sections, we will explore methods to solve recurrence relations and derive the time complexity of recursive algorithms. This will make it easier for you to analyze the performance of recursive functions and understand the mathematical foundations of algorithm analysis.\r\n\r\n## Time Complexity: Solving Recurrence Relations\r\n\r\nThere are a variety of methods to solve recurrence relations, including:\r\n\r\n- Substitution Method\r\n- Recurrence Tree Method\r\n- Master Theorem\r\n- Generating Functions (this is a more advanced technique)\r\n\r\n#### Substitution Method\r\n\r\nThe substitution method involves iterative substitution of the recurrence relation into itself and proving the guessed solution by induction.\r\n\r\nSteps:\r\n\r\n1. **Expand the recurrence**: Substitute the recurrence relation repeatedly until a pattern emerges.\r\n2. **Formulate a general form**: Use the observed pattern to propose a solution.\r\n3. **Prove by induction**: Validate the solution using mathematical induction.\r\n4. **Refine the solution if needed.**\r\n\r\nFor example, take the following recurrence relation:\r\n\r\n$$\r\nT(n) = 2T\\left(\\frac{n}{2}\\right) + n; \\quad T(1) = 1\r\n$$\r\n\r\n1. **Expand the recurrence**:\r\n\r\n   $$\r\n   \\begin{align*}\r\n   T(n) & = 2T\\left(\\frac{n}{2}\\right) + n \\\\\r\n   & = 2\\left(2T\\left(\\frac{n}{4}\\right) + \\frac{n}{2}\\right) + n \\\\\r\n   & = 4T\\left(\\frac{n}{4}\\right) + 2n \\\\\r\n   & = 4\\left(2T\\left(\\frac{n}{8}\\right) + \\frac{n}{4}\\right) + 2n \\\\\r\n   & = 8T\\left(\\frac{n}{8}\\right) + 3n\r\n   \\end{align*}\r\n   $$\r\n\r\n   Continue this process until a pattern emerges.\r\n\r\n2. **Formulate a general form**:\r\n\r\n   From the above expansion, we observe that the pattern is:\r\n\r\n   $$\r\n   T(n) = 2^kT\\left(\\frac{n}{2^k}\\right) + kn\r\n   $$\r\n\r\n3. **Prove by induction**:\r\n\r\n   If we assume $n = 2^k$, $k = \\log_2 n$. Substituting this into the general form, we get:\r\n\r\n   $$\r\n   T(n) = nT(1) + n\\log_2 n = n + n\\log_2 n = O(n\\log n)\r\n   $$\r\n\r\n   Therefore, the time complexity of the algorithm is of the order $O(n\\log n)$.\r\n\r\n#### Recurrence Tree Method\r\n\r\nThe recurrence tree method visualizes the recursive calls of an algorithm as a tree structure. By analyzing the tree's depth and branching factor, we can determine the algorithm's time complexity.\r\n\r\nSteps:\r\n\r\n- **Expand the recurrence into a tree**: Each node represents a recursive call, and its children represent the subproblems.\r\n- **Compute the work at each level**: Add up the work for all nodes at the same level.\r\n- **Sum over all levels**: Combine the work across all levels to compute the total.\r\n\r\nFor example, consider the recurrence relation:\r\n\r\n$$\r\nT(n) = 2T\\left(\\frac{n}{2}\\right) + n\r\n$$\r\n\r\n1. **Expand the recurrence into a tree**:\r\n\r\n   The tree for $T(n)$ will have a root node representing the original problem of size $n$, with two children representing subproblems of size $\\frac{n}{2}$ each. This process continues until we reach subproblems of size $1$. The tree will have $\\log n$ levels.\r\n\r\n   - Root: $n$\r\n   - Level 1: $\\frac{n}{2}$, $\\frac{n}{2}$, total work $= 2 \\times \\frac{n}{2} = n$\r\n   - Level 2: $\\frac{n}{4}$, $\\frac{n}{4}$, $\\frac{n}{4}$, $\\frac{n}{4}$, total work $= 4 \\times \\frac{n}{4} = n$\r\n   - ... and so on, each level has $n$ work.\r\n\r\n2. **Count the number of levels**:\r\n\r\n   The tree has $\\log n + 1$ levels, as the problem size is halved at each level.\r\n\r\n3. **Compute the total work**:\r\n\r\n   The total work is the sum of the work at each level, which is $n$ at each level.\r\n\r\n   $$\r\n   n + n + n + \\ldots (\\log_2 n + 1 \\space times) = O(n \\log n)\r\n   $$\r\n\r\n   Therefore, the total work is of the order $O(n \\log n)$, and thus the time complexity of the algorithm is $O(n \\log n)$. This matches the result obtained using the substitution method.\r\n\r\n#### Master Theorem\r\n\r\nMaster Theorem is a direct and powerful tool for solving divide-and-conquer recurrences. It applies when the recurrence is of the form:\r\n\r\n$$\r\nT(n) = aT\\left(\\frac{n}{b}\\right) + f(n)\r\n$$\r\n\r\nWhere:\r\n\r\n- $a \\geq 1$ is the number of recursive calls.\r\n- $b > 1$ is the factor by which the input size is divided.\r\n- $f(n)$ is an asymptotically positive function.\r\n\r\n**Case Analysis**:\r\n\r\n1. Case 1: If $f(n) < n^{\\log_b a}$, then $T(n) = O(n^{\\log_b a})$.\r\n\r\n   This is when the work done at the root dominates the work done at the leaves. The solution is the same as the work done at the root.\r\n\r\n2. Case 2: If $f(n) = n^{\\log_b a}$, then $T(n) = O(n^{\\log_b a} \\log n)$.\r\n\r\n   This is when the work done at the root and leaves are balanced. The solution involves an additional logarithmic factor.\r\n\r\n3. Case 3: If $f(n) > n^{\\log_b a}$, then $T(n) = O(f(n))$.\r\n\r\n   This is when the work done at the leaves dominates the work done at the root. The solution is the same as the work done at the leaves.\r\n\r\nA few examples of applying the Master Theorem:\r\n\r\n1. $T(n) = 3T\\left(\\frac{n}{2}\\right) + n^2$:\r\n\r\n   - Here, $a = 3$, $b = 2$, and $f(n) = n^2$. We have $n^{\\log_b a} = n^{\\log_2 3} \\approx n^{1.58}$.\r\n   - $f(n) = O(n^2) > n^{\\log_2 3}$.\r\n   - Therefore, by the Master Theorem's Case 3, $T(n) = O(n^2)$.\r\n\r\n   This is not surprising, as the quadratic term $n^2$ dominates the runtime.\r\n\r\n2. $T(n) = 2T\\left(\\frac{n}{2}\\right) + n$:\r\n\r\n   - Here, $a = 2$, $b = 2$, and $f(n) = n$. We have $n^{\\log_b a} = n^{\\log_2 2} = n$.\r\n   - $f(n) = n = n^{\\log_2 2}$.\r\n   - Therefore, by the Master Theorem's Case 2, $T(n) = O(n \\log n)$.\r\n\r\n   The logarithmic term $\\log n$ accounts for the additional work in each recursive call.\r\n\r\nThe Master Theorem is a simple and easy to learn method to find out the time complexity of divide-and-conquer algorithms. It provides a direct solution without the need for complex expansions or derivations.\r\n\r\n#### Additional: Master Theorem for reducing recurrences\r\n\r\nWhen the recurrence relation is of the form:\r\n\r\n$$\r\nT(n) = aT(n - b) + f(n)\r\n$$\r\n\r\nWhere:\r\n\r\n- $a > 0$ is the number of recursive calls.\r\n- $b > 0$ is the reduction factor.\r\n- $f(n)$ is an asymptotically positive function.\r\n\r\nThis corresponds to a divide-and-conquer algorithm that reduces the problem size by a constant amount (e.g., $n - 1$, $n - k$, etc.) in each recursive call.\r\n\r\n**Case Analysis**:\r\n\r\n1. Case 1: If $a < 1$, then $T(n) = O(f(n))$.\r\n\r\n   This is when the recursion reduces rapidly, and the non-recursive work dominates.\r\n\r\n2. Case 2: If $a = 1$, then $T(n) = O(nf(n))$.\r\n\r\n   This is when each level contributes evenly, and the total cost depends linearly on the number of levels.\r\n\r\n3. Case 3: If $a > 1$, then $T(n) = O(f(n) \\cdot a^{n/b})$.\r\n\r\n   This is when the recursion grows exponentially, dominating the overall cost.\r\n\r\nFor example, consider the recurrence relation:\r\n\r\n$$\r\nT(n) = 2T(n - 1) + n\r\n$$\r\n\r\nHere, $a = 2$, $b = 1$, and $f(n) = n$. We have $a > 1$, so we apply Case 3:\r\n\r\n- $T(n) = O(n \\cdot 2^{n/1}) = O(n \\cdot 2^n)$.\r\n- Therefore, the time complexity of the algorithm is $O(n \\cdot 2^n)$.\r\n\r\nAnother example is the recurrence relation:\r\n\r\n$$\r\nT(n) = T(n - 1) + \\log n\r\n$$\r\n\r\nHere, $a = 1$, $b = 1$, and $f(n) = \\log n$. We have $a = 1$, so we apply Case 2:\r\n\r\n- $T(n) = O(n \\log n)$.\r\n- Therefore, the time complexity of the algorithm is $O(n \\log n)$.\r\n\r\n###### A challenge for you ♨️\r\n\r\nTry solving the recurrence relation above, i.e., $T(n) = T(n - 1) + \\log n$, using the substitution method or the recurrence tree method.\r\n\r\nYou will encounter a weird equation,\r\n\r\n$$\r\nT(n) = 1 + \\log(n!)\r\n$$\r\n\r\nCan you simplify this equation to get the time complexity?\r\n\r\n## Mathematics and Computer Science: Generating Functions\r\n\r\n> This part is purely mathematical, and can be termed as extra knowledge. If you are not interested in Generating Functions, you can skip this section.\r\n\r\nGenerating functions are purely mathematical tools that help in solving recurrences. Generating functions transform a recurrence into an algebraic expression that can be solved systematically. Generating functions are a powerful tool for solving complex recurrences and deriving closed-form solutions. They are particularly useful for linear recurrences with constant coefficients.\r\n\r\nThe steps to solve a recurrence relation using generating functions are:\r\n\r\n1. **Define the generating function**: Represent the sequence $T(n)$ as a formal power series:\r\n\r\n   $$\r\n   G(x) = \\sum_{n=0}^{\\infty} T(n)x^n\r\n   $$\r\n\r\n2. **Translate the recurrence**: Express the recurrence relation in terms of the generating function.\r\n3. **Solve for $G(x)$**: Manipulate the generating function to derive a closed-form expression.\r\n4. **Extract the solution**: Extract the coefficients of the generating function to obtain the solution for $T(n)$, often using partial fractions or other techniques. The $n^{\\text{th}}$ term of the solution represents the time complexity of the algorithm.\r\n\r\nFor example, consider the recurrence relation:\r\n\r\n$$\r\nT(n) = T(n - 1) + n; \\quad T(0) = 0; \\quad n \\geq 1\r\n$$\r\n\r\n1. **Define the generating function**:\r\n\r\n   $$\r\n   G(x) = \\sum_{n=0}^{\\infty} T(n)x^n\r\n   $$\r\n\r\n2. **Translate the recurrence**:\r\n\r\n   From the recurrence relation, we have:\r\n\r\n   $$\r\n   T(n) = T(n - 1) + n\r\n   $$\r\n\r\n   Multiplying both sides by $x^n$ and summing over all $n \\geq 1$, we get:\r\n\r\n   $$\r\n   \\sum_{n=1}^{\\infty} T(n)x^n = \\sum_{n=1}^{\\infty} T(n - 1)x^n + \\sum_{n=1}^{\\infty} nx^n\r\n   $$\r\n\r\n   The first sum on the right hand side is the generating function shifted by one:\r\n\r\n   $$\r\n   \\sum_{n=1}^{\\infty} T(n - 1)x^n = x\\sum_{n=0}^{\\infty} T(n)x^n = xG(x)\r\n   $$\r\n\r\n   The second sum can be computed as:\r\n\r\n   $$\r\n   \\sum_{n=1}^{\\infty} nx^n = x\\sum_{n=1}^{\\infty} nx^{n-1} = x\\frac{d}{dx}\\left(\\sum_{n=0}^{\\infty} x^n\\right) = x\\frac{d}{dx}\\left(\\frac{1}{1 - x}\\right) = \\frac{x}{(1 - x)^2}\r\n   $$\r\n\r\n   The left hand side is the generating function without the $n = 0$ term:\r\n\r\n   $$\r\n   \\sum_{n=1}^{\\infty} T(n)x^n = G(x) - T(0)\r\n   $$\r\n\r\n   Substituting these results back into the equation, we get:\r\n\r\n   $$\r\n   G(x) - T(0) = xG(x) + \\frac{x}{(1 - x)^2}\r\n   $$\r\n\r\n   Since $T(0) = 0$, the equation simplifies to:\r\n\r\n   $$\r\n   G(x) = \\frac{x}{(1 - x)^2} + xG(x)\r\n   $$\r\n\r\n3. **Solve for $G(x)$**:\r\n\r\n   Rearranging the equation to solve for $G(x)$, we get:\r\n\r\n   $$\r\n   G(x) - xG(x) = \\frac{x}{(1 - x)^2}\r\n   $$\r\n\r\n   $$\r\n   G(x)(1 - x) = \\frac{x}{(1 - x)^2}\r\n   $$\r\n\r\n   $$\r\n   G(x) = \\frac{x}{(1 - x)^3}\r\n   $$\r\n\r\n4. **Extract the solution**:\r\n\r\n   Now, to find $T(n)$, we need to extract the coefficients of $x^n$ from the generating function. We have:\r\n\r\n   $$\r\n   G(x) = \\frac{x}{(1 - x)^3}\r\n   $$\r\n\r\n   We can do this by expanding the generating function using the binomial theorem:\r\n\r\n   $$\r\n   \\begin{align*}\r\n   G(x) & = \\frac{x}{(1 - x)^3} = x(1 - x)^{-3} \\\\\r\n   & = x\\sum_{k=0}^{\\infty} \\binom{k + 2}{2}x^k \\\\\r\n   & = \\sum_{k=0}^{\\infty} \\binom{k + 2}{2}x^{k + 1} \\\\\r\n   \\end{align*}\r\n   $$\r\n\r\n   Therefore, the coefficient of $x^n$ (for $n \\geq 1$) is:\r\n\r\n   $$\r\n   T(n) = \\binom{n - 1 + 2}{2} = \\binom{n + 1}{2}\r\n   $$\r\n\r\n5. **Final expression for $T(n)$**:\r\n\r\n   Recall that $\\binom{n + 1}{2} = \\frac{n(n + 1)}{2}$. Therefore, the solution to the recurrence relation is:\r\n\r\n   $$\r\n   T(n) = \\frac{n(n + 1)}{2}\r\n   $$\r\n\r\n   This holds true for $T(0) = 0$.\r\n\r\n6. **Time complexity**:\r\n\r\n   The time complexity of the algorithm is $O(n^2)$. This is because the solution $T(n) = \\frac{n(n + 1)}{2}$ is of the order $O(n^2)$.\r\n\r\nYou can solve more complex recurrences using generating functions by following similar steps. Generating functions provide a systematic approach to solving recurrences and deriving closed-form solutions.\r\n\r\nWhile it may seem complex, it is a powerful tool for analyzing the time complexity of algorithms. The generating function method is particularly useful for linear recurrences with constant coefficients.\r\n\r\nIt is a valuable technique to have in your algorithm analysis toolkit. However, it is not essential for understanding the basics of algorithm analysis. If you are interested in exploring more about generating functions, there are several resources available online that delve deeper into this topic.\r\n\r\n## A Pit Stop: Time Complexity of the Fibonacci Sequence\r\n\r\n> This part is purely mathematical, and can be termed as extra knowledge. If you are not interested in the mathematical analysis of the Fibonacci sequence, you can skip this section.\r\n\r\nThe Fibonacci sequence is a classic example used to illustrate recursion and dynamic programming. Let's analyze the time complexity of two common implementations of the Fibonacci sequence: using recursion and dynamic programming.\r\n\r\n#### Iterative Fibonacci\r\n\r\nThe iterative approach to calculating the Fibonacci sequence involves storing the previous two numbers and updating them to compute the next number. This method is efficient and avoids the overhead of recursive calls.\r\n\r\n```python\r\ndef fibonacci_iterative(n):\r\n    if n <= 1:\r\n        return n\r\n    a, b = 0, 1\r\n    for _ in range(2, n + 1):\r\n        a, b = b, a + b\r\n    return b\r\n```\r\n\r\n**Time Complexity**: The iterative Fibonacci algorithm has a time complexity of $O(n)$, as it performs a constant number of operations for each number in the sequence.\r\n\r\n#### Recursive Fibonacci: The Golden Ratio\r\n\r\nThe recursive approach to calculating the Fibonacci sequence involves calling the function recursively for the previous two numbers. While elegant, this method is inefficient due to repeated calculations.\r\n\r\n```python\r\ndef fibonacci_recursive(n):\r\n    if n <= 1:\r\n        return n\r\n    return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\r\n```\r\n\r\nThe recurrence relation for the recursive Fibonacci algorithm is:\r\n\r\n$$\r\nT(n) = T(n - 1) + T(n - 2) + O(1); \\quad T(0) = T(1) = 1, \\quad n \\geq 2\r\n$$\r\n\r\nWe can take $O(1) = 1$ for simplicity, as it does not affect the asymptotic growth rate of $T(n)$. Thus the recurrence relation becomes:\r\n\r\n$$\r\nT(n) = T(n - 1) + T(n - 2) + 1; \\quad T(0) = T(1) = 1, \\quad n \\geq 2\r\n$$\r\n\r\n###### Step 1: Define the generating function\r\n\r\nLet:\r\n\r\n$$\r\nG(x) = \\sum_{n=0}^{\\infty} T(n)x^n\r\n$$\r\n\r\nbe the generating function for $T(n)$.\r\n\r\n###### Step 2: Translate the recurrence\r\n\r\nFrom the recurrence relation, we have:\r\n\r\n$$\r\nT(n) = T(n - 1) + T(n - 2) + 1\r\n$$\r\n\r\nMultiplying both sides by $x^n$ and summing over all $n \\geq 2$, we get:\r\n\r\n$$\r\n\\sum_{n=2}^{\\infty} T(n)x^n = \\sum_{n=2}^{\\infty} T(n - 1)x^n + \\sum_{n=2}^{\\infty} T(n - 2)x^n + \\sum_{n=2}^{\\infty} x^n\r\n$$\r\n\r\nReindexing terms:\r\n\r\n- The first sum on the right hand side gets simplified to:\r\n\r\n  $$\r\n  \\sum_{n=2}^{\\infty} T(n - 1)x^n = x\\sum_{n=2}^{\\infty} T(n - 1)x^{n-1} = x(G(x) - T(0))\r\n  $$\r\n\r\n- The second sum on the right hand side gets simplified to:\r\n\r\n  $$\r\n  \\sum_{n=2}^{\\infty} T(n - 2)x^n = x^2\\sum_{m=0}^{\\infty} T(m)x^m = x^2G(x)\r\n  $$\r\n\r\n- For the constant term, we have:\r\n\r\n  $$\r\n  \\sum_{n=2}^{\\infty} x^n = x^2\\sum_{m=0}^{\\infty} x^m = \\frac{x^2}{1 - x}\r\n  $$\r\n\r\n- The left hand side is the generating function without the $n = 0, 1$ terms:\r\n\r\n  $$\r\n  \\sum_{n=2}^{\\infty} T(n)x^n = G(x) - T(0) - T(1)x\r\n  $$\r\n\r\nSubstituting these results back into the original equation, we get:\r\n\r\n$$\r\nG(x) - T(0) - T(1)x = x(G(x) - T(0)) + x^2G(x) + \\frac{x^2}{1 - x}\r\n$$\r\n\r\n###### Step 3: Rearranging the equation to solve for $G(x)$\r\n\r\nRearranging the equation to solve for $G(x)$, we get:\r\n\r\n$$\r\nG(x) - xG(x) - x^2G(x) = T(0) - xT(0) + xT(1) + \\frac{x^2}{1 - x}\r\n$$\r\n\r\nSubstituting $T(0) = T(1) = 1$:\r\n\r\n$$\r\nG(x) - xG(x) - x^2G(x) = 1 - x + x + \\frac{x^2}{1 - x}\r\n$$\r\n\r\n$$\r\nG(x)(1 - x - x^2) = 1 + \\frac{x^2}{1 - x}\r\n$$\r\n\r\n###### Step 4: Solving for $G(x)$\r\n\r\nOn factorizing the characteristic polynomial $1 - x - x^2 = 0$, we get its roots as:\r\n\r\n$$\r\nx = \\frac{1 \\pm \\sqrt{5}}{2}\r\n$$\r\n\r\nThus the generating function $G(x)$ can be written in terms of these roots. The coefficients of $x^n$ in G(x) are asympotically dominated by the root:\r\n\r\n$$\r\nx = \\frac{1 + \\sqrt{5}}{2}\r\n$$\r\n\r\nThis is nothing but the **Golden Ratio** $\\phi \\approx 1.618$.\r\n\r\nTherefore, the time complexity of the recursive Fibonacci algorithm is:\r\n\r\n$$\r\nT(n) \\in O(\\phi^n), \\space \\text{where} \\space \\phi = \\frac{1 + \\sqrt{5}}{2} \\approx 1.618\r\n$$\r\n\r\n## Common Time Complexities\r\n\r\nThere are several common time complexities that you will encounter when analyzing algorithms. Below is a list of some common time complexities. These will help you guess the time complexity of an algorithm without going through the detailed analysis every time.\r\n\r\n1. **$O(1)$ - Constant Time**\r\n\r\n   - The runtime is independent of input size.\r\n   - Example: Accessing an element in an array by index.\r\n\r\n2. **$O(log n)$ - Logarithmic Time**\r\n\r\n   - Runtime grows logarithmically as input size increases.\r\n   - Example: Binary search in a sorted array.\r\n\r\n3. **$O(n)$ - Linear Time**\r\n\r\n   - Runtime increases proportionally with input size.\r\n   - Example: Iterating through an array.\r\n\r\n4. **$O(n \\log n)$ - Quasilinear Time**\r\n\r\n   - Typical of efficient sorting algorithms like merge sort and quicksort.\r\n\r\n5. **$O(n^2)$ - Quadratic Time**\r\n\r\n   - Runtime scales quadratically, often due to nested loops.\r\n   - Example: Bubble sort or insertion sort.\r\n\r\n6. **$O(2^n) or O(n!)$ - Exponential/Factorial Time**\r\n   - Extremely inefficient for large inputs, often associated with brute-force solutions.\r\n\r\n## Steps to Analyze Time Complexity\r\n\r\nYou have learned various methods to analyze the time complexity of algorithms. But as a short trick, you can vaguely guess the time complexity of an algorithm by following these steps:\r\n\r\n1. **Identify Dominant Operations:** Focus on the operations that dominate the runtime.\r\n2. **Consider the Worst-Case Scenario:** Provide a comprehensive performance guarantee.\r\n3. **Simplify Expressions:** Ignore constants and lower-order terms for clarity.\r\n\r\n#### Best, Average, and Worst Cases\r\n\r\nYou have already encountered the concept of best, average, and worst cases in algorithm analysis. Here is a brief summary of these cases:\r\n\r\n- **Best Case:** The minimal runtime under optimal conditions. Often not representative of real-world performance. It is denoted by $\\Omega$.\r\n- **Average Case:** The expected runtime for typical input distributions. Requires statistical analysis. It is denoted by $\\Theta$.\r\n- **Worst Case:** The upper limit of runtime across all possible inputs. Provides a performance guarantee. It is denoted by $O$.\r\n\r\n## Space Complexity\r\n\r\nSpace complexity measures the total memory required by an algorithm to execute, including memory for input data, auxiliary data structures, and intermediate computations. It helps us understand the memory efficiency of algorithms, mainly when working with large data sets or in memory-constrained environments.\r\n\r\n#### Why Space Complexity Matters?\r\n\r\nWhen dealing with embedded systems, mobile devices, or cloud computing, memory can be a critical resource. Understanding the space complexity of algorithms is essential for optimizing memory usage and ensuring efficient performance. Optimizing space complexity can lead to better performance, reduced costs, and improved user experience.\r\n\r\n#### Components of Space Complexity\r\n\r\n1. **Fixed Space:**\r\n   - Memory for constants, variables, and program code.\r\n   - Independent of input size.\r\n   - Example: Storing a fixed size array or a few variables.\r\n2. **Dynamic Space:**\r\n   - Memory for data structures, recursion, and temporary storage.\r\n   - Includes memory that depends on the input size.\r\n   - Can arise from:\r\n     - Data Structures: Stacks, Queues, Hash Tables, etc.\r\n     - Recursive Calls: Space allocated on the call stack.\r\n     - Temporary Storage: Arrays or matrices for intermediate results in algorithms like sorting or dynamic programming.\r\n\r\n#### Key Scenarios\r\n\r\n- Recursive algorithms often consume extra memory for the call stack.\r\n- Data-intensive algorithms may require substantial temporary storage.\r\n\r\n#### Steps to Analyze Space Complexity\r\n\r\n1. **Assess Input Size:**\r\n   - Consider how the algorithm scales with increasing input.\r\n   - Example: An algorithm processing a list of size $n$ might allocate an additional array of size $n$.\r\n2. **Assess Additional Data Structures:**\r\n   - Evaluate the size and scope of auxiliary memory requirements.\r\n   - Example: Merge Sort requires $O(n)$ space for a temporary array.\r\n3. **Consider Recursion Depth:**\r\n   - Each recursive call consumes stack space proportional to the depth of recursion.\r\n   - A depth-first search (DFS) algorithm on a tree with depth $d$ uses $O(d)$ stack space.\r\n4. **Include Temporary Storage:**\r\n   - Consider memory for intermediate results or temporary arrays used during computations.\r\n   - Example: Dynamic programming algorithms store intermediate results in a table, consuming $O(n^2)$ space for a 2D table.\r\n\r\n#### Examples of Space Complexity\r\n\r\n###### 1. Iterative Algorithm (Low Space Usage)\r\n\r\n```python\r\ndef sum_array(arr):\r\n    total = 0\r\n    for num in arr:\r\n        total += num\r\n    return total\r\n```\r\n\r\n- The algorithm uses $O(1)$ space for the `total` variable, regardless of the size of the input array.\r\n- Space Complexity: $O(1)$\r\n\r\n###### 2. Recursive Algorithm (High Space Usage)\r\n\r\n```python\r\ndef factorial(n):\r\n    if n == 0:\r\n        return 1\r\n    return n * factorial(n - 1)\r\n```\r\n\r\n- The recursive algorithm consumes space on the call stack for each recursive call.\r\n- Each recursive call requires memory for the function call, local variables, and return address.\r\n- It adds a new frame to the call stack for each recursive call, requiring $O(n)$ space for $n$ recursive calls.\r\n- Space Complexity: $O(n)$\r\n\r\n###### 3. Dynamic Programming (Intermediate Space Usage)\r\n\r\n```python\r\ndef fibonacci(n):\r\n    dp = [0] * (n + 1)\r\n    dp[1] = 1\r\n    for i in range(2, n + 1):\r\n        dp[i] = dp[i - 1] + dp[i - 2]\r\n    return dp[n]\r\n```\r\n\r\n- The dynamic programming algorithm uses an array `dp` of size $n + 1$ to store intermediate results.\r\n- The space required for the array is $O(n)$.\r\n- Space Complexity: $O(n)$\r\n\r\n###### 4. Optimized space in Dynamic Programming\r\n\r\n```python\r\ndef fibonacci_optimized(n):\r\n    prev, curr = 0, 1\r\n    for _ in range(2, n + 1):\r\n        prev, curr = curr, prev + curr\r\n    return curr\r\n```\r\n\r\n- The algorithm uses only $O(1)$ space by storing only the last two results instead of the entire array.\r\n- Space Complexity: $O(1)$\r\n\r\n###### 5. Recursive with Memoization (Reduced Space Usage)\r\n\r\n```python\r\ndef fibonacci_memo(n, memo={}):\r\n    if n in memo:\r\n        return memo[n]\r\n    if n <= 1:\r\n        return n\r\n    memo[n] = fibonacci_memo(n - 1, memo) + fibonacci_memo(n - 2, memo)\r\n    return memo[n]\r\n```\r\n\r\n- The recursive algorithm with memoization reduces redundant calculations by storing intermediate results in a dictionary `memo`.\r\n- The space required for the dictionary is proportional to the number of unique function calls.\r\n- The space complexity is reduced from $O(n)$ to $O(k)$, where $k$ is the number of unique function calls.\r\n- Space Complexity: $O(k)$\r\n\r\n## Balancing Time and Space\r\n\r\nOptimizing algorithms often involves trade-offs between time and space. You can either prioritize space efficiency or time efficiency based on the requirements of your application. Here are some considerations to help you balance time and space complexity:\r\n\r\n- **Memory-Constrained Scenarios**: Choose iterative methods or space-optimized dynamic programming.\r\n- **Time-Critical Scenarios**: Opt for algorithms like dynamic programming, which may use more memory to store intermediate results.\r\n\r\nExamples include:\r\n\r\n1. **Dynamic Programming vs Recursive Methods vs Iterative Methods**\r\n\r\n   - Dynamic Programming: Reduces runtime by storing intermediate results but increases memory usage.\r\n   - Recursive Methods: Uses less memory compared to dynamic programming techniques but have higher time complexity due to repeated calculations.\r\n   - Iterative Methods: Uses less memory compared to recursion but may take longer to execute.\r\n\r\n2. **In-Place Sorting vs. Non-In-Place Sorting**\r\n\r\n   - In-place sorting algorithms like Quick Sort uses $O(1)$ additional space but may have higher runtime in the worst case.\r\n   - Non-in-place algorithms like Merge Sort use $O(n)$ additional memory for temporary arrays but have more predictable runtimes.\r\n\r\n#### Best Practices for Space Optimization\r\n\r\n- **Use Iterative Solutions**: Avoid recursion when possible to save stack space.\r\n- **Optimize Data Structures**: Use lightweight data structures like arrays instead of hash tables if memory is a constraint.\r\n- **Reuse Memory**: Free up temporary variables or use in-place algorithms where applicable.\r\n- **Trade Time for Space**: Accept slightly slower runtimes for reduced memory usage when memory is the bottleneck.\r\n\r\n## Practice Problems\r\n\r\n1. Compare the time complexity of the following two implementations of finding the factorial of a number:\r\n\r\n   Iterative Approach:\r\n\r\n   ```python\r\n   def factorial_iterative(n):\r\n      result = 1\r\n      for i in range(1, n + 1):\r\n         result *= i\r\n      return result\r\n   ```\r\n\r\n   Recursive Approach:\r\n\r\n   ```python\r\n   def factorial_recursive(n):\r\n      if n == 0:\r\n         return 1\r\n      return n * factorial_recursive(n - 1)\r\n   ```\r\n\r\n2. Consider the following recursive function for computing the sum of an array:\r\n\r\n   ```python\r\n   def recursive_sum(arr):\r\n      if len(arr) == 1:\r\n         return arr[0]\r\n      mid = len(arr) // 2\r\n      return recursive_sum(arr[:mid]) + recursive_sum(arr[mid:])\r\n   ```\r\n\r\n   What is the time complexity of this algorithm? Express it in terms of $n$, the length of the array.\r\n\r\n3. Consider the following divide and conquer algorithm for calculating the power of a number:\r\n\r\n   ```python\r\n   def power(x, n):\r\n      if n == 0:\r\n         return 1\r\n      half = power(x, n // 2)\r\n      if n % 2 == 0:\r\n         return half * half\r\n      return half * half * x\r\n   ```\r\n\r\n   Write the recurrence relation for the time complexity of this function and solve it.\r\n\r\n4. For binary search, the recurrence relation can be expressed as:\r\n\r\n   $$\r\n   T(n) = T\\left(\\frac{n}{2}\\right) + O(1)\r\n   $$\r\n\r\n   Solve this recurrence relation using the Master Theorem or by expanding it to find the time complexity of binary search.\r\n\r\n5. Consider the following recursive algorithm that divides the problem into three subproblems of size $n/3$, performing constant work:\r\n\r\n   ```python\r\n   def divide_conquer(n):\r\n      if n <= 1:\r\n         return 1\r\n      result = divide_conquer(n // 3) + divide_conquer(n // 3) + divide_conquer(n // 3)\r\n      return result\r\n   ```\r\n\r\n   Write the recurrence relation for this function and solve it to find the time complexity.\r\n\r\n6. Consider the following recursive function, which splits the input into four subproblems and performs $O(n)$ work at each level:\r\n\r\n   ```python\r\n   def advanced_algorithm(n):\r\n      if n <= 1:\r\n         return 1\r\n      left = advanced_algorithm(n // 2)\r\n      right = advanced_algorithm(n // 2)\r\n      return left + right + n\r\n   ```\r\n\r\n   Write the recurrence relation for this algorithm and solve it to find the time complexity.\r\n\r\n7. Consider the following recursive function, which calls itself multiple times in a nested manner:\r\n\r\n   ```python\r\n   def nested_algorithm(n):\r\n      if n <= 1:\r\n         return 1\r\n      return nested_algorithm(n - 1) + nested_algorithm(n - 2) + nested_algorithm(n - 3)\r\n   ```\r\n\r\n   Write the recurrence relation for this function and solve it.\r\n\r\n8. Consider the following recursive function:\r\n\r\n   ```python\r\n   def recursive_sum(arr):\r\n      if not arr:\r\n         return 0\r\n      return arr[0] + recursive_sum(arr[1:])\r\n   ```\r\n\r\n   What is the space complexity of this function?\r\n\r\n9. Consider the following function for calculating factorial recursively:\r\n\r\n   ```python\r\n   def factorial(n):\r\n      if n == 0:\r\n         return 1\r\n      return n * factorial(n - 1)\r\n   ```\r\n\r\n   What is the space complexity in terms of stack space used by the recursion? How can you reduce this to an iterative solution?\r\n\r\n10. Consider the following recursive function that divides the problem into three subproblems, each of size $n/2$ and performs $O(n^2)$ work at each level:\r\n\r\n    ```python\r\n    def complex_algorithm(n):\r\n       if n <= 1:\r\n          return 1\r\n\r\n    # Perform O(n^2) work at each level\r\n\r\n    left = complex_algorithm(n // 2)\r\n    right = complex_algorithm(n // 2)\r\n    return left + right + n\\*\\*2\r\n    ```\r\n\r\n    - Write the recurrence relation for the time complexity of the algorithm.\r\n    - Solve the recurrence relation using the recurrence tree method or the Master Theorem (if applicable).\r\n    - Determine the time complexity of this function in terms of $n$.\r\n\r\n## Looking Ahead\r\n\r\nThis was a very, very big post, but even then, it laid the foundation for your understanding of time and space complexity.\r\n\r\nIn the next post, we will explore foundational data structures like arrays and strings, talking about their properties, operations, and practical applications.","src/content/blog/algorithmic-analysis.md","49a24be488a63c07",{html:366,metadata:367},"<h2 id=\"introduction\">Introduction</h2>\n<p>For designing better algorithms, one must know how to analyze their efficiency. Even though you may not be able to predict the exact runtime of an algorithm, you can estimate its performance using algorithm analysis tools.</p>\n<p>We will explore the mathematics behind algorithm analysis, common time complexities, and practical strategies for optimizing performance. After reading this post, you will be better equipped to evaluate and improve the efficiency of your algorithms, and will be able to predict the performance of an algorithm!</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#why-analyze-algorithms\">Why Analyze Algorithms?</a></li>\n<li><a href=\"#time-complexity-the-basics\">Time Complexity: The Basics</a>\n<ul>\n<li><a href=\"#time-complexity-notations\">Time Complexity Notations</a></li>\n<li><a href=\"#calculating-time-complexity\">Calculating Time Complexity</a></li>\n</ul>\n</li>\n<li><a href=\"#time-complexity-a-step-forward\">Time Complexity: a step forward</a>\n<ul>\n<li><a href=\"#counting-operationsiterations-method\">Counting Operations/Iterations Method</a></li>\n<li><a href=\"#recurrence-relations-method\">Recurrence Relations Method</a></li>\n</ul>\n</li>\n<li><a href=\"#time-complexity-counting-operationsiterations-method\">Time Complexity: Counting Operations/Iterations Method</a></li>\n<li><a href=\"#building-up-recursive-functions-and-recurrence-relations\">Building Up: Recursive Functions and Recurrence Relations</a>\n<ul>\n<li><a href=\"#what-is-a-recurrence-relation\">What is a Recurrence Relation?</a></li>\n</ul>\n</li>\n<li><a href=\"#time-complexity-solving-recurrence-relations\">Time Complexity: Solving Recurrence Relations</a>\n<ul>\n<li><a href=\"#substitution-method\">Substitution Method</a></li>\n<li><a href=\"#recurrence-tree-method\">Recurrence Tree Method</a></li>\n<li><a href=\"#master-theorem\">Master Theorem</a></li>\n<li><a href=\"#additional-master-theorem-for-reducing-recurrences\">Additional: Master Theorem for reducing recurrences</a>\n<ul>\n<li><a href=\"#a-challenge-for-you-%EF%B8%8F\">A challenge for you ♨️</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#mathematics-and-computer-science-generating-functions\">Mathematics and Computer Science: Generating Functions</a></li>\n<li><a href=\"#a-pit-stop-time-complexity-of-the-fibonacci-sequence\">A Pit Stop: Time Complexity of the Fibonacci Sequence</a>\n<ul>\n<li><a href=\"#iterative-fibonacci\">Iterative Fibonacci</a></li>\n<li><a href=\"#recursive-fibonacci-the-golden-ratio\">Recursive Fibonacci: The Golden Ratio</a></li>\n</ul>\n</li>\n<li><a href=\"#common-time-complexities\">Common Time Complexities</a></li>\n<li><a href=\"#steps-to-analyze-time-complexity\">Steps to Analyze Time Complexity</a>\n<ul>\n<li><a href=\"#best-average-and-worst-cases\">Best, Average, and Worst Cases</a></li>\n</ul>\n</li>\n<li><a href=\"#space-complexity\">Space Complexity</a>\n<ul>\n<li><a href=\"#why-space-complexity-matters\">Why Space Complexity Matters?</a></li>\n<li><a href=\"#components-of-space-complexity\">Components of Space Complexity</a></li>\n<li><a href=\"#key-scenarios\">Key Scenarios</a></li>\n<li><a href=\"#steps-to-analyze-space-complexity\">Steps to Analyze Space Complexity</a></li>\n</ul>\n</li>\n<li><a href=\"#balancing-time-and-space\">Balancing Time and Space</a>\n<ul>\n<li><a href=\"#best-practices-for-space-optimization\">Best Practices for Space Optimization</a></li>\n</ul>\n</li>\n<li><a href=\"#practice-problems\">Practice Problems</a></li>\n<li><a href=\"#looking-ahead\">Looking Ahead</a></li>\n</ul>\n<h2 id=\"why-analyze-algorithms\">Why Analyze Algorithms?</h2>\n<p>Algorithm analysis serves several critical purposes:</p>\n<ul>\n<li><strong>Evaluate Efficiency:</strong> Understand how an algorithm’s performance scales with increasing input size.</li>\n<li><strong>Optimize Resource Usage:</strong> Balance time and memory requirements for practical implementations.</li>\n<li><strong>Enhance Scalability:</strong> Design algorithms capable of managing large datasets and computational demands.</li>\n</ul>\n<p>By thoroughly analyzing an algorithm’s behavior, you can identify inefficiencies and improve the overall performance of your code.</p>\n<h2 id=\"time-complexity-the-basics\">Time Complexity: The Basics</h2>\n<p>Time complexity measures the relationship between an algorithm’s runtime and the size of its input, typically denoted as Order of a function of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</p>\n<h4 id=\"time-complexity-notations\">Time Complexity Notations</h4>\n<p>We analyze time complexity using three primary notations:</p>\n<ol>\n<li><strong>Big O Notation (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span></span></span></span>):</strong> Describes the upper bound of an algorithm’s runtime.</li>\n<li><strong>Omega Notation (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Ω</span></span></span></span>):</strong> Represents the lower bound of an algorithm’s runtime.</li>\n<li><strong>Theta Notation (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi></mrow><annotation encoding=\"application/x-tex\">\\Theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Θ</span></span></span></span>):</strong> Denotes the tight bound of an algorithm’s runtime.</li>\n</ol>\n<p>The Big O notation is the most commonly used, providing a worst-case performance guarantee. Analysis of an algorithm is generally done using the method of <a href=\"https://en.wikipedia.org/wiki/Asymptotic_analysis\">Asymptotic Analysis</a>.</p>\n<p>Asymptotic analysis is a method of describing limiting behavior, focusing on the performance of algorithms as input sizes grow towards infinity. Asymptotic analysis is not a part I will cover in this post, but it is a crucial concept to understand when analyzing algorithms.</p>\n<h4 id=\"calculating-time-complexity\">Calculating Time Complexity</h4>\n<p>To determine the time complexity of an algorithm, we evaluate the number of basic operations executed as a function of the input size. We then express this relationship using Big O notation.</p>\n<p>Mathematically, we write the time complexity of an algorithm as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> represents the number of operations performed for an input of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</p>\n<p>The time complexity of an algorithm can be linear, logarithmic, quadratic, exponential, or factorial, depending on the growth rate of the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>Order of a function of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is a mathematical concept that describes the behavior of a function as the input size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> approaches infinity. The order of a function is denoted using Big O notation.</p>\n<p>Examples of finding order of a function of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>5</mn><mi>n</mi><mo>+</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">f(n) = 5n + 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">5</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(n) = 3n^2 + 2n + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup><mo>+</mo><mn>3</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">f(n) = 2^n + 3n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7477em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo>+</mo><mn>2</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">f(n) = n! + 2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n!)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!)</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>+</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">f(n) = \\log n + 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(n) = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">f(n) = n^2 + n\\log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><msup><mi>n</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mi>n</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">f(n) = 2n^3 + 3n^2 + 4n + 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</li>\n</ul>\n<p>When finding the order of a function of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, we ignore constants and lower-order terms. This simplification helps us focus on the dominant factor that determines the algorithm’s performance. Thus we are left with the most significant term that influences the algorithm’s runtime.</p>\n<p>There are several methods to analyze time complexity, including:</p>\n<ul>\n<li><strong>Counting Operations:</strong> Enumerate the number of basic operations executed.</li>\n<li><strong>Recurrence Relations:</strong> Formulate recursive equations to model the algorithm’s behavior.</li>\n<li><strong>Amortized Analysis:</strong> Analyze the average time taken per operation over a sequence of operations.</li>\n</ul>\n<h2 id=\"time-complexity-a-step-forward\">Time Complexity: a step forward</h2>\n<p>In this section, we will look at the methods of time complexity analysis. We will discuss the counting operations/iterations method and the recurrence relations method. These methods are essential for understanding the performance of algorithms and predicting their behavior as the input size grows.</p>\n<h4 id=\"counting-operationsiterations-method\">Counting Operations/Iterations Method</h4>\n<p>The simplest approach to analyzing time complexity involves counting the number of operations or iterations executed by an algorithm. We express this count as a function of the input size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>. This method is particularly useful for iterative algorithms with a fixed number of operations per iteration.</p>\n<p>Consider the following example:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> sum_of_n</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    total </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> n </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        total </span><span style=\"color:#89DDFF\">+=</span><span style=\"color:#A9B1D6\"> i</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> total</span></span></code></pre>\n<p>In this code snippet, the <code>sum_of_n</code> function calculates the sum of the first <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> natural numbers. The loop iterates <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> times, performing a constant number of operations in each iteration. Therefore, the time complexity of this algorithm is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<h4 id=\"recurrence-relations-method\">Recurrence Relations Method</h4>\n<p>Recurrence relations are equations that describe the runtime of recursive algorithms. By formulating a recurrence relation, we can model the algorithm’s behavior and derive its time complexity.</p>\n<p>Consider the following example:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> fibonacci</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#A9B1D6\"> n</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#7AA2F7\"> fibonacci</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#7AA2F7\"> fibonacci</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<p>The <code>fibonacci</code> function calculates the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mtext>th</mtext></msup></mrow><annotation encoding=\"application/x-tex\">n^{\\text{th}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">th</span></span></span></span></span></span></span></span></span></span></span></span></span> Fibonacci number using a recursive approach. To analyze its time complexity, we can formulate a recurrence relation:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = T(n - 1) + T(n - 2) + O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span>\n<p>Here, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> represents the runtime of the <code>fibonacci</code> function for an input of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>. The recurrence relation captures the recursive nature of the algorithm, allowing us to derive its time complexity. You will learn more about solving recurrence relations to get the time complexity in the upcoming sections.</p>\n<h2 id=\"time-complexity-counting-operationsiterations-method\">Time Complexity: Counting Operations/Iterations Method</h2>\n<p>Let’s get back to the basics of analyzing time complexity using the counting operations/iterations method. This method is intuitive and straightforward, making it a popular choice for evaluating algorithm performance.</p>\n<p>Most of the times, you would not encounter recursive algorithms in real-world applications, and the counting operations method is sufficient for analyzing time complexity. That does not mean you should ignore the other methods; they are essential for understanding the mathematical foundations of algorithm analysis.</p>\n<p>By systematically counting the number of operations or iterations performed as a function of the input size\r\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>𝑛</mi></mrow><annotation encoding=\"application/x-tex\">𝑛</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, we can determine the algorithm’s time complexity.</p>\n<p><strong>Steps to follow</strong>:</p>\n<ol>\n<li>Identify the parts of the code contributing to the computational cost (loops, conditionals, etc.).</li>\n<li>Count the number of operations executed within each block as a function of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</li>\n<li>Sum these contributions to derive the overall time complexity.</li>\n</ol>\n<p>This method is particularly suited for <strong>iterative algorithms</strong>, where the number of iterations is clearly defined.</p>\n<p>I’ll teach you this part only with examples. Let’s begin!</p>\n<h6 id=\"example-1-linear-iteration\">Example 1: Linear Iteration</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> sum_of_n</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    total </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> n </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        total </span><span style=\"color:#89DDFF\">+=</span><span style=\"color:#A9B1D6\"> i</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> total</span></span></code></pre>\n<p><strong>Analysis</strong>: The loop iterates <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> times, performing a constant number of operations (increment and addition) during each iteration. Thus, the time complexity is:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n<h6 id=\"example-2-nested-loops-quadratic-time\">Example 2: Nested Loops (Quadratic Time)</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> print_pairs</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">arr</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    n </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#0DB9D7\"> len</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">arr</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        for</span><span style=\"color:#A9B1D6\"> j </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#0DB9D7\">            print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">arr</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#C0CAF5\">i</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> arr</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#C0CAF5\">j</span><span style=\"color:#9ABDF5\">])</span></span></code></pre>\n<p><strong>Analysis</strong>: The outer loop runs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> times, and for each iteration of the outer loop, the inner loop also runs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> times. This results in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n \\times n = n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> iterations in total. Therefore, the time complexity is:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>\n<h6 id=\"example-3-logarithmic-time-binary-search\">Example 3: Logarithmic Time (Binary Search)</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> binary_search</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">arr</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> target</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    low</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> high </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#0DB9D7\"> len</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">arr</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> -</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    while</span><span style=\"color:#A9B1D6\"> low </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#A9B1D6\"> high</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        mid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#A9B1D6\">low </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#A9B1D6\"> high</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#89DDFF\"> //</span><span style=\"color:#FF9E64\"> 2</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#A9B1D6\"> arr</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">mid</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#BB9AF7\"> ==</span><span style=\"color:#A9B1D6\"> target</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            return</span><span style=\"color:#A9B1D6\"> mid</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        elif</span><span style=\"color:#A9B1D6\"> arr</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">mid</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#BB9AF7\"> &#x3C;</span><span style=\"color:#A9B1D6\"> target</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">            low </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> mid </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        else</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">            high </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> mid </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#89DDFF\"> -</span><span style=\"color:#FF9E64\">1</span></span></code></pre>\n<p><strong>Analysis</strong>: In each iteration of the <code>while</code> loop, the search space is halved. Starting with <code>n</code> elements, the number of iterations required is approximately <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\log_2 n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>. Therefore, the time complexity is:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n<h6 id=\"example-4-constant-time-accessing-an-array-element\">Example 4: Constant Time (Accessing an Array Element)</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> get_element</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">arr</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> index</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> arr</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">index</span><span style=\"color:#9ABDF5\">]</span></span></code></pre>\n<p><strong>Analysis</strong>: Accessing an element in an array by index is a constant-time operation, as it does not depend on the size of the array. Therefore, the time complexity is:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span>\n<h4 id=\"lets-get-tricky\">Let’s get tricky!</h4>\n<p>Now, let’s analyze the time complexity of some tricky algorithms, where the counting operations method might not be straightforward.</p>\n<h6 id=\"example-5-division-by-2\">Example 5: Division by 2</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> halve_until_one</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    while</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#0DB9D7\">        print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        n </span><span style=\"color:#89DDFF\">//=</span><span style=\"color:#FF9E64\"> 2</span></span></code></pre>\n<ul>\n<li>\n<p>The value of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is halved in each iteration of the <code>while</code> loop.</p>\n</li>\n<li>\n<p>This process continues until <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> becomes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, resulting in approximately <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\log_2 n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> iterations.</p>\n</li>\n<li>\n<p>Time Complexity:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n</li>\n</ul>\n<h6 id=\"example-6-multiplication-by-3\">Example 6: Multiplication by 3</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> triple_until_n</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    while</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#A9B1D6\"> n</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#0DB9D7\">        print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">i</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        i </span><span style=\"color:#89DDFF\">*=</span><span style=\"color:#FF9E64\"> 3</span></span></code></pre>\n<ul>\n<li>\n<p>The value of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is multiplied by 3 in each iteration of the <code>while</code> loop.</p>\n</li>\n<li>\n<p>This process continues until <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>≥</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">i \\geq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7955em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, resulting in approximately <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>3</mn></msub><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\log_3 n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> iterations.</p>\n</li>\n<li>\n<p>Time Complexity:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>3</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mfrac><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><mrow><mi>log</mi><mo>⁡</mo><mn>3</mn></mrow></mfrac><mo stretchy=\"false\">)</mo><mo>≈</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log_3 n) = O(\\frac{\\log n}{\\log 3}) \\approx O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2519em;vertical-align:-0.8804em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n</li>\n</ul>\n<h6 id=\"example-7-exponential-growth\">Example 7: Exponential Growth</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> exponential_growth</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    while</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#A9B1D6\"> n</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#0DB9D7\">        print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">i</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        i </span><span style=\"color:#89DDFF\">*=</span><span style=\"color:#A9B1D6\"> i</span></span></code></pre>\n<ul>\n<li>\n<p>The value of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is squared in each iteration of the <code>while</code> loop.</p>\n</li>\n<li>\n<p>This process continues until <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>≥</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">i \\geq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7955em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, resulting in approximately <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\log_2 \\log_2 n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> iterations.</p>\n</li>\n<li>\n<p>Time Complexity:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log_2 \\log_2 n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n</li>\n</ul>\n<h6 id=\"example-8-decrement-by-a-constant-value\">Example 8: Decrement by a Constant Value</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> countdown_by_5</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    while</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#0DB9D7\">        print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        n </span><span style=\"color:#89DDFF\">-=</span><span style=\"color:#FF9E64\"> 5</span></span></code></pre>\n<ul>\n<li>\n<p>The value of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is decremented by 5 in each iteration of the <code>while</code> loop.</p>\n</li>\n<li>\n<p>This process continues until <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> becomes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, resulting in approximately <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">n/5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/5</span></span></span></span> iterations.</p>\n</li>\n<li>\n<p>Time Complexity:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n</li>\n</ul>\n<h6 id=\"example-9-triangular-nested-loops\">Example 9: Triangular Nested Loops</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> triangular_pattern</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> n </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        for</span><span style=\"color:#A9B1D6\"> j </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#0DB9D7\">            print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">f</span><span style=\"color:#9ECE6A\">\"(</span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#C0CAF5\">i</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">, </span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#C0CAF5\">j</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">)\"</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<ul>\n<li>\n<p>The outer loop runs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> times, and for each iteration of the outer loop, the inner loop runs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> times, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is the current value of the outer loop variable.</p>\n</li>\n<li>\n<p>Total iterations:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mo>…</mo><mo>+</mo><mi>n</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>i</mi><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">1 + 2 + 3 + \\ldots + n = \\sum_{i=1}^{n} i = \\frac{n(n + 1)}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9291em;vertical-align:-1.2777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n</li>\n<li>\n<p>Time Complexity:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>\n</li>\n</ul>\n<h6 id=\"example-10-logarithmic-inner-loop\">Example 10: Logarithmic Inner Loop</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> logarithmic_inner_loop</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> n </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        j </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        while</span><span style=\"color:#A9B1D6\"> j </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#A9B1D6\"> i</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#0DB9D7\">            print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">f</span><span style=\"color:#9ECE6A\">\"(</span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#C0CAF5\">i</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">, </span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#C0CAF5\">j</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">)\"</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">            j </span><span style=\"color:#89DDFF\">*=</span><span style=\"color:#FF9E64\"> 2</span></span></code></pre>\n<ul>\n<li>\n<p>The outer loop runs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> times.</p>\n</li>\n<li>\n<p>For each iteration of the outer loop, the inner loop runs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">\\log_2 i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> times, since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> is doubled in each iteration.</p>\n</li>\n<li>\n<p>Total iterations:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mn>1</mn><mo>+</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mn>2</mn><mo>+</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mn>3</mn><mo>+</mo><mo>…</mo><mo>+</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">\\log_2 1 + \\log_2 2 + \\log_2 3 + \\ldots + \\log_2 n = \\sum_{i=1}^{n} \\log_2 i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9291em;vertical-align:-1.2777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span></span>\n</li>\n<li>\n<p>Using the approximation for the harmonic series, this evaluates to:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n</li>\n</ul>\n<h6 id=\"example-11-nested-loops-with-dependent-ranges\">Example 11: Nested Loops with Dependent Ranges</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> dependent_nested_loops</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> n </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        for</span><span style=\"color:#A9B1D6\"> j </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#C0CAF5\"> i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#0DB9D7\">            print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">f</span><span style=\"color:#9ECE6A\">\"(</span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#C0CAF5\">i</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">, </span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#C0CAF5\">j</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">)\"</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<ul>\n<li>\n<p>The outer loop runs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> times.</p>\n</li>\n<li>\n<p>For each iteration of the outer loop, the inner loop runs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">n - i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> times.</p>\n</li>\n<li>\n<p>Total iterations:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo>…</mo><mo>+</mo><mn>1</mn><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><mi>i</mi><mo>=</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>n</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">(n - 1) + (n - 2) + (n - 3) + \\ldots + 1 = \\sum_{i=1}^{n-1} i = \\frac{(n - 1)n}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0788em;vertical-align:-1.2777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n</li>\n<li>\n<p>Time Complexity:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>\n</li>\n</ul>\n<h6 id=\"example-12-nested-loops-with-different-ranges\">Example 12: Nested Loops with Different Ranges</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> different_ranges</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> m</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> n </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        for</span><span style=\"color:#A9B1D6\"> j </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> m </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#0DB9D7\">            print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">f</span><span style=\"color:#9ECE6A\">\"(</span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#C0CAF5\">i</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">, </span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#C0CAF5\">j</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">)\"</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<ul>\n<li>\n<p>The outer loop runs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> times.</p>\n</li>\n<li>\n<p>For each iteration of the outer loop, the inner loop runs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> times.</p>\n</li>\n<li>\n<p>Total iterations:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n \\times m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span></span>\n</li>\n<li>\n<p>Time Complexity:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>×</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\times m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></span>\n</li>\n</ul>\n<h6 id=\"example-13-combination-of-multiplicative-and-dependent-loops\">Example 13: Combination of Multiplicative and Dependent Loops</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> mixed_loops</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> n </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        j </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> i</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        while</span><span style=\"color:#A9B1D6\"> j </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#A9B1D6\"> n</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#0DB9D7\">            print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">f</span><span style=\"color:#9ECE6A\">\"(</span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#C0CAF5\">i</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">, </span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#C0CAF5\">j</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">)\"</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">            j </span><span style=\"color:#89DDFF\">*=</span><span style=\"color:#FF9E64\"> 2</span></span></code></pre>\n<ul>\n<li>\n<p>The outer loop runs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> times.</p>\n</li>\n<li>\n<p>For each iteration of the outer loop, the inner loop runs approximately <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\log_2 (n/i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span></span></span></span> times.</p>\n</li>\n<li>\n<p>Total iterations:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mi>i</mi></mfrac><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=1}^{n} \\log_2 \\left(\\frac{n}{i}\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9291em;vertical-align:-1.2777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span></span></span></span></span>\n</li>\n<li>\n<p>This sum approximates to:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n</li>\n</ul>\n<h4 id=\"key-takeaways\">Key Takeaways</h4>\n<p>Counting operations/iterations is a practical method for analyzing the time complexity of algorithms, especially for iterative algorithms with a fixed number of operations per iteration. With this method, you can evaluate the performance of algorithms intuitively. Thus, you can identify bottlenecks in your code, and improve your code.</p>\n<h2 id=\"building-up-recursive-functions-and-recurrence-relations\">Building Up: Recursive Functions and Recurrence Relations</h2>\n<p>Recursive algorithms solve problems by breaking them into smaller subproblems, typically calling themselves with smaller inputs. This structure often leads to a recurrence relation—an equation that expresses the runtime <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> of the algorithm in terms of smaller inputs.</p>\n<h4 id=\"what-is-a-recurrence-relation\">What is a Recurrence Relation?</h4>\n<p>As you’ve already read in the previous section, a recurrence relation is an equation that describes the runtime of a recursive algorithm. It consists of:</p>\n<ul>\n<li><strong>Recursive calls</strong>: How many smaller problems are being solved.</li>\n<li><strong>Work done per call</strong>: The operations performed outside the recursive calls.</li>\n</ul>\n<p>For example, consider the recursive function:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> factorial</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#7AA2F7\"> factorial</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<p>Recurrence relation for the <code>factorial</code> function:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = T(n - 1) + O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> represents the runtime of the <code>factorial</code> function for an input of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> is the recursive call to solve the subproblem of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> is the time taken for the multiplication operation.</li>\n</ul>\n<p>In the next few sections, we will explore methods to solve recurrence relations and derive the time complexity of recursive algorithms. This will make it easier for you to analyze the performance of recursive functions and understand the mathematical foundations of algorithm analysis.</p>\n<h2 id=\"time-complexity-solving-recurrence-relations\">Time Complexity: Solving Recurrence Relations</h2>\n<p>There are a variety of methods to solve recurrence relations, including:</p>\n<ul>\n<li>Substitution Method</li>\n<li>Recurrence Tree Method</li>\n<li>Master Theorem</li>\n<li>Generating Functions (this is a more advanced technique)</li>\n</ul>\n<h4 id=\"substitution-method\">Substitution Method</h4>\n<p>The substitution method involves iterative substitution of the recurrence relation into itself and proving the guessed solution by induction.</p>\n<p>Steps:</p>\n<ol>\n<li><strong>Expand the recurrence</strong>: Substitute the recurrence relation repeatedly until a pattern emerges.</li>\n<li><strong>Formulate a general form</strong>: Use the observed pattern to propose a solution.</li>\n<li><strong>Prove by induction</strong>: Validate the solution using mathematical induction.</li>\n<li><strong>Refine the solution if needed.</strong></li>\n</ol>\n<p>For example, take the following recurrence relation:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mi>n</mi><mo separator=\"true\">;</mo><mspace width=\"1em\"></mspace><mi>T</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">T(n) = 2T\\left(\\frac{n}{2}\\right) + n; \\quad T(1) = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.836em;vertical-align:-0.686em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span>\n<ol>\n<li>\n<p><strong>Expand the recurrence</strong>:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mn>2</mn><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mn>2</mn><mrow><mo fence=\"true\">(</mo><mn>2</mn><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mn>4</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mn>4</mn><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mn>4</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mn>2</mn><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mn>4</mn><mrow><mo fence=\"true\">(</mo><mn>2</mn><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mn>8</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mfrac><mi>n</mi><mn>4</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mn>2</mn><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mn>8</mn><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mn>8</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mn>3</mn><mi>n</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{align*}\nT(n) &#x26; = 2T\\left(\\frac{n}{2}\\right) + n \\\\\n&#x26; = 2\\left(2T\\left(\\frac{n}{4}\\right) + \\frac{n}{2}\\right) + n \\\\\n&#x26; = 4T\\left(\\frac{n}{4}\\right) + 2n \\\\\n&#x26; = 4\\left(2T\\left(\\frac{n}{8}\\right) + \\frac{n}{4}\\right) + 2n \\\\\n&#x26; = 8T\\left(\\frac{n}{8}\\right) + 3n\n\\end{align*}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:10.68em;vertical-align:-5.09em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.59em;\"><span style=\"top:-7.59em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span><span style=\"top:-5.454em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3.318em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.182em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"></span></span><span style=\"top:0.954em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.09em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.59em;\"><span style=\"top:-7.59em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-5.454em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-3.318em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-1.182em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">8</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:0.954em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">8</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">8</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.09em;\"><span></span></span></span></span></span></span></span></span></span></span></span>\n<p>Continue this process until a pattern emerges.</p>\n</li>\n<li>\n<p><strong>Formulate a general form</strong>:</p>\n<p>From the above expansion, we observe that the pattern is:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mn>2</mn><mi>k</mi></msup><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><msup><mn>2</mn><mi>k</mi></msup></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mi>k</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">T(n) = 2^kT\\left(\\frac{n}{2^k}\\right) + kn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.836em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7751em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">kn</span></span></span></span></span>\n</li>\n<li>\n<p><strong>Prove by induction</strong>:</p>\n<p>If we assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">n = 2^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">k = \\log_2 n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>. Substituting this into the general form, we get:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo>=</mo><mi>n</mi><mo>+</mo><mi>n</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = nT(1) + n\\log_2 n = n + n\\log_2 n = O(n\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n<p>Therefore, the time complexity of the algorithm is of the order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>\n</li>\n</ol>\n<h4 id=\"recurrence-tree-method\">Recurrence Tree Method</h4>\n<p>The recurrence tree method visualizes the recursive calls of an algorithm as a tree structure. By analyzing the tree’s depth and branching factor, we can determine the algorithm’s time complexity.</p>\n<p>Steps:</p>\n<ul>\n<li><strong>Expand the recurrence into a tree</strong>: Each node represents a recursive call, and its children represent the subproblems.</li>\n<li><strong>Compute the work at each level</strong>: Add up the work for all nodes at the same level.</li>\n<li><strong>Sum over all levels</strong>: Combine the work across all levels to compute the total.</li>\n</ul>\n<p>For example, consider the recurrence relation:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">T(n) = 2T\\left(\\frac{n}{2}\\right) + n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.836em;vertical-align:-0.686em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>\n<ol>\n<li>\n<p><strong>Expand the recurrence into a tree</strong>:</p>\n<p>The tree for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> will have a root node representing the original problem of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, with two children representing subproblems of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> each. This process continues until we reach subproblems of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>. The tree will have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> levels.</p>\n<ul>\n<li>Root: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></li>\n<li>Level 1: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, total work <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mn>2</mn><mo>×</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">= 2 \\times \\frac{n}{2} = n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></li>\n<li>Level 2: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mn>4</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{4}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mn>4</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{4}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mn>4</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{4}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mn>4</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{4}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, total work <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mn>4</mn><mo>×</mo><mfrac><mi>n</mi><mn>4</mn></mfrac><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">= 4 \\times \\frac{n}{4} = n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></li>\n<li>… and so on, each level has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> work.</li>\n</ul>\n</li>\n<li>\n<p><strong>Count the number of levels</strong>:</p>\n<p>The tree has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\log n + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> levels, as the problem size is halved at each level.</p>\n</li>\n<li>\n<p><strong>Compute the total work</strong>:</p>\n<p>The total work is the sum of the work at each level, which is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> at each level.</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>n</mi><mo>+</mo><mi>n</mi><mo>+</mo><mi>n</mi><mo>+</mo><mo>…</mo><mo stretchy=\"false\">(</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo>+</mo><mn>1</mn><mtext> </mtext><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n + n + n + \\ldots (\\log_2 n + 1 \\space times) = O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">im</span><span class=\"mord mathnormal\">es</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n<p>Therefore, the total work is of the order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, and thus the time complexity of the algorithm is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>. This matches the result obtained using the substitution method.</p>\n</li>\n</ol>\n<h4 id=\"master-theorem\">Master Theorem</h4>\n<p>Master Theorem is a direct and powerful tool for solving divide-and-conquer recurrences. It applies when the recurrence is of the form:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mi>b</mi></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = aT\\left(\\frac{n}{b}\\right) + f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.836em;vertical-align:-0.686em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n<p>Where:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a \\geq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> is the number of recursive calls.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>></mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">b > 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> is the factor by which the input size is divided.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> is an asymptotically positive function.</li>\n</ul>\n<p><strong>Case Analysis</strong>:</p>\n<ol>\n<li>\n<p>Case 1: If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&#x3C;</mo><msup><mi>n</mi><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>b</mi></msub><mi>a</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f(n) &#x3C; n^{\\log_b a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2302em;\"><span style=\"top:-2.2341em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2659em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span></span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>b</mi></msub><mi>a</mi></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = O(n^{\\log_b a})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2302em;\"><span style=\"top:-2.2341em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2659em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>This is when the work done at the root dominates the work done at the leaves. The solution is the same as the work done at the root.</p>\n</li>\n<li>\n<p>Case 2: If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>n</mi><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>b</mi></msub><mi>a</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f(n) = n^{\\log_b a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2302em;\"><span style=\"top:-2.2341em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2659em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span></span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>b</mi></msub><mi>a</mi></mrow></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = O(n^{\\log_b a} \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2302em;\"><span style=\"top:-2.2341em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2659em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>This is when the work done at the root and leaves are balanced. The solution involves an additional logarithmic factor.</p>\n</li>\n<li>\n<p>Case 3: If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>></mo><msup><mi>n</mi><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>b</mi></msub><mi>a</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f(n) > n^{\\log_b a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2302em;\"><span style=\"top:-2.2341em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2659em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span></span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span>.</p>\n<p>This is when the work done at the leaves dominates the work done at the root. The solution is the same as the work done at the leaves.</p>\n</li>\n</ol>\n<p>A few examples of applying the Master Theorem:</p>\n<ol>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">T(n) = 3T\\left(\\frac{n}{2}\\right) + n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.35em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>:</p>\n<ul>\n<li>Here, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">a = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">b = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">f(n) = n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>. We have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>b</mi></msub><mi>a</mi></mrow></msup><mo>=</mo><msup><mi>n</mi><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mn>3</mn></mrow></msup><mo>≈</mo><msup><mi>n</mi><mn>1.58</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^{\\log_b a} = n^{\\log_2 3} \\approx n^{1.58}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2302em;\"><span style=\"top:-2.2341em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2659em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1944em;\"><span style=\"top:-2.2341em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2659em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1.58</span></span></span></span></span></span></span></span></span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>></mo><msup><mi>n</mi><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f(n) = O(n^2) > n^{\\log_2 3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1944em;\"><span style=\"top:-2.2341em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2659em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span>.</li>\n<li>Therefore, by the Master Theorem’s Case 3, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</li>\n</ul>\n<p>This is not surprising, as the quadratic term <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> dominates the runtime.</p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">T(n) = 2T\\left(\\frac{n}{2}\\right) + n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.35em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>:</p>\n<ul>\n<li>Here, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">a = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">b = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">f(n) = n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>. We have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>b</mi></msub><mi>a</mi></mrow></msup><mo>=</mo><msup><mi>n</mi><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mn>2</mn></mrow></msup><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n^{\\log_b a} = n^{\\log_2 2} = n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2302em;\"><span style=\"top:-2.2341em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2659em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1944em;\"><span style=\"top:-2.2341em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2659em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi><mo>=</mo><msup><mi>n</mi><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">f(n) = n = n^{\\log_2 2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1944em;\"><span style=\"top:-2.2341em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2659em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>.</li>\n<li>Therefore, by the Master Theorem’s Case 2, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</li>\n</ul>\n<p>The logarithmic term <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> accounts for the additional work in each recursive call.</p>\n</li>\n</ol>\n<p>The Master Theorem is a simple and easy to learn method to find out the time complexity of divide-and-conquer algorithms. It provides a direct solution without the need for complex expansions or derivations.</p>\n<h4 id=\"additional-master-theorem-for-reducing-recurrences\">Additional: Master Theorem for reducing recurrences</h4>\n<p>When the recurrence relation is of the form:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = aT(n - b) + f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>\n<p>Where:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>></mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a > 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> is the number of recursive calls.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>></mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">b > 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> is the reduction factor.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> is an asymptotically positive function.</li>\n</ul>\n<p>This corresponds to a divide-and-conquer algorithm that reduces the problem size by a constant amount (e.g., <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">n - k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, etc.) in each recursive call.</p>\n<p><strong>Case Analysis</strong>:</p>\n<ol>\n<li>\n<p>Case 1: If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&#x3C;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a &#x3C; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span>.</p>\n<p>This is when the recursion reduces rapidly, and the non-recursive work dominates.</p>\n</li>\n<li>\n<p>Case 2: If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = O(nf(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span>.</p>\n<p>This is when each level contributes evenly, and the total cost depends linearly on the number of levels.</p>\n</li>\n<li>\n<p>Case 3: If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>></mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a > 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><msup><mi>a</mi><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>b</mi></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = O(f(n) \\cdot a^{n/b})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>This is when the recursion grows exponentially, dominating the overall cost.</p>\n</li>\n</ol>\n<p>For example, consider the recurrence relation:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">T(n) = 2T(n - 1) + n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>\n<p>Here, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">a = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">b = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">f(n) = n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>. We have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>></mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a > 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, so we apply Case 3:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>⋅</mo><msup><mn>2</mn><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>⋅</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = O(n \\cdot 2^{n/1}) = O(n \\cdot 2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mtight\">/1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li>Therefore, the time complexity of the algorithm is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>⋅</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\cdot 2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</li>\n</ul>\n<p>Another example is the recurrence relation:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">T(n) = T(n - 1) + \\log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>\n<p>Here, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">b = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">f(n) = \\log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>. We have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, so we apply Case 2:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li>Therefore, the time complexity of the algorithm is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</li>\n</ul>\n<h6 id=\"a-challenge-for-you-️\">A challenge for you ♨️</h6>\n<p>Try solving the recurrence relation above, i.e., <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">T(n) = T(n - 1) + \\log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, using the substitution method or the recurrence tree method.</p>\n<p>You will encounter a weird equation,</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo>+</mo><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = 1 + \\log(n!)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!)</span></span></span></span></span>\n<p>Can you simplify this equation to get the time complexity?</p>\n<h2 id=\"mathematics-and-computer-science-generating-functions\">Mathematics and Computer Science: Generating Functions</h2>\n<blockquote>\n<p>This part is purely mathematical, and can be termed as extra knowledge. If you are not interested in Generating Functions, you can skip this section.</p>\n</blockquote>\n<p>Generating functions are purely mathematical tools that help in solving recurrences. Generating functions transform a recurrence into an algebraic expression that can be solved systematically. Generating functions are a powerful tool for solving complex recurrences and deriving closed-form solutions. They are particularly useful for linear recurrences with constant coefficients.</p>\n<p>The steps to solve a recurrence relation using generating functions are:</p>\n<ol>\n<li>\n<p><strong>Define the generating function</strong>: Represent the sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> as a formal power series:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">G(x) = \\sum_{n=0}^{\\infty} T(n)x^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span>\n</li>\n<li>\n<p><strong>Translate the recurrence</strong>: Express the recurrence relation in terms of the generating function.</p>\n</li>\n<li>\n<p><strong>Solve for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></strong>: Manipulate the generating function to derive a closed-form expression.</p>\n</li>\n<li>\n<p><strong>Extract the solution</strong>: Extract the coefficients of the generating function to obtain the solution for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, often using partial fractions or other techniques. The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mtext>th</mtext></msup></mrow><annotation encoding=\"application/x-tex\">n^{\\text{th}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">th</span></span></span></span></span></span></span></span></span></span></span></span></span> term of the solution represents the time complexity of the algorithm.</p>\n</li>\n</ol>\n<p>For example, consider the recurrence relation:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi><mo separator=\"true\">;</mo><mspace width=\"1em\"></mspace><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn><mo separator=\"true\">;</mo><mspace width=\"1em\"></mspace><mi>n</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">T(n) = T(n - 1) + n; \\quad T(0) = 0; \\quad n \\geq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span>\n<ol>\n<li>\n<p><strong>Define the generating function</strong>:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">G(x) = \\sum_{n=0}^{\\infty} T(n)x^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span>\n</li>\n<li>\n<p><strong>Translate the recurrence</strong>:</p>\n<p>From the recurrence relation, we have:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">T(n) = T(n - 1) + n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>\n<p>Multiplying both sides by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> and summing over all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n \\geq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, we get:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup><mo>+</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>n</mi><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=1}^{\\infty} T(n)x^n = \\sum_{n=1}^{\\infty} T(n - 1)x^n + \\sum_{n=1}^{\\infty} nx^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span>\n<p>The first sum on the right hand side is the generating function shifted by one:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><mi>x</mi><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><mi>x</mi><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=1}^{\\infty} T(n - 1)x^n = x\\sum_{n=0}^{\\infty} T(n)x^n = xG(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></span>\n<p>The second sum can be computed as:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>n</mi><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><mi>x</mi><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>n</mi><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>x</mi><mfrac><mi>d</mi><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mrow><mo fence=\"true\">(</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><msup><mi>x</mi><mi>n</mi></msup><mo fence=\"true\">)</mo></mrow><mo>=</mo><mi>x</mi><mfrac><mi>d</mi><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mrow><mo fence=\"true\">(</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac><mo fence=\"true\">)</mo></mrow><mo>=</mo><mfrac><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=1}^{\\infty} nx^n = x\\sum_{n=1}^{\\infty} nx^{n-1} = x\\frac{d}{dx}\\left(\\sum_{n=0}^{\\infty} x^n\\right) = x\\frac{d}{dx}\\left(\\frac{1}{1 - x}\\right) = \\frac{x}{(1 - x)^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0171em;vertical-align:-1.2671em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">(</span></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0436em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<p>The left hand side is the generating function without the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> term:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=1}^{\\infty} T(n)x^n = G(x) - T(0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span></span>\n<p>Substituting these results back into the equation, we get:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mfrac><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">G(x) - T(0) = xG(x) + \\frac{x}{(1 - x)^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0436em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<p>Since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">T(0) = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, the equation simplifies to:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow></mfrac><mo>+</mo><mi>x</mi><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(x) = \\frac{x}{(1 - x)^2} + xG(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0436em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></span>\n</li>\n<li>\n<p><strong>Solve for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></strong>:</p>\n<p>Rearranging the equation to solve for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>, we get:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>x</mi><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">G(x) - xG(x) = \\frac{x}{(1 - x)^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0436em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">G(x)(1 - x) = \\frac{x}{(1 - x)^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0436em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">G(x) = \\frac{x}{(1 - x)^3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0436em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n</li>\n<li>\n<p><strong>Extract the solution</strong>:</p>\n<p>Now, to find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, we need to extract the coefficients of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> from the generating function. We have:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">G(x) = \\frac{x}{(1 - x)^3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0436em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<p>We can do this by expanding the generating function using the binomial theorem:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup></mrow></mfrac><mo>=</mo><mi>x</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>3</mn></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>x</mi><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>k</mi><mo>+</mo><mn>2</mn></mrow><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><msup><mi>x</mi><mi>k</mi></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>k</mi><mo>+</mo><mn>2</mn></mrow><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><msup><mi>x</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{align*}\nG(x) &#x26; = \\frac{x}{(1 - x)^3} = x(1 - x)^{-3} \\\\\n&#x26; = x\\sum_{k=0}^{\\infty} \\binom{k + 2}{2}x^k \\\\\n&#x26; = \\sum_{k=0}^{\\infty} \\binom{k + 2}{2}x^{k + 1} \\\\\n\\end{align*}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:8.8506em;vertical-align:-4.1753em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.6753em;\"><span style=\"top:-7.2191em;\"><span class=\"pstrut\" style=\"height:3.6514em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.3317em;\"><span class=\"pstrut\" style=\"height:3.6514em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.0782em;\"><span class=\"pstrut\" style=\"height:3.6514em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.1753em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.6753em;\"><span style=\"top:-7.2191em;\"><span class=\"pstrut\" style=\"height:3.6514em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-4.3317em;\"><span class=\"pstrut\" style=\"height:3.6514em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8479em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3021em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span><span style=\"top:-1.0782em;\"><span class=\"pstrut\" style=\"height:3.6514em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8479em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3021em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.1753em;\"><span></span></span></span></span></span></span></span></span></span></span></span>\n<p>Therefore, the coefficient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> (for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n \\geq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>) is:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo>+</mo><mn>2</mn></mrow><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>=</mo><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">T(n) = \\binom{n - 1 + 2}{2} = \\binom{n + 1}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span></span></span></span></span>\n</li>\n<li>\n<p><strong>Final expression for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></strong>:</p>\n<p>Recall that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\binom{n + 1}{2} = \\frac{n(n + 1)}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2451em;vertical-align:-0.35em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>. Therefore, the solution to the recurrence relation is:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">T(n) = \\frac{n(n + 1)}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<p>This holds true for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">T(0) = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>.</p>\n</li>\n<li>\n<p><strong>Time complexity</strong>:</p>\n<p>The time complexity of the algorithm is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. This is because the solution <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">T(n) = \\frac{n(n + 1)}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> is of the order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n</li>\n</ol>\n<p>You can solve more complex recurrences using generating functions by following similar steps. Generating functions provide a systematic approach to solving recurrences and deriving closed-form solutions.</p>\n<p>While it may seem complex, it is a powerful tool for analyzing the time complexity of algorithms. The generating function method is particularly useful for linear recurrences with constant coefficients.</p>\n<p>It is a valuable technique to have in your algorithm analysis toolkit. However, it is not essential for understanding the basics of algorithm analysis. If you are interested in exploring more about generating functions, there are several resources available online that delve deeper into this topic.</p>\n<h2 id=\"a-pit-stop-time-complexity-of-the-fibonacci-sequence\">A Pit Stop: Time Complexity of the Fibonacci Sequence</h2>\n<blockquote>\n<p>This part is purely mathematical, and can be termed as extra knowledge. If you are not interested in the mathematical analysis of the Fibonacci sequence, you can skip this section.</p>\n</blockquote>\n<p>The Fibonacci sequence is a classic example used to illustrate recursion and dynamic programming. Let’s analyze the time complexity of two common implementations of the Fibonacci sequence: using recursion and dynamic programming.</p>\n<h4 id=\"iterative-fibonacci\">Iterative Fibonacci</h4>\n<p>The iterative approach to calculating the Fibonacci sequence involves storing the previous two numbers and updating them to compute the next number. This method is efficient and avoids the overhead of recursive calls.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> fibonacci_iterative</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#A9B1D6\"> n</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    a</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> b </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> _ </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> n </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        a</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> b </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> b</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> a </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#A9B1D6\"> b</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> b</span></span></code></pre>\n<p><strong>Time Complexity</strong>: The iterative Fibonacci algorithm has a time complexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, as it performs a constant number of operations for each number in the sequence.</p>\n<h4 id=\"recursive-fibonacci-the-golden-ratio\">Recursive Fibonacci: The Golden Ratio</h4>\n<p>The recursive approach to calculating the Fibonacci sequence involves calling the function recursively for the previous two numbers. While elegant, this method is inefficient due to repeated calculations.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> fibonacci_recursive</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#A9B1D6\"> n</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#7AA2F7\"> fibonacci_recursive</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#7AA2F7\"> fibonacci_recursive</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<p>The recurrence relation for the recursive Fibonacci algorithm is:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">;</mo><mspace width=\"1em\"></mspace><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mspace width=\"1em\"></mspace><mi>n</mi><mo>≥</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">T(n) = T(n - 1) + T(n - 2) + O(1); \\quad T(0) = T(1) = 1, \\quad n \\geq 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span></span>\n<p>We can take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">O(1) = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> for simplicity, as it does not affect the asymptotic growth rate of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>. Thus the recurrence relation becomes:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo separator=\"true\">;</mo><mspace width=\"1em\"></mspace><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mspace width=\"1em\"></mspace><mi>n</mi><mo>≥</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">T(n) = T(n - 1) + T(n - 2) + 1; \\quad T(0) = T(1) = 1, \\quad n \\geq 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span></span>\n<h6 id=\"step-1-define-the-generating-function\">Step 1: Define the generating function</h6>\n<p>Let:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">G(x) = \\sum_{n=0}^{\\infty} T(n)x^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span>\n<p>be the generating function for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<h6 id=\"step-2-translate-the-recurrence\">Step 2: Translate the recurrence</h6>\n<p>From the recurrence relation, we have:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">T(n) = T(n - 1) + T(n - 2) + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span>\n<p>Multiplying both sides by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> and summing over all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n \\geq 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>, we get:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup><mo>+</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup><mo>+</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=2}^{\\infty} T(n)x^n = \\sum_{n=2}^{\\infty} T(n - 1)x^n + \\sum_{n=2}^{\\infty} T(n - 2)x^n + \\sum_{n=2}^{\\infty} x^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span>\n<p>Reindexing terms:</p>\n<ul>\n<li>\n<p>The first sum on the right hand side gets simplified to:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><mi>x</mi><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>x</mi><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=2}^{\\infty} T(n - 1)x^n = x\\sum_{n=2}^{\\infty} T(n - 1)x^{n-1} = x(G(x) - T(0))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span></span></span>\n</li>\n<li>\n<p>The second sum on the right hand side gets simplified to:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><munderover><mo>∑</mo><mrow><mi>m</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>m</mi></msup><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=2}^{\\infty} T(n - 2)x^n = x^2\\sum_{m=0}^{\\infty} T(m)x^m = x^2G(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></span>\n</li>\n<li>\n<p>For the constant term, we have:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><munderover><mo>∑</mo><mrow><mi>m</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><msup><mi>x</mi><mi>m</mi></msup><mo>=</mo><mfrac><msup><mi>x</mi><mn>2</mn></msup><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=2}^{\\infty} x^n = x^2\\sum_{m=0}^{\\infty} x^m = \\frac{x^2}{1 - x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2604em;vertical-align:-0.7693em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4911em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n</li>\n<li>\n<p>The left hand side is the generating function without the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n = 0, 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span></span></span></span> terms:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=2}^{\\infty} T(n)x^n = G(x) - T(0) - T(1)x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9185em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">x</span></span></span></span></span>\n</li>\n</ul>\n<p>Substituting these results back into the original equation, we get:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>x</mi><mo>=</mo><mi>x</mi><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mfrac><msup><mi>x</mi><mn>2</mn></msup><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">G(x) - T(0) - T(1)x = x(G(x) - T(0)) + x^2G(x) + \\frac{x^2}{1 - x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2604em;vertical-align:-0.7693em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4911em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<h6 id=\"step-3-rearranging-the-equation-to-solve-for-gxgxgx\">Step 3: Rearranging the equation to solve for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></h6>\n<p>Rearranging the equation to solve for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>, we get:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>x</mi><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mi>x</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>x</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mfrac><msup><mi>x</mi><mn>2</mn></msup><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">G(x) - xG(x) - x^2G(x) = T(0) - xT(0) + xT(1) + \\frac{x^2}{1 - x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2604em;vertical-align:-0.7693em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4911em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<p>Substituting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">T(0) = T(1) = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>x</mi><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><mi>x</mi><mo>+</mo><mi>x</mi><mo>+</mo><mfrac><msup><mi>x</mi><mn>2</mn></msup><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">G(x) - xG(x) - x^2G(x) = 1 - x + x + \\frac{x^2}{1 - x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2604em;vertical-align:-0.7693em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4911em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo>+</mo><mfrac><msup><mi>x</mi><mn>2</mn></msup><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">G(x)(1 - x - x^2) = 1 + \\frac{x^2}{1 - x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2604em;vertical-align:-0.7693em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4911em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<h6 id=\"step-4-solving-for-gxgxgx\">Step 4: Solving for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></h6>\n<p>On factorizing the characteristic polynomial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>−</mo><mi>x</mi><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1 - x - x^2 = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, we get its roots as:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>±</mo><msqrt><mn>5</mn></msqrt></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">x = \\frac{1 \\pm \\sqrt{5}}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2702em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5842em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">±</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">5</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<p>Thus the generating function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> can be written in terms of these roots. The coefficients of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> in G(x) are asympotically dominated by the root:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><msqrt><mn>5</mn></msqrt></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">x = \\frac{1 + \\sqrt{5}}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2702em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5842em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">5</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<p>This is nothing but the <strong>Golden Ratio</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>≈</mo><mn>1.618</mn></mrow><annotation encoding=\"application/x-tex\">\\phi \\approx 1.618</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1.618</span></span></span></span>.</p>\n<p>Therefore, the time complexity of the recursive Fibonacci algorithm is:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>ϕ</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mtext> where </mtext><mi>ϕ</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><msqrt><mn>5</mn></msqrt></mrow><mn>2</mn></mfrac><mo>≈</mo><mn>1.618</mn></mrow><annotation encoding=\"application/x-tex\">T(n) \\in O(\\phi^n), \\space \\text{where} \\space \\phi = \\frac{1 + \\sqrt{5}}{2} \\approx 1.618</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">where</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2702em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5842em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9072em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">5</span></span></span><span style=\"top:-2.8672em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1328em;\"><span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1.618</span></span></span></span></span>\n<h2 id=\"common-time-complexities\">Common Time Complexities</h2>\n<p>There are several common time complexities that you will encounter when analyzing algorithms. Below is a list of some common time complexities. These will help you guess the time complexity of an algorithm without going through the detailed analysis every time.</p>\n<ol>\n<li>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> - Constant Time</strong></p>\n<ul>\n<li>The runtime is independent of input size.</li>\n<li>Example: Accessing an element in an array by index.</li>\n</ul>\n</li>\n<li>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> - Logarithmic Time</strong></p>\n<ul>\n<li>Runtime grows logarithmically as input size increases.</li>\n<li>Example: Binary search in a sorted array.</li>\n</ul>\n</li>\n<li>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> - Linear Time</strong></p>\n<ul>\n<li>Runtime increases proportionally with input size.</li>\n<li>Example: Iterating through an array.</li>\n</ul>\n</li>\n<li>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> - Quasilinear Time</strong></p>\n<ul>\n<li>Typical of efficient sorting algorithms like merge sort and quicksort.</li>\n</ul>\n</li>\n<li>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> - Quadratic Time</strong></p>\n<ul>\n<li>Runtime scales quadratically, often due to nested loops.</li>\n<li>Example: Bubble sort or insertion sort.</li>\n</ul>\n</li>\n<li>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo><mi>o</mi><mi>r</mi><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2^n) or O(n!)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!)</span></span></span></span> - Exponential/Factorial Time</strong></p>\n<ul>\n<li>Extremely inefficient for large inputs, often associated with brute-force solutions.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"steps-to-analyze-time-complexity\">Steps to Analyze Time Complexity</h2>\n<p>You have learned various methods to analyze the time complexity of algorithms. But as a short trick, you can vaguely guess the time complexity of an algorithm by following these steps:</p>\n<ol>\n<li><strong>Identify Dominant Operations:</strong> Focus on the operations that dominate the runtime.</li>\n<li><strong>Consider the Worst-Case Scenario:</strong> Provide a comprehensive performance guarantee.</li>\n<li><strong>Simplify Expressions:</strong> Ignore constants and lower-order terms for clarity.</li>\n</ol>\n<h4 id=\"best-average-and-worst-cases\">Best, Average, and Worst Cases</h4>\n<p>You have already encountered the concept of best, average, and worst cases in algorithm analysis. Here is a brief summary of these cases:</p>\n<ul>\n<li><strong>Best Case:</strong> The minimal runtime under optimal conditions. Often not representative of real-world performance. It is denoted by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Ω</span></span></span></span>.</li>\n<li><strong>Average Case:</strong> The expected runtime for typical input distributions. Requires statistical analysis. It is denoted by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi></mrow><annotation encoding=\"application/x-tex\">\\Theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Θ</span></span></span></span>.</li>\n<li><strong>Worst Case:</strong> The upper limit of runtime across all possible inputs. Provides a performance guarantee. It is denoted by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span></span></span></span>.</li>\n</ul>\n<h2 id=\"space-complexity\">Space Complexity</h2>\n<p>Space complexity measures the total memory required by an algorithm to execute, including memory for input data, auxiliary data structures, and intermediate computations. It helps us understand the memory efficiency of algorithms, mainly when working with large data sets or in memory-constrained environments.</p>\n<h4 id=\"why-space-complexity-matters\">Why Space Complexity Matters?</h4>\n<p>When dealing with embedded systems, mobile devices, or cloud computing, memory can be a critical resource. Understanding the space complexity of algorithms is essential for optimizing memory usage and ensuring efficient performance. Optimizing space complexity can lead to better performance, reduced costs, and improved user experience.</p>\n<h4 id=\"components-of-space-complexity\">Components of Space Complexity</h4>\n<ol>\n<li><strong>Fixed Space:</strong>\n<ul>\n<li>Memory for constants, variables, and program code.</li>\n<li>Independent of input size.</li>\n<li>Example: Storing a fixed size array or a few variables.</li>\n</ul>\n</li>\n<li><strong>Dynamic Space:</strong>\n<ul>\n<li>Memory for data structures, recursion, and temporary storage.</li>\n<li>Includes memory that depends on the input size.</li>\n<li>Can arise from:\n<ul>\n<li>Data Structures: Stacks, Queues, Hash Tables, etc.</li>\n<li>Recursive Calls: Space allocated on the call stack.</li>\n<li>Temporary Storage: Arrays or matrices for intermediate results in algorithms like sorting or dynamic programming.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"key-scenarios\">Key Scenarios</h4>\n<ul>\n<li>Recursive algorithms often consume extra memory for the call stack.</li>\n<li>Data-intensive algorithms may require substantial temporary storage.</li>\n</ul>\n<h4 id=\"steps-to-analyze-space-complexity\">Steps to Analyze Space Complexity</h4>\n<ol>\n<li><strong>Assess Input Size:</strong>\n<ul>\n<li>Consider how the algorithm scales with increasing input.</li>\n<li>Example: An algorithm processing a list of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> might allocate an additional array of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</li>\n</ul>\n</li>\n<li><strong>Assess Additional Data Structures:</strong>\n<ul>\n<li>Evaluate the size and scope of auxiliary memory requirements.</li>\n<li>Example: Merge Sort requires <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> space for a temporary array.</li>\n</ul>\n</li>\n<li><strong>Consider Recursion Depth:</strong>\n<ul>\n<li>Each recursive call consumes stack space proportional to the depth of recursion.</li>\n<li>A depth-first search (DFS) algorithm on a tree with depth <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> uses <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span> stack space.</li>\n</ul>\n</li>\n<li><strong>Include Temporary Storage:</strong>\n<ul>\n<li>Consider memory for intermediate results or temporary arrays used during computations.</li>\n<li>Example: Dynamic programming algorithms store intermediate results in a table, consuming <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> space for a 2D table.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"examples-of-space-complexity\">Examples of Space Complexity</h4>\n<h6 id=\"1-iterative-algorithm-low-space-usage\">1. Iterative Algorithm (Low Space Usage)</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> sum_array</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">arr</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    total </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> num </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#A9B1D6\"> arr</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        total </span><span style=\"color:#89DDFF\">+=</span><span style=\"color:#A9B1D6\"> num</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> total</span></span></code></pre>\n<ul>\n<li>The algorithm uses <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> space for the <code>total</code> variable, regardless of the size of the input array.</li>\n<li>Space Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h6 id=\"2-recursive-algorithm-high-space-usage\">2. Recursive Algorithm (High Space Usage)</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> factorial</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#7AA2F7\"> factorial</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<ul>\n<li>The recursive algorithm consumes space on the call stack for each recursive call.</li>\n<li>Each recursive call requires memory for the function call, local variables, and return address.</li>\n<li>It adds a new frame to the call stack for each recursive call, requiring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> space for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> recursive calls.</li>\n<li>Space Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h6 id=\"3-dynamic-programming-intermediate-space-usage\">3. Dynamic Programming (Intermediate Space Usage)</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> fibonacci</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    dp </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#89DDFF\"> *</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#A9B1D6\">n </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    dp</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> n </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        dp</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">i</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> dp</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">i </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#A9B1D6\"> dp</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">i </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#9ABDF5\">]</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> dp</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">n</span><span style=\"color:#9ABDF5\">]</span></span></code></pre>\n<ul>\n<li>The dynamic programming algorithm uses an array <code>dp</code> of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> to store intermediate results.</li>\n<li>The space required for the array is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li>Space Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h6 id=\"4-optimized-space-in-dynamic-programming\">4. Optimized space in Dynamic Programming</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> fibonacci_optimized</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    prev</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> curr </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> _ </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> n </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        prev</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> curr </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> curr</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> prev </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#A9B1D6\"> curr</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> curr</span></span></code></pre>\n<ul>\n<li>The algorithm uses only <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> space by storing only the last two results instead of the entire array.</li>\n<li>Space Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h6 id=\"5-recursive-with-memoization-reduced-space-usage\">5. Recursive with Memoization (Reduced Space Usage)</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> fibonacci_memo</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> memo</span><span style=\"color:#89DDFF\">={}</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#A9B1D6\"> memo</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#A9B1D6\"> memo</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">n</span><span style=\"color:#9ABDF5\">]</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#A9B1D6\"> n</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    memo</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">n</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#7AA2F7\"> fibonacci_memo</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> memo</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#7AA2F7\"> fibonacci_memo</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> memo</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> memo</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">n</span><span style=\"color:#9ABDF5\">]</span></span></code></pre>\n<ul>\n<li>The recursive algorithm with memoization reduces redundant calculations by storing intermediate results in a dictionary <code>memo</code>.</li>\n<li>The space required for the dictionary is proportional to the number of unique function calls.</li>\n<li>The space complexity is reduced from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is the number of unique function calls.</li>\n<li>Space Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h2 id=\"balancing-time-and-space\">Balancing Time and Space</h2>\n<p>Optimizing algorithms often involves trade-offs between time and space. You can either prioritize space efficiency or time efficiency based on the requirements of your application. Here are some considerations to help you balance time and space complexity:</p>\n<ul>\n<li><strong>Memory-Constrained Scenarios</strong>: Choose iterative methods or space-optimized dynamic programming.</li>\n<li><strong>Time-Critical Scenarios</strong>: Opt for algorithms like dynamic programming, which may use more memory to store intermediate results.</li>\n</ul>\n<p>Examples include:</p>\n<ol>\n<li>\n<p><strong>Dynamic Programming vs Recursive Methods vs Iterative Methods</strong></p>\n<ul>\n<li>Dynamic Programming: Reduces runtime by storing intermediate results but increases memory usage.</li>\n<li>Recursive Methods: Uses less memory compared to dynamic programming techniques but have higher time complexity due to repeated calculations.</li>\n<li>Iterative Methods: Uses less memory compared to recursion but may take longer to execute.</li>\n</ul>\n</li>\n<li>\n<p><strong>In-Place Sorting vs. Non-In-Place Sorting</strong></p>\n<ul>\n<li>In-place sorting algorithms like Quick Sort uses <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> additional space but may have higher runtime in the worst case.</li>\n<li>Non-in-place algorithms like Merge Sort use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> additional memory for temporary arrays but have more predictable runtimes.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"best-practices-for-space-optimization\">Best Practices for Space Optimization</h4>\n<ul>\n<li><strong>Use Iterative Solutions</strong>: Avoid recursion when possible to save stack space.</li>\n<li><strong>Optimize Data Structures</strong>: Use lightweight data structures like arrays instead of hash tables if memory is a constraint.</li>\n<li><strong>Reuse Memory</strong>: Free up temporary variables or use in-place algorithms where applicable.</li>\n<li><strong>Trade Time for Space</strong>: Accept slightly slower runtimes for reduced memory usage when memory is the bottleneck.</li>\n</ul>\n<h2 id=\"practice-problems\">Practice Problems</h2>\n<ol>\n<li>\n<p>Compare the time complexity of the following two implementations of finding the factorial of a number:</p>\n<p>Iterative Approach:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> factorial_iterative</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">   result </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> n </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">      result </span><span style=\"color:#89DDFF\">*=</span><span style=\"color:#A9B1D6\"> i</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   return</span><span style=\"color:#A9B1D6\"> result</span></span></code></pre>\n<p>Recursive Approach:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> factorial_recursive</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      return</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   return</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#7AA2F7\"> factorial_recursive</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n</li>\n<li>\n<p>Consider the following recursive function for computing the sum of an array:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> recursive_sum</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">arr</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   if</span><span style=\"color:#0DB9D7\"> len</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">arr</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#BB9AF7\"> ==</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      return</span><span style=\"color:#A9B1D6\"> arr</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#9ABDF5\">]</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">   mid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#0DB9D7\"> len</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">arr</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> //</span><span style=\"color:#FF9E64\"> 2</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   return</span><span style=\"color:#7AA2F7\"> recursive_sum</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">arr</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#C0CAF5\">mid</span><span style=\"color:#9ABDF5\">])</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#7AA2F7\"> recursive_sum</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">arr</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#C0CAF5\">mid</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#9ABDF5\">])</span></span></code></pre>\n<p>What is the time complexity of this algorithm? Express it in terms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, the length of the array.</p>\n</li>\n<li>\n<p>Consider the following divide and conquer algorithm for calculating the power of a number:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> power</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">x</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      return</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">   half </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> power</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">x</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> n </span><span style=\"color:#89DDFF\">//</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#89DDFF\">%</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#BB9AF7\"> ==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      return</span><span style=\"color:#A9B1D6\"> half </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#A9B1D6\"> half</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   return</span><span style=\"color:#A9B1D6\"> half </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#A9B1D6\"> half </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#A9B1D6\"> x</span></span></code></pre>\n<p>Write the recurrence relation for the time complexity of this function and solve it.</p>\n</li>\n<li>\n<p>For binary search, the recurrence relation can be expressed as:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>T</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = T\\left(\\frac{n}{2}\\right) + O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.836em;vertical-align:-0.686em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span>\n<p>Solve this recurrence relation using the Master Theorem or by expanding it to find the time complexity of binary search.</p>\n</li>\n<li>\n<p>Consider the following recursive algorithm that divides the problem into three subproblems of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">n/3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/3</span></span></span></span>, performing constant work:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> divide_conquer</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      return</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">   result </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> divide_conquer</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">//</span><span style=\"color:#FF9E64\"> 3</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#7AA2F7\"> divide_conquer</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">//</span><span style=\"color:#FF9E64\"> 3</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#7AA2F7\"> divide_conquer</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">//</span><span style=\"color:#FF9E64\"> 3</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   return</span><span style=\"color:#A9B1D6\"> result</span></span></code></pre>\n<p>Write the recurrence relation for this function and solve it to find the time complexity.</p>\n</li>\n<li>\n<p>Consider the following recursive function, which splits the input into four subproblems and performs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> work at each level:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> advanced_algorithm</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      return</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">   left </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> advanced_algorithm</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">//</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">   right </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> advanced_algorithm</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">//</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   return</span><span style=\"color:#A9B1D6\"> left </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#A9B1D6\"> right </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#A9B1D6\"> n</span></span></code></pre>\n<p>Write the recurrence relation for this algorithm and solve it to find the time complexity.</p>\n</li>\n<li>\n<p>Consider the following recursive function, which calls itself multiple times in a nested manner:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> nested_algorithm</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      return</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   return</span><span style=\"color:#7AA2F7\"> nested_algorithm</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#7AA2F7\"> nested_algorithm</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#7AA2F7\"> nested_algorithm</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 3</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<p>Write the recurrence relation for this function and solve it.</p>\n</li>\n<li>\n<p>Consider the following recursive function:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> recursive_sum</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">arr</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   if</span><span style=\"color:#BB9AF7\"> not</span><span style=\"color:#A9B1D6\"> arr</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      return</span><span style=\"color:#FF9E64\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   return</span><span style=\"color:#A9B1D6\"> arr</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#7AA2F7\"> recursive_sum</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">arr</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#9ABDF5\">])</span></span></code></pre>\n<p>What is the space complexity of this function?</p>\n</li>\n<li>\n<p>Consider the following function for calculating factorial recursively:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> factorial</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      return</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   return</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#7AA2F7\"> factorial</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<p>What is the space complexity in terms of stack space used by the recursion? How can you reduce this to an iterative solution?</p>\n</li>\n<li>\n<p>Consider the following recursive function that divides the problem into three subproblems, each of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/2</span></span></span></span> and performs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> work at each level:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> complex_algorithm</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">n</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">   if</span><span style=\"color:#A9B1D6\"> n </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      return</span><span style=\"color:#FF9E64\"> 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># Perform O(n^2) work at each level</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">left </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> complex_algorithm</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">//</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">right </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> complex_algorithm</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">n </span><span style=\"color:#89DDFF\">//</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">return</span><span style=\"color:#A9B1D6\"> left </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#A9B1D6\"> right </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#A9B1D6\"> n</span><span style=\"color:#89DDFF\">\\</span><span style=\"color:#FF5370\">*\\*2</span></span></code></pre>\n<ul>\n<li>Write the recurrence relation for the time complexity of the algorithm.</li>\n<li>Solve the recurrence relation using the recurrence tree method or the Master Theorem (if applicable).</li>\n<li>Determine the time complexity of this function in terms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"looking-ahead\">Looking Ahead</h2>\n<p>This was a very, very big post, but even then, it laid the foundation for your understanding of time and space complexity.</p>\n<p>In the next post, we will explore foundational data structures like arrays and strings, talking about their properties, operations, and practical applications.</p>",{headings:368,localImagePaths:543,remoteImagePaths:544,frontmatter:545,imagePaths:548},[369,370,371,374,377,380,383,386,389,392,395,399,402,405,408,411,414,417,420,423,426,429,432,435,438,441,444,447,450,453,456,459,462,465,468,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522,525,528,531,534,537,540],{depth:34,slug:117,text:118},{depth:34,slug:45,text:46},{depth:34,slug:372,text:373},"why-analyze-algorithms","Why Analyze Algorithms?",{depth:34,slug:375,text:376},"time-complexity-the-basics","Time Complexity: The Basics",{depth:38,slug:378,text:379},"time-complexity-notations","Time Complexity Notations",{depth:38,slug:381,text:382},"calculating-time-complexity","Calculating Time Complexity",{depth:34,slug:384,text:385},"time-complexity-a-step-forward","Time Complexity: a step forward",{depth:38,slug:387,text:388},"counting-operationsiterations-method","Counting Operations/Iterations Method",{depth:38,slug:390,text:391},"recurrence-relations-method","Recurrence Relations Method",{depth:34,slug:393,text:394},"time-complexity-counting-operationsiterations-method","Time Complexity: Counting Operations/Iterations Method",{depth:396,slug:397,text:398},6,"example-1-linear-iteration","Example 1: Linear Iteration",{depth:396,slug:400,text:401},"example-2-nested-loops-quadratic-time","Example 2: Nested Loops (Quadratic Time)",{depth:396,slug:403,text:404},"example-3-logarithmic-time-binary-search","Example 3: Logarithmic Time (Binary Search)",{depth:396,slug:406,text:407},"example-4-constant-time-accessing-an-array-element","Example 4: Constant Time (Accessing an Array Element)",{depth:38,slug:409,text:410},"lets-get-tricky","Let’s get tricky!",{depth:396,slug:412,text:413},"example-5-division-by-2","Example 5: Division by 2",{depth:396,slug:415,text:416},"example-6-multiplication-by-3","Example 6: Multiplication by 3",{depth:396,slug:418,text:419},"example-7-exponential-growth","Example 7: Exponential Growth",{depth:396,slug:421,text:422},"example-8-decrement-by-a-constant-value","Example 8: Decrement by a Constant Value",{depth:396,slug:424,text:425},"example-9-triangular-nested-loops","Example 9: Triangular Nested Loops",{depth:396,slug:427,text:428},"example-10-logarithmic-inner-loop","Example 10: Logarithmic Inner Loop",{depth:396,slug:430,text:431},"example-11-nested-loops-with-dependent-ranges","Example 11: Nested Loops with Dependent Ranges",{depth:396,slug:433,text:434},"example-12-nested-loops-with-different-ranges","Example 12: Nested Loops with Different Ranges",{depth:396,slug:436,text:437},"example-13-combination-of-multiplicative-and-dependent-loops","Example 13: Combination of Multiplicative and Dependent Loops",{depth:38,slug:439,text:440},"key-takeaways","Key Takeaways",{depth:34,slug:442,text:443},"building-up-recursive-functions-and-recurrence-relations","Building Up: Recursive Functions and Recurrence Relations",{depth:38,slug:445,text:446},"what-is-a-recurrence-relation","What is a Recurrence Relation?",{depth:34,slug:448,text:449},"time-complexity-solving-recurrence-relations","Time Complexity: Solving Recurrence Relations",{depth:38,slug:451,text:452},"substitution-method","Substitution Method",{depth:38,slug:454,text:455},"recurrence-tree-method","Recurrence Tree Method",{depth:38,slug:457,text:458},"master-theorem","Master Theorem",{depth:38,slug:460,text:461},"additional-master-theorem-for-reducing-recurrences","Additional: Master Theorem for reducing recurrences",{depth:396,slug:463,text:464},"a-challenge-for-you-️","A challenge for you ♨️",{depth:34,slug:466,text:467},"mathematics-and-computer-science-generating-functions","Mathematics and Computer Science: Generating Functions",{depth:34,slug:469,text:470},"a-pit-stop-time-complexity-of-the-fibonacci-sequence","A Pit Stop: Time Complexity of the Fibonacci Sequence",{depth:38,slug:472,text:473},"iterative-fibonacci","Iterative Fibonacci",{depth:38,slug:475,text:476},"recursive-fibonacci-the-golden-ratio","Recursive Fibonacci: The Golden Ratio",{depth:396,slug:478,text:479},"step-1-define-the-generating-function","Step 1: Define the generating function",{depth:396,slug:481,text:482},"step-2-translate-the-recurrence","Step 2: Translate the recurrence",{depth:396,slug:484,text:485},"step-3-rearranging-the-equation-to-solve-for-gxgxgx","Step 3: Rearranging the equation to solve for G(x)G(x)G(x)",{depth:396,slug:487,text:488},"step-4-solving-for-gxgxgx","Step 4: Solving for G(x)G(x)G(x)",{depth:34,slug:490,text:491},"common-time-complexities","Common Time Complexities",{depth:34,slug:493,text:494},"steps-to-analyze-time-complexity","Steps to Analyze Time Complexity",{depth:38,slug:496,text:497},"best-average-and-worst-cases","Best, Average, and Worst Cases",{depth:34,slug:499,text:500},"space-complexity","Space Complexity",{depth:38,slug:502,text:503},"why-space-complexity-matters","Why Space Complexity Matters?",{depth:38,slug:505,text:506},"components-of-space-complexity","Components of Space Complexity",{depth:38,slug:508,text:509},"key-scenarios","Key Scenarios",{depth:38,slug:511,text:512},"steps-to-analyze-space-complexity","Steps to Analyze Space Complexity",{depth:38,slug:514,text:515},"examples-of-space-complexity","Examples of Space Complexity",{depth:396,slug:517,text:518},"1-iterative-algorithm-low-space-usage","1. Iterative Algorithm (Low Space Usage)",{depth:396,slug:520,text:521},"2-recursive-algorithm-high-space-usage","2. Recursive Algorithm (High Space Usage)",{depth:396,slug:523,text:524},"3-dynamic-programming-intermediate-space-usage","3. Dynamic Programming (Intermediate Space Usage)",{depth:396,slug:526,text:527},"4-optimized-space-in-dynamic-programming","4. Optimized space in Dynamic Programming",{depth:396,slug:529,text:530},"5-recursive-with-memoization-reduced-space-usage","5. Recursive with Memoization (Reduced Space Usage)",{depth:34,slug:532,text:533},"balancing-time-and-space","Balancing Time and Space",{depth:38,slug:535,text:536},"best-practices-for-space-optimization","Best Practices for Space Optimization",{depth:34,slug:538,text:539},"practice-problems","Practice Problems",{depth:34,slug:541,text:542},"looking-ahead","Looking Ahead",[],[],{title:356,date:546,description:252,author:16,thumbnail:360,series:200,featured:359,seriesOrder:34,minutesRead:547},["Date","2024-12-07T00:00:00.000Z"],"29 min read",[],"algorithmic-analysis.md","arrays",{id:550,data:552,body:562,filePath:563,digest:564,rendered:565,legacyId:654},{title:553,tags:554,author:557,draft:359,date:558,description:559,featured:18,thumbnail:560,series:561},"Arrays: The Building Blocks of Data Structures",[555,220,223,556],"DSA","Arrays",{id:16,collection:17},["Date","2024-12-10T00:00:00.000Z"],"An in-depth look at arrays, a fundamental data structure in computer science.","/thumbnails/arrays.png",{id:200,collection:24},"Arrays are one of the most essential components in computer science. They form the foundation for many advanced data structures and algorithms due to their simplicity and efficiency. In this article, we will explore the basics of arrays, their properties, and their applications in computer science. We will also discuss some common operations on arrays and their time complexity, along with the essential operations like searching and sorting. We will also look at some advanced topics like multidimensional arrays and dynamic arrays. Let's get started!\r\n\r\n> The programming language used in this article, and the future articles will be C, but the concepts discussed here are applicable to all of the major programming languages.\r\n\r\n## What are Arrays?\r\n\r\nAn array is a collection of elements, typically of the same type, stored in contiguous memory locations. Arrays provide the following benefits:\r\n\r\n- **Indexed Access**: Retrieve elements directly using their index.\r\n- **Fixed Size**: The size of an array is predefined and cannot dynamically change in most programming languages.\r\n\r\n#### Representation of an Array\r\n\r\nArrays can be visualized as a sequence of boxes, each containing an element. For example:\r\n\r\n| Index | 0   | 1   | 2   | 3   | 4   |\r\n| ----- | --- | --- | --- | --- | --- |\r\n| Value | 10  | 20  | 30  | 40  | 50  |\r\n\r\n## Properties of Arrays\r\n\r\nArrays have the following properties:\r\n\r\n1. **Random Access**: Elements can be accessed directly using their index in $O(1)$ time.\r\n2. **Fixed Size**: The size of an array is fixed and cannot be changed dynamically.\r\n3. **Homogeneous Elements**: All elements in an array are of the same data type. This allows for efficient memory allocation and access.\r\n\r\n## Memory Dynamics of Arrays\r\n\r\nOne of the key features of arrays is that they store elements in **contiguous memory locations**. This property allows for efficient memory access and manipulation. That is why it deserves its own section!\r\n\r\n> You'll study these in depth in an Operating Systems course, or a Computer Architecture course. But, it's good to have a basic understanding of how memory works in the context of arrays.\r\n\r\n#### Contiguous Memory Allocation\r\n\r\nWhen an array is declared, the system allocates a block of continuous memory in the RAM. This ensures that every element is located at a predictable offset from the base address. For example:\r\n\r\nIn a 32-bit system, if an integer array starts at memory address `0x1000` and each integer requires 4 bytes, the array elements will occupy:\r\n\r\n- Element at index 0: Address `0x1000`\r\n- Element at index 1: Address `0x1004`\r\n- Element at index 2: Address `0x1008`, and so on.\r\n\r\nThis contiguous allocation allows direct indexing, where the address of an element at index i is computed as:\r\n\r\n$$\r\n\\text{Address} = \\text{Base Address} + i × \\text{Size of Element}\r\n$$\r\n\r\nIn C:\r\n\r\n```c\r\nint array[5] = {10, 20, 30, 40, 50};\r\nprintf(\"Address of array[2]: %p\\n\", &array[2]);\r\n```\r\n\r\n**Advantage**: This enables $O(1)$ time complexity for accessing any element since the system does not need to traverse the array.\r\n\r\n#### Cache friendliness\r\n\r\nArrays are **cache-friendly** because their elements are stored sequentially. This allows modern processors to load multiple elements into the CPU cache in one operation (cache line loading), reducing the time required to access elements, and also improving traversal performance.\r\n\r\nFor example, in a simple loop:\r\n\r\n```c\r\nfor (int i = 0; i < 5; i++) {\r\n    sum += array[i];\r\n}\r\n```\r\n\r\nThe CPU benefits from spatial locality, as it fetches adjacent elements into the cache, reducing memory latency.\r\n\r\n**Performance Implication**: Arrays are often faster than non-contiguous data structures like linked lists for traversal operations.\r\n\r\n#### Limitations of Contiguous Allocation\r\n\r\nWhile contiguous memory allocation offers benefits, it also introduces constraints:\r\n\r\n1. **Fragmentation**: If the array size is large, it may not find a contiguous block of memory, leading to fragmentation. For example, if the system has 10KB of free memory, but no contiguous block of 10KB is available, the array cannot be allocated.\r\n\r\n   ```c\r\n   int *largeArray = malloc(1000000 * sizeof(int));\r\n   if (largeArray == NULL) {\r\n       printf(\"Memory allocation failed due to fragmentation.\\n\");\r\n   }\r\n   ```\r\n\r\n   **Scenario**: Imagine a system with free blocks of memory scattered across RAM, but no single block is large enough to hold the requested array.\r\n\r\n2. **Fixed Size**: The size of an array must be declared upfront and cannot be adjusted dynamically (in static arrays). Resizing requires creating a new array and copying elements.\r\n\r\n   ```c\r\n   int *array = malloc(5 * sizeof(int));\r\n   array = realloc(array, 10 * sizeof(int)); // Resizing\r\n   ```\r\n\r\nThis operation is $O(n)$, making arrays less suitable for scenarios with frequent resizing.\r\n\r\n#### Buffer Overflow\r\n\r\nIn languages like C, improper memory management can lead to buffer overflows, where writing beyond the allocated size corrupts memory.\r\n\r\n```c\r\nint array[5] = {10, 20, 30, 40, 50};\r\narray[6] = 60; // Undefined behavior: accessing memory outside allocated bounds\r\n```\r\n\r\nSuch errors are a common source of security vulnerabilities, particularly in systems programming.\r\n\r\n#### Comparison with Linked Lists\r\n\r\nWhile arrays require contiguous memory, linked lists only need memory for individual nodes, which can be scattered across the heap. This makes linked lists more flexible but less cache-efficient.\r\n\r\n- **Arrays**: Fast access ($O(1)$), cache-friendly, fixed size, resizing requires copying.\r\n- **Linked Lists**: Slower access ($O(n)$), scattered memory, dynamic size, no buffer overflow.\r\n\r\n#### Practical Example: Choosing Arrays\r\n\r\n1. **When to use Arrays**:\r\n   - Frequent element access is required.\r\n   - Minimal resizing is expected.\r\n   - Predictable memory layout is needed for performance (e.g., matrix operations).\r\n2. **When to avoid Arrays**:\r\n   - Memory size is unknown or fluctuates.\r\n   - Elements are of varying sizes.\r\n   - Memory fragmentation is a concern.\r\n   - Frequent insertions or deletions occur, as shifting elements is costly.\r\n\r\nThese are a few considerations when choosing arrays over other data structures. You have to make informed decisions based on the requirements of your application.\r\n\r\n## Common Operations on Arrays\r\n\r\n#### Traversal\r\n\r\nTraversing an array involves visiting each element sequentially. This is typically done using a loop, such as a `for` loop.\r\n\r\n```c\r\nfor (int i = 0; i < 5; i++) {\r\n    printf(\"Element at index %d: %d\\n\", i, array[i]);\r\n}\r\n```\r\n\r\n**Time Complexity**: $O(n)$, where $n$ is the number of elements in the array.\r\n\r\n#### Insertion\r\n\r\nInserting an element into an array involves shifting elements to accommodate the new value. This can be done at the beginning, middle, or end of the array.\r\n\r\nThe following piece of code inserts a value at the second index in the array:\r\n\r\n```c\r\nint position = 2, value = 25;\r\nfor (int i = size; i > position; i--) {\r\n    array[i] = array[i - 1];\r\n}\r\narray[position] = value;\r\nsize++;\r\n```\r\n\r\nAdding an element at the end of the array is simpler and faster, as it does not require shifting elements. It can be done in $O(1)$ time.\r\n\r\n```c\r\narray[size] = value;\r\nsize++;\r\n```\r\n\r\n**Time Complexity**: $O(n)$ for inserting at the beginning or middle, $O(1)$ for inserting at the end.\r\n\r\n#### Deletion\r\n\r\nDeleting an element from an array involves shifting elements to fill the gap left by the removed value. Similar to insertion, deletion can occur at any position in the array.\r\n\r\nThe following code snippet deletes the element at the third index:\r\n\r\n```c\r\nint position = 3;\r\nfor (int i = position; i < size - 1; i++) {\r\n    array[i] = array[i + 1];\r\n}\r\nsize--;\r\n```\r\n\r\nDeleting the last element is straightforward and can be done in $O(1)$ time.\r\n\r\n```c\r\nsize--;\r\n```\r\n\r\n**Time Complexity**: $O(n)$ for deleting from the beginning or middle, $O(1)$ for deleting from the end.\r\n\r\n#### Searching\r\n\r\nSearching an array involves finding the index of a specific element. This can be done using linear search or binary search, depending on the array's properties. Linear search is used for unsorted arrays, while binary search is used for sorted arrays.\r\n\r\n###### Linear Search\r\n\r\nLinear search involves traversing the array sequentially until the desired element is found.\r\n\r\nThe following code snippet searches for the value `30` in the array:\r\n\r\n```c\r\nint target = 30, found = 0;\r\nfor (int i = 0; i < size; i++) {\r\n    if (array[i] == target) {\r\n        printf(\"Found at index %d\\n\", i);\r\n        found = 1;\r\n        break;\r\n    }\r\n}\r\nif (!found) printf(\"Not found\\n\");\r\n```\r\n\r\n**Time Complexity**: $O(n)$ for linear search.\r\n\r\n###### Binary Search\r\n\r\nBinary search is a more efficient search algorithm that requires the array to be sorted. It works by repeatedly dividing the search interval in half.\r\n\r\nFor an explanation, imagine this scenario.\r\n\r\nSuppose you want to search an element in a dictionary. You already know that the words are alphabetically sorted in the array.\r\n\r\nSo you first go in the middle of the dictionary to look for the word you want to search for. Subconciously, you match the first letter then decide to go to the left or right side of the dictionary.\r\n\r\nMost of the times, you unconsciously divide the dictionary into two halves and search in the half where the word might be present. This is the essence of binary search.\r\n\r\nFor a sorted array in C, it looks like this:\r\n\r\n```c\r\nint target = 30, low = 0, high = size - 1, mid; // low and high are the search interval, the lowest and highest index in the array\r\nwhile (low <= high) {\r\n    mid = low + (high - low) / 2; // Calculate the middle index\r\n    if (array[mid] == target) { // Element found\r\n        printf(\"Found at index %d\\n\", mid);\r\n        return;\r\n    } else if (array[mid] < target) { // Search in the right half, the target is greater than the middle element\r\n        low = mid + 1;\r\n    } else { // Search in the left half, the target is smaller than the middle element\r\n        high = mid - 1;\r\n    }\r\n}\r\n```\r\n\r\n**Time Complexity**: $O(\\log n)$ for binary search. This is because we are dividing the search interval in half at each step.\r\n\r\n#### Sorting\r\n\r\nSorting an array involves arranging its elements in a specific order, such as ascending or descending. Sorting is a fundamental operation in computer science and is used in various algorithms and applications. There are several sorting algorithms, each with its advantages and disadvantages. I will list down the most common ones:\r\n\r\n1. **Bubble Sort**: Simple and inefficient, with a time complexity of $O(n^2)$.\r\n2. **Selection Sort**: Simple and inefficient, with a time complexity of $O(n^2)$.\r\n3. **Insertion Sort**: Simple and efficient for small datasets, with a time complexity of $O(n^2)$.\r\n4. **Merge Sort**: Efficient and stable, with a time complexity of $O(n \\log n)$.\r\n5. **Quick Sort**: Efficient and widely used, with a time complexity of $O(n \\log n)$.\r\n6. **Counting Sort**: Efficient for small integer arrays, with a time complexity of $O(n + k)$. (where k is the range of the input)\r\n\r\nLets cover all these sorting algorithms one by one!\r\n\r\n###### Bubble Sort\r\n\r\nBubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted.\r\n\r\n```c\r\nvoid bubbleSort(int array[], int size) {\r\n    for (int i = 0; i < size - 1; i++) {\r\n        for (int j = 0; j < size - i - 1; j++) {\r\n            if (array[j] > array[j + 1]) {\r\n                int temp = array[j]; // Store the current element in a temporary variable\r\n                array[j] = array[j + 1]; // Swap the current element with the next element\r\n                array[j + 1] = temp; // Swap the next element with the current element, completing the swap\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Time Complexity**: $O(n^2)$ in the worst case.\r\n\r\n###### Selection Sort\r\n\r\nSelection Sort is another simple sorting algorithm that works by repeatedly finding the minimum element from the unsorted part of the array and swapping it with the first unsorted element. So, first you find the smallest element and swap it with the first element, then you find the second smallest element and swap it with the second element, and so on.\r\n\r\n```c\r\nvoid selectionSort(int array[], int size) {\r\n    for (int i = 0; i < size - 1; i++) {\r\n        int minIndex = i; // Assume the current element is the minimum\r\n        for (int j = i + 1; j < size; j++) {\r\n            if (array[j] < array[minIndex]) { // Find the minimum element in the unsorted part of the array\r\n                minIndex = j; // Update the index of the minimum element\r\n            }\r\n        }\r\n\r\n        // Swap the current element with the minimum element\r\n        int temp = array[i];\r\n        array[i] = array[minIndex];\r\n        array[minIndex] = temp;\r\n    }\r\n}\r\n```\r\n\r\n**Time Complexity**: $O(n^2)$ in the worst case.\r\n\r\n###### Insertion Sort\r\n\r\nInsertion Sort is a simple sorting algorithm that builds the final sorted array one element at a time. It works by taking one element from the unsorted part of the array and inserting it into its correct position in the sorted part of the array.\r\n\r\n```c\r\nvoid insertionSort(int array[], int size) {\r\n    for (int i = 1; i < size; i++) {\r\n        int key = array[i]; // Store the current element\r\n        int j = i - 1; // Index of the last element in the sorted part of the array\r\n        while (j >= 0 && array[j] > key) { // Move elements greater than the key to the right\r\n            array[j + 1] = array[j]; // Shift the element to the right\r\n            j--; // Move to the previous element\r\n        }\r\n        array[j + 1] = key; // Insert the key into its correct position\r\n    }\r\n}\r\n```\r\n\r\n**Time Complexity**: $O(n^2)$ in the worst case.\r\n\r\n###### Merge Sort\r\n\r\nMerge Sort is a divide-and-conquer algorithm that divides the array into two halves, sorts each half separately, and then merges them back together. It is an efficient and stable sorting algorithm with a time complexity of $O(n \\log n)$. The main part of this algorithm is the `merge` function, which merges two sorted arrays into a single sorted array.\r\n\r\nThe way the merge function works is:\r\n\r\n1. Create two temporary arrays `L` and `R` to store the left and right halves of the array.\r\n2. Copy the elements from the original array into the temporary arrays.\r\n3. Merge the two arrays back into the original array in sorted order.\r\n\r\n```c\r\nvoid merge(int array[], int left, int mid, int right) {\r\n    int n1 = mid - left + 1; // Size of the left array\r\n    int n2 = right - mid; // Size of the right array\r\n    int L[n1], R[n2]; // Temporary arrays to store the left and right halves\r\n    for (int i = 0; i < n1; i++) L[i] = array[left + i]; // Copy elements to the left array\r\n    for (int j = 0; j < n2; j++) R[j] = array[mid + 1 + j]; // Copy elements to the right array\r\n    int i = 0, j = 0, k = left; // Initialize indices for the left, right, and original arrays\r\n    while (i < n1 && j < n2) { // Merge the two arrays\r\n        if (L[i] <= R[j]) array[k++] = L[i++]; // If the left element is smaller, copy it to the original array\r\n        else array[k++] = R[j++]; // If the right element is smaller, copy it to the original array\r\n    }\r\n    while (i < n1) array[k++] = L[i++]; // Copy the remaining elements from the left array\r\n    while (j < n2) array[k++] = R[j++]; // Copy the remaining elements from the right array\r\n}\r\n\r\nvoid mergeSort(int array[], int left, int right) {\r\n    if (left < right) {\r\n        int mid = left + (right - left) / 2; // Calculate the middle index\r\n        mergeSort(array, left, mid); // Sort the left half\r\n        mergeSort(array, mid + 1, right); // Sort the right half\r\n        merge(array, left, mid, right); // Merge the two halves\r\n    }\r\n}\r\n```\r\n\r\n**Time Complexity**: $O(n \\log n)$ in the worst case.\r\n\r\n###### Quick Sort\r\n\r\nQuick Sort is another efficient divide-and-conquer sorting algorithm that works by selecting a pivot element and partitioning the array around the pivot. It then recursively sorts the two partitions. Quick Sort is widely used due to its efficiency and is often faster than other sorting algorithms. The main part of this algorithm is the `partition` function, which rearranges the elements in the array such that all elements less than the pivot are on the left, and all elements greater than the pivot are on the right. The pivot is then placed in its correct position. Choosing the pivot is crucial for the performance of Quick Sort.\r\n\r\n```c\r\nint partition(int array[], int low, int high) {\r\n    int pivot = array[high]; // Choose the last element as the pivot\r\n    int i = low - 1; // Index of the smaller element\r\n    for (int j = low; j < high; j++) {\r\n        if (array[j] < pivot) { // If the current element is smaller than the pivot\r\n            i++; // Increment the index of the smaller element\r\n            int temp = array[i]; // Swap the current element with the smaller element\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n    }\r\n    int temp = array[i + 1]; // Swap the pivot with the element at the correct position\r\n    array[i + 1] = array[high];\r\n    array[high] = temp;\r\n    return i + 1; // Return the index of the pivot\r\n}\r\n\r\nvoid quickSort(int array[], int low, int high) {\r\n    if (low < high) {\r\n        int pi = partition(array, low, high); // Partition the array\r\n        quickSort(array, low, pi - 1); // Sort the left partition\r\n        quickSort(array, pi + 1, high); // Sort the right partition\r\n    }\r\n}\r\n```\r\n\r\n**Time Complexity**: $O(n \\log n)$ in the worst case.\r\n\r\n###### Counting Sort\r\n\r\nCounting Sort is a non-comparison-based sorting algorithm that works by counting the number of occurrences of each element in the array and using this information to place the elements in sorted order. It is efficient for small integer arrays with a limited range of values. Counting Sort has a time complexity of $O(n + k)$, where $n$ is the number of elements in the array and $k$ is the range of the input.\r\n\r\nSo, we first count the occurrences of each element in the array, then calculate the prefix sum of the counts, and finally place the elements in their correct positions.\r\n\r\n```c\r\nvoid countingSort(int array[], int size) {\r\n    int max = array[0]; // Find the maximum element in the array\r\n    for (int i = 1; i < size; i++) {\r\n        if (array[i] > max) max = array[i];\r\n    }\r\n    int count[max + 1]; // Create a count array to store the occurrences of each element\r\n    for (int i = 0; i <= max; i++) count[i] = 0; // Initialize the count array\r\n    for (int i = 0; i < size; i++) count[array[i]]++; // Count the occurrences of each element\r\n    for (int i = 1; i <= max; i++) count[i] += count[i - 1]; // Calculate the prefix sum of the counts\r\n    int output[size]; // Create an output array to store the sorted elements\r\n    for (int i = size - 1; i >= 0; i--) {\r\n        output[count[array[i]] - 1] = array[i]; // Place the element in its correct position\r\n        count[array[i]]--; // Decrement the count of the element\r\n    }\r\n    for (int i = 0; i < size; i++) array[i] = output[i]; // Copy the sorted elements back to the original array\r\n}\r\n```\r\n\r\n**Time Complexity**: $O(n + k)$ in the worst case.\r\n\r\nThese are some of the common sorting algorithms used in practice. Each algorithm has its advantages and disadvantages, and the choice of algorithm depends on the size of the dataset, the range of values, and the desired performance characteristics.\r\n\r\n## Multidimensional Arrays\r\n\r\nMultidimensional arrays are arrays that store elements in multiple dimensions, such as rows and columns. They are used to represent matrices, tables, and other complex data structures. Multidimensional arrays can be two-dimensional, three-dimensional, or even higher-dimensional.\r\n\r\n#### Two-Dimensional Arrays\r\n\r\nTwo-dimensional arrays are the most common type of multidimensional arrays. They are used to represent matrices, tables, and grids. In C, a two-dimensional array is declared as an array of arrays, where each row is an array of elements.\r\n\r\n```c\r\nint matrix[3][3] = {\r\n    {1, 2, 3},\r\n    {4, 5, 6},\r\n    {7, 8, 9}\r\n};\r\n```\r\n\r\nThe elements in a two-dimensional array are accessed using two indices: the row index and the column index.\r\n\r\n```c\r\nint element = matrix[1][2]; // Access the element at row 1, column 2\r\n```\r\n\r\n**Memory Representation**: Two-dimensional arrays are stored in contiguous memory locations, with each row stored sequentially. The memory layout is row-major order, where the elements of each row are stored together.","src/content/blog/arrays.md","750b2948754df0a6",{html:566,metadata:567},"<p>Arrays are one of the most essential components in computer science. They form the foundation for many advanced data structures and algorithms due to their simplicity and efficiency. In this article, we will explore the basics of arrays, their properties, and their applications in computer science. We will also discuss some common operations on arrays and their time complexity, along with the essential operations like searching and sorting. We will also look at some advanced topics like multidimensional arrays and dynamic arrays. Let’s get started!</p>\n<blockquote>\n<p>The programming language used in this article, and the future articles will be C, but the concepts discussed here are applicable to all of the major programming languages.</p>\n</blockquote>\n<h2 id=\"what-are-arrays\">What are Arrays?</h2>\n<p>An array is a collection of elements, typically of the same type, stored in contiguous memory locations. Arrays provide the following benefits:</p>\n<ul>\n<li><strong>Indexed Access</strong>: Retrieve elements directly using their index.</li>\n<li><strong>Fixed Size</strong>: The size of an array is predefined and cannot dynamically change in most programming languages.</li>\n</ul>\n<h4 id=\"representation-of-an-array\">Representation of an Array</h4>\n<p>Arrays can be visualized as a sequence of boxes, each containing an element. For example:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Index</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>Value</td><td>10</td><td>20</td><td>30</td><td>40</td><td>50</td></tr></tbody></table>\n<h2 id=\"properties-of-arrays\">Properties of Arrays</h2>\n<p>Arrays have the following properties:</p>\n<ol>\n<li><strong>Random Access</strong>: Elements can be accessed directly using their index in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> time.</li>\n<li><strong>Fixed Size</strong>: The size of an array is fixed and cannot be changed dynamically.</li>\n<li><strong>Homogeneous Elements</strong>: All elements in an array are of the same data type. This allows for efficient memory allocation and access.</li>\n</ol>\n<h2 id=\"memory-dynamics-of-arrays\">Memory Dynamics of Arrays</h2>\n<p>One of the key features of arrays is that they store elements in <strong>contiguous memory locations</strong>. This property allows for efficient memory access and manipulation. That is why it deserves its own section!</p>\n<blockquote>\n<p>You’ll study these in depth in an Operating Systems course, or a Computer Architecture course. But, it’s good to have a basic understanding of how memory works in the context of arrays.</p>\n</blockquote>\n<h4 id=\"contiguous-memory-allocation\">Contiguous Memory Allocation</h4>\n<p>When an array is declared, the system allocates a block of continuous memory in the RAM. This ensures that every element is located at a predictable offset from the base address. For example:</p>\n<p>In a 32-bit system, if an integer array starts at memory address <code>0x1000</code> and each integer requires 4 bytes, the array elements will occupy:</p>\n<ul>\n<li>Element at index 0: Address <code>0x1000</code></li>\n<li>Element at index 1: Address <code>0x1004</code></li>\n<li>Element at index 2: Address <code>0x1008</code>, and so on.</li>\n</ul>\n<p>This contiguous allocation allows direct indexing, where the address of an element at index i is computed as:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>Address</mtext><mo>=</mo><mtext>Base Address</mtext><mo>+</mo><mi>i</mi><mo>×</mo><mtext>Size of Element</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{Address} = \\text{Base Address} + i × \\text{Size of Element}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">Address</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord text\"><span class=\"mord\">Base Address</span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">Size of Element</span></span></span></span></span></span>\n<p>In C:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">5</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#9ABDF5\"> {</span><span style=\"color:#FF9E64\">10</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 20</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 30</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 40</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 50</span><span style=\"color:#9ABDF5\">}</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Address of array[2]: </span><span style=\"color:#C0CAF5\">%p</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> &#x26;</span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">2</span><span style=\"color:#9ABDF5\">])</span><span style=\"color:#89DDFF\">;</span></span></code></pre>\n<p><strong>Advantage</strong>: This enables <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> time complexity for accessing any element since the system does not need to traverse the array.</p>\n<h4 id=\"cache-friendliness\">Cache friendliness</h4>\n<p>Arrays are <strong>cache-friendly</strong> because their elements are stored sequentially. This allows modern processors to load multiple elements into the CPU cache in one operation (cache line loading), reducing the time required to access elements, and also improving traversal performance.</p>\n<p>For example, in a simple loop:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#FF9E64\"> 5</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    sum </span><span style=\"color:#89DDFF\">+=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[i]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p>The CPU benefits from spatial locality, as it fetches adjacent elements into the cache, reducing memory latency.</p>\n<p><strong>Performance Implication</strong>: Arrays are often faster than non-contiguous data structures like linked lists for traversal operations.</p>\n<h4 id=\"limitations-of-contiguous-allocation\">Limitations of Contiguous Allocation</h4>\n<p>While contiguous memory allocation offers benefits, it also introduces constraints:</p>\n<ol>\n<li>\n<p><strong>Fragmentation</strong>: If the array size is large, it may not find a contiguous block of memory, leading to fragmentation. For example, if the system has 10KB of free memory, but no contiguous block of 10KB is available, the array cannot be allocated.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#89DDFF\"> *</span><span style=\"color:#A9B1D6\">largeArray </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> malloc</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1000000</span><span style=\"color:#89DDFF\"> *</span><span style=\"color:#89DDFF\"> sizeof</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#A9B1D6\">largeArray </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> NULL</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Memory allocation failed due to fragmentation.</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Scenario</strong>: Imagine a system with free blocks of memory scattered across RAM, but no single block is large enough to hold the requested array.</p>\n</li>\n<li>\n<p><strong>Fixed Size</strong>: The size of an array must be declared upfront and cannot be adjusted dynamically (in static arrays). Resizing requires creating a new array and copying elements.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#89DDFF\"> *</span><span style=\"color:#A9B1D6\">array </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> malloc</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">5</span><span style=\"color:#89DDFF\"> *</span><span style=\"color:#89DDFF\"> sizeof</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">array </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> realloc</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">array</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 10</span><span style=\"color:#89DDFF\"> *</span><span style=\"color:#89DDFF\"> sizeof</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\">))</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Resizing</span></span></code></pre>\n</li>\n</ol>\n<p>This operation is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, making arrays less suitable for scenarios with frequent resizing.</p>\n<h4 id=\"buffer-overflow\">Buffer Overflow</h4>\n<p>In languages like C, improper memory management can lead to buffer overflows, where writing beyond the allocated size corrupts memory.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">5</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#9ABDF5\"> {</span><span style=\"color:#FF9E64\">10</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 20</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 30</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 40</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 50</span><span style=\"color:#9ABDF5\">}</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">6</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> 60</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Undefined behavior: accessing memory outside allocated bounds</span></span></code></pre>\n<p>Such errors are a common source of security vulnerabilities, particularly in systems programming.</p>\n<h4 id=\"comparison-with-linked-lists\">Comparison with Linked Lists</h4>\n<p>While arrays require contiguous memory, linked lists only need memory for individual nodes, which can be scattered across the heap. This makes linked lists more flexible but less cache-efficient.</p>\n<ul>\n<li><strong>Arrays</strong>: Fast access (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>), cache-friendly, fixed size, resizing requires copying.</li>\n<li><strong>Linked Lists</strong>: Slower access (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>), scattered memory, dynamic size, no buffer overflow.</li>\n</ul>\n<h4 id=\"practical-example-choosing-arrays\">Practical Example: Choosing Arrays</h4>\n<ol>\n<li><strong>When to use Arrays</strong>:\n<ul>\n<li>Frequent element access is required.</li>\n<li>Minimal resizing is expected.</li>\n<li>Predictable memory layout is needed for performance (e.g., matrix operations).</li>\n</ul>\n</li>\n<li><strong>When to avoid Arrays</strong>:\n<ul>\n<li>Memory size is unknown or fluctuates.</li>\n<li>Elements are of varying sizes.</li>\n<li>Memory fragmentation is a concern.</li>\n<li>Frequent insertions or deletions occur, as shifting elements is costly.</li>\n</ul>\n</li>\n</ol>\n<p>These are a few considerations when choosing arrays over other data structures. You have to make informed decisions based on the requirements of your application.</p>\n<h2 id=\"common-operations-on-arrays\">Common Operations on Arrays</h2>\n<h4 id=\"traversal\">Traversal</h4>\n<p>Traversing an array involves visiting each element sequentially. This is typically done using a loop, such as a <code>for</code> loop.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#FF9E64\"> 5</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Element at index </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> i</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#7AA2F7\">i</span><span style=\"color:#9ABDF5\">])</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Time Complexity</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is the number of elements in the array.</p>\n<h4 id=\"insertion\">Insertion</h4>\n<p>Inserting an element into an array involves shifting elements to accommodate the new value. This can be done at the beginning, middle, or end of the array.</p>\n<p>The following piece of code inserts a value at the second index in the array:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#A9B1D6\"> position </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> value </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 25</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> size</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#A9B1D6\"> position</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> i</span><span style=\"color:#89DDFF\">--</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">    array</span><span style=\"color:#9ABDF5\">[i] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[i </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">position</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">size</span><span style=\"color:#89DDFF\">++;</span></span></code></pre>\n<p>Adding an element at the end of the array is simpler and faster, as it does not require shifting elements. It can be done in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> time.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">size</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> value</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">size</span><span style=\"color:#89DDFF\">++;</span></span></code></pre>\n<p><strong>Time Complexity</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> for inserting at the beginning or middle, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> for inserting at the end.</p>\n<h4 id=\"deletion\">Deletion</h4>\n<p>Deleting an element from an array involves shifting elements to fill the gap left by the removed value. Similar to insertion, deletion can occur at any position in the array.</p>\n<p>The following code snippet deletes the element at the third index:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#A9B1D6\"> position </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 3</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> position</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#A9B1D6\"> size </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">    array</span><span style=\"color:#9ABDF5\">[i] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">size</span><span style=\"color:#89DDFF\">--;</span></span></code></pre>\n<p>Deleting the last element is straightforward and can be done in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> time.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#A9B1D6\">size</span><span style=\"color:#89DDFF\">--;</span></span></code></pre>\n<p><strong>Time Complexity</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> for deleting from the beginning or middle, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> for deleting from the end.</p>\n<h4 id=\"searching\">Searching</h4>\n<p>Searching an array involves finding the index of a specific element. This can be done using linear search or binary search, depending on the array’s properties. Linear search is used for unsorted arrays, while binary search is used for sorted arrays.</p>\n<h6 id=\"linear-search\">Linear Search</h6>\n<p>Linear search involves traversing the array sequentially until the desired element is found.</p>\n<p>The following code snippet searches for the value <code>30</code> in the array:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#A9B1D6\"> target </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 30</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> found </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#A9B1D6\"> size</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[i] </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#9ABDF5\"> target) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Found at index </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> i</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        found </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        break</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">!</span><span style=\"color:#A9B1D6\">found</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#7AA2F7\"> printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Not found</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span></code></pre>\n<p><strong>Time Complexity</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> for linear search.</p>\n<h6 id=\"binary-search\">Binary Search</h6>\n<p>Binary search is a more efficient search algorithm that requires the array to be sorted. It works by repeatedly dividing the search interval in half.</p>\n<p>For an explanation, imagine this scenario.</p>\n<p>Suppose you want to search an element in a dictionary. You already know that the words are alphabetically sorted in the array.</p>\n<p>So you first go in the middle of the dictionary to look for the word you want to search for. Subconciously, you match the first letter then decide to go to the left or right side of the dictionary.</p>\n<p>Most of the times, you unconsciously divide the dictionary into two halves and search in the half where the word might be present. This is the essence of binary search.</p>\n<p>For a sorted array in C, it looks like this:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#A9B1D6\"> target </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 30</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> low </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> high </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> size </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> mid</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // low and high are the search interval, the lowest and highest index in the array</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">while</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#A9B1D6\">low </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#A9B1D6\"> high</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    mid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> low </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#9ABDF5\"> (high </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#9ABDF5\"> low) </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Calculate the middle index</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[mid] </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#9ABDF5\"> target) {</span><span style=\"color:#51597D;font-style:italic\"> // Element found</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Found at index </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> mid</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#BB9AF7\"> if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[mid] </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> target) {</span><span style=\"color:#51597D;font-style:italic\"> // Search in the right half, the target is greater than the middle element</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        low </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> mid </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#9ABDF5\"> {</span><span style=\"color:#51597D;font-style:italic\"> // Search in the left half, the target is smaller than the middle element</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        high </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> mid </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Time Complexity</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> for binary search. This is because we are dividing the search interval in half at each step.</p>\n<h4 id=\"sorting\">Sorting</h4>\n<p>Sorting an array involves arranging its elements in a specific order, such as ascending or descending. Sorting is a fundamental operation in computer science and is used in various algorithms and applications. There are several sorting algorithms, each with its advantages and disadvantages. I will list down the most common ones:</p>\n<ol>\n<li><strong>Bubble Sort</strong>: Simple and inefficient, with a time complexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li><strong>Selection Sort</strong>: Simple and inefficient, with a time complexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li><strong>Insertion Sort</strong>: Simple and efficient for small datasets, with a time complexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li><strong>Merge Sort</strong>: Efficient and stable, with a time complexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li><strong>Quick Sort</strong>: Efficient and widely used, with a time complexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</li>\n<li><strong>Counting Sort</strong>: Efficient for small integer arrays, with a time complexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n + k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span>. (where k is the range of the input)</li>\n</ol>\n<p>Lets cover all these sorting algorithms one by one!</p>\n<h6 id=\"bubble-sort\">Bubble Sort</h6>\n<p>Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">void</span><span style=\"color:#7AA2F7\"> bubbleSort</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#E0AF68\"> array</span><span style=\"color:#9D7CD8;font-style:italic\">[]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#E0AF68\"> size</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> size </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> j </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> j </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> size </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> j</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[j] </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[j </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">]) {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">                int</span><span style=\"color:#9ABDF5\"> temp </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[j]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Store the current element in a temporary variable</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">                array</span><span style=\"color:#9ABDF5\">[j] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[j </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Swap the current element with the next element</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">                array</span><span style=\"color:#9ABDF5\">[j </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> temp</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Swap the next element with the current element, completing the swap</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">            }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Time Complexity</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> in the worst case.</p>\n<h6 id=\"selection-sort\">Selection Sort</h6>\n<p>Selection Sort is another simple sorting algorithm that works by repeatedly finding the minimum element from the unsorted part of the array and swapping it with the first unsorted element. So, first you find the smallest element and swap it with the first element, then you find the second smallest element and swap it with the second element, and so on.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">void</span><span style=\"color:#7AA2F7\"> selectionSort</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#E0AF68\"> array</span><span style=\"color:#9D7CD8;font-style:italic\">[]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#E0AF68\"> size</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> size </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        int</span><span style=\"color:#9ABDF5\"> minIndex </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Assume the current element is the minimum</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> j </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> j </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> size</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> j</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[j] </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[minIndex]) {</span><span style=\"color:#51597D;font-style:italic\"> // Find the minimum element in the unsorted part of the array</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">                minIndex </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> j</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Update the index of the minimum element</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">            }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Swap the current element with the minimum element</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        int</span><span style=\"color:#9ABDF5\"> temp </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[i]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">        array</span><span style=\"color:#9ABDF5\">[i] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[minIndex]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">        array</span><span style=\"color:#9ABDF5\">[minIndex] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> temp</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Time Complexity</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> in the worst case.</p>\n<h6 id=\"insertion-sort\">Insertion Sort</h6>\n<p>Insertion Sort is a simple sorting algorithm that builds the final sorted array one element at a time. It works by taking one element from the unsorted part of the array and inserting it into its correct position in the sorted part of the array.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">void</span><span style=\"color:#7AA2F7\"> insertionSort</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#E0AF68\"> array</span><span style=\"color:#9D7CD8;font-style:italic\">[]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#E0AF68\"> size</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> size</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        int</span><span style=\"color:#9ABDF5\"> key </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[i]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Store the current element</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        int</span><span style=\"color:#9ABDF5\"> j </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Index of the last element in the sorted part of the array</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        while</span><span style=\"color:#9ABDF5\"> (j </span><span style=\"color:#BB9AF7\">>=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#BB9AF7\"> &#x26;&#x26;</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[j] </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#9ABDF5\"> key) {</span><span style=\"color:#51597D;font-style:italic\"> // Move elements greater than the key to the right</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            array</span><span style=\"color:#9ABDF5\">[j </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[j]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Shift the element to the right</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">            j</span><span style=\"color:#89DDFF\">--;</span><span style=\"color:#51597D;font-style:italic\"> // Move to the previous element</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">        array</span><span style=\"color:#9ABDF5\">[j </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> key</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Insert the key into its correct position</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Time Complexity</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> in the worst case.</p>\n<h6 id=\"merge-sort\">Merge Sort</h6>\n<p>Merge Sort is a divide-and-conquer algorithm that divides the array into two halves, sorts each half separately, and then merges them back together. It is an efficient and stable sorting algorithm with a time complexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>. The main part of this algorithm is the <code>merge</code> function, which merges two sorted arrays into a single sorted array.</p>\n<p>The way the merge function works is:</p>\n<ol>\n<li>Create two temporary arrays <code>L</code> and <code>R</code> to store the left and right halves of the array.</li>\n<li>Copy the elements from the original array into the temporary arrays.</li>\n<li>Merge the two arrays back into the original array in sorted order.</li>\n</ol>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">void</span><span style=\"color:#7AA2F7\"> merge</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#E0AF68\"> array</span><span style=\"color:#9D7CD8;font-style:italic\">[]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#E0AF68\"> left</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#E0AF68\"> mid</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#E0AF68\"> right</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> n1 </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> mid </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#9ABDF5\"> left </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Size of the left array</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> n2 </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> right </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#9ABDF5\"> mid</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Size of the right array</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#C0CAF5\"> L</span><span style=\"color:#9ABDF5\">[n1]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> R</span><span style=\"color:#9ABDF5\">[n2]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Temporary arrays to store the left and right halves</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> n1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) </span><span style=\"color:#C0CAF5\">L</span><span style=\"color:#9ABDF5\">[i] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[left </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#9ABDF5\"> i]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Copy elements to the left array</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> j </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> j </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> n2</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> j</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) </span><span style=\"color:#C0CAF5\">R</span><span style=\"color:#9ABDF5\">[j] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[mid </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#9ABDF5\"> j]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Copy elements to the right array</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#9ABDF5\"> j </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#9ABDF5\"> k </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> left</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Initialize indices for the left, right, and original arrays</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    while</span><span style=\"color:#9ABDF5\"> (i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> n1 </span><span style=\"color:#BB9AF7\">&#x26;&#x26;</span><span style=\"color:#9ABDF5\"> j </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> n2) {</span><span style=\"color:#51597D;font-style:italic\"> // Merge the two arrays</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#C0CAF5\">L</span><span style=\"color:#9ABDF5\">[i] </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#C0CAF5\"> R</span><span style=\"color:#9ABDF5\">[j]) </span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[k</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> L</span><span style=\"color:#9ABDF5\">[i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // If the left element is smaller, copy it to the original array</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        else</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[k</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> R</span><span style=\"color:#9ABDF5\">[j</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // If the right element is smaller, copy it to the original array</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    while</span><span style=\"color:#9ABDF5\"> (i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> n1) </span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[k</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> L</span><span style=\"color:#9ABDF5\">[i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Copy the remaining elements from the left array</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    while</span><span style=\"color:#9ABDF5\"> (j </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> n2) </span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[k</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> R</span><span style=\"color:#9ABDF5\">[j</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Copy the remaining elements from the right array</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">void</span><span style=\"color:#7AA2F7\"> mergeSort</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#E0AF68\"> array</span><span style=\"color:#9D7CD8;font-style:italic\">[]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#E0AF68\"> left</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#E0AF68\"> right</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (left </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> right) {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        int</span><span style=\"color:#9ABDF5\"> mid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> left </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#9ABDF5\"> (right </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#9ABDF5\"> left) </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Calculate the middle index</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        mergeSort</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">array</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> left</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> mid</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Sort the left half</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        mergeSort</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">array</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> mid </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> right</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Sort the right half</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        merge</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">array</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> left</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> mid</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> right</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Merge the two halves</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Time Complexity</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> in the worst case.</p>\n<h6 id=\"quick-sort\">Quick Sort</h6>\n<p>Quick Sort is another efficient divide-and-conquer sorting algorithm that works by selecting a pivot element and partitioning the array around the pivot. It then recursively sorts the two partitions. Quick Sort is widely used due to its efficiency and is often faster than other sorting algorithms. The main part of this algorithm is the <code>partition</code> function, which rearranges the elements in the array such that all elements less than the pivot are on the left, and all elements greater than the pivot are on the right. The pivot is then placed in its correct position. Choosing the pivot is crucial for the performance of Quick Sort.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> partition</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#E0AF68\"> array</span><span style=\"color:#9D7CD8;font-style:italic\">[]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#E0AF68\"> low</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#E0AF68\"> high</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> pivot </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[high]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Choose the last element as the pivot</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> low </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Index of the smaller element</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> j </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> low</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> j </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> high</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> j</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[j] </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> pivot) {</span><span style=\"color:#51597D;font-style:italic\"> // If the current element is smaller than the pivot</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">            i</span><span style=\"color:#89DDFF\">++;</span><span style=\"color:#51597D;font-style:italic\"> // Increment the index of the smaller element</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            int</span><span style=\"color:#9ABDF5\"> temp </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[i]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Swap the current element with the smaller element</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            array</span><span style=\"color:#9ABDF5\">[i] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[j]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            array</span><span style=\"color:#9ABDF5\">[j] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> temp</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> temp </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Swap the pivot with the element at the correct position</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">    array</span><span style=\"color:#9ABDF5\">[i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[high]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">    array</span><span style=\"color:#9ABDF5\">[high] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> temp</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Return the index of the pivot</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">void</span><span style=\"color:#7AA2F7\"> quickSort</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#E0AF68\"> array</span><span style=\"color:#9D7CD8;font-style:italic\">[]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#E0AF68\"> low</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#E0AF68\"> high</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (low </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> high) {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        int</span><span style=\"color:#9ABDF5\"> pi </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> partition</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">array</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> low</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> high</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Partition the array</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        quickSort</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">array</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> low</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> pi </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Sort the left partition</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        quickSort</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">array</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> pi </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> high</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Sort the right partition</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Time Complexity</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> in the worst case.</p>\n<h6 id=\"counting-sort\">Counting Sort</h6>\n<p>Counting Sort is a non-comparison-based sorting algorithm that works by counting the number of occurrences of each element in the array and using this information to place the elements in sorted order. It is efficient for small integer arrays with a limited range of values. Counting Sort has a time complexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n + k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is the number of elements in the array and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is the range of the input.</p>\n<p>So, we first count the occurrences of each element in the array, then calculate the prefix sum of the counts, and finally place the elements in their correct positions.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">void</span><span style=\"color:#7AA2F7\"> countingSort</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#E0AF68\"> array</span><span style=\"color:#9D7CD8;font-style:italic\">[]</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#E0AF68\"> size</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> max </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Find the maximum element in the array</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> size</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[i] </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#9ABDF5\"> max) max </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[i]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#C0CAF5\"> count</span><span style=\"color:#9ABDF5\">[max </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Create a count array to store the occurrences of each element</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#9ABDF5\"> max</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) </span><span style=\"color:#C0CAF5\">count</span><span style=\"color:#9ABDF5\">[i] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Initialize the count array</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> size</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) </span><span style=\"color:#C0CAF5\">count</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[i]]</span><span style=\"color:#89DDFF\">++;</span><span style=\"color:#51597D;font-style:italic\"> // Count the occurrences of each element</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#9ABDF5\"> max</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) </span><span style=\"color:#C0CAF5\">count</span><span style=\"color:#9ABDF5\">[i] </span><span style=\"color:#89DDFF\">+=</span><span style=\"color:#C0CAF5\"> count</span><span style=\"color:#9ABDF5\">[i </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Calculate the prefix sum of the counts</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#C0CAF5\"> output</span><span style=\"color:#9ABDF5\">[size]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Create an output array to store the sorted elements</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ABDF5\"> size </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">>=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">--</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">        output</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#C0CAF5\">count</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[i]] </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> array</span><span style=\"color:#9ABDF5\">[i]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Place the element in its correct position</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">        count</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[i]]</span><span style=\"color:#89DDFF\">--;</span><span style=\"color:#51597D;font-style:italic\"> // Decrement the count of the element</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> size</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) </span><span style=\"color:#C0CAF5\">array</span><span style=\"color:#9ABDF5\">[i] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> output</span><span style=\"color:#9ABDF5\">[i]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Copy the sorted elements back to the original array</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Time Complexity</strong>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n + k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> in the worst case.</p>\n<p>These are some of the common sorting algorithms used in practice. Each algorithm has its advantages and disadvantages, and the choice of algorithm depends on the size of the dataset, the range of values, and the desired performance characteristics.</p>\n<h2 id=\"multidimensional-arrays\">Multidimensional Arrays</h2>\n<p>Multidimensional arrays are arrays that store elements in multiple dimensions, such as rows and columns. They are used to represent matrices, tables, and other complex data structures. Multidimensional arrays can be two-dimensional, three-dimensional, or even higher-dimensional.</p>\n<h4 id=\"two-dimensional-arrays\">Two-Dimensional Arrays</h4>\n<p>Two-dimensional arrays are the most common type of multidimensional arrays. They are used to represent matrices, tables, and grids. In C, a two-dimensional array is declared as an array of arrays, where each row is an array of elements.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#C0CAF5\"> matrix</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">3</span><span style=\"color:#9ABDF5\">][</span><span style=\"color:#FF9E64\">3</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    {</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 3</span><span style=\"color:#9ABDF5\">}</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    {</span><span style=\"color:#FF9E64\">4</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 5</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 6</span><span style=\"color:#9ABDF5\">}</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    {</span><span style=\"color:#FF9E64\">7</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 8</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 9</span><span style=\"color:#9ABDF5\">}</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span><span style=\"color:#89DDFF\">;</span></span></code></pre>\n<p>The elements in a two-dimensional array are accessed using two indices: the row index and the column index.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#A9B1D6\"> element </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> matrix</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">][</span><span style=\"color:#FF9E64\">2</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // Access the element at row 1, column 2</span></span></code></pre>\n<p><strong>Memory Representation</strong>: Two-dimensional arrays are stored in contiguous memory locations, with each row stored sequentially. The memory layout is row-major order, where the elements of each row are stored together.</p>",{headings:568,localImagePaths:647,remoteImagePaths:648,frontmatter:649,imagePaths:653},[569,572,575,578,581,584,587,590,593,596,599,602,605,608,611,614,617,620,623,626,629,632,635,638,641,644],{depth:34,slug:570,text:571},"what-are-arrays","What are Arrays?",{depth:38,slug:573,text:574},"representation-of-an-array","Representation of an Array",{depth:34,slug:576,text:577},"properties-of-arrays","Properties of Arrays",{depth:34,slug:579,text:580},"memory-dynamics-of-arrays","Memory Dynamics of Arrays",{depth:38,slug:582,text:583},"contiguous-memory-allocation","Contiguous Memory Allocation",{depth:38,slug:585,text:586},"cache-friendliness","Cache friendliness",{depth:38,slug:588,text:589},"limitations-of-contiguous-allocation","Limitations of Contiguous Allocation",{depth:38,slug:591,text:592},"buffer-overflow","Buffer Overflow",{depth:38,slug:594,text:595},"comparison-with-linked-lists","Comparison with Linked Lists",{depth:38,slug:597,text:598},"practical-example-choosing-arrays","Practical Example: Choosing Arrays",{depth:34,slug:600,text:601},"common-operations-on-arrays","Common Operations on Arrays",{depth:38,slug:603,text:604},"traversal","Traversal",{depth:38,slug:606,text:607},"insertion","Insertion",{depth:38,slug:609,text:610},"deletion","Deletion",{depth:38,slug:612,text:613},"searching","Searching",{depth:396,slug:615,text:616},"linear-search","Linear Search",{depth:396,slug:618,text:619},"binary-search","Binary Search",{depth:38,slug:621,text:622},"sorting","Sorting",{depth:396,slug:624,text:625},"bubble-sort","Bubble Sort",{depth:396,slug:627,text:628},"selection-sort","Selection Sort",{depth:396,slug:630,text:631},"insertion-sort","Insertion Sort",{depth:396,slug:633,text:634},"merge-sort","Merge Sort",{depth:396,slug:636,text:637},"quick-sort","Quick Sort",{depth:396,slug:639,text:640},"counting-sort","Counting Sort",{depth:34,slug:642,text:643},"multidimensional-arrays","Multidimensional Arrays",{depth:38,slug:645,text:646},"two-dimensional-arrays","Two-Dimensional Arrays",[],[],{title:553,tags:650,date:651,description:559,author:16,thumbnail:560,series:200,draft:359,minutesRead:652},[555,220,223,556],["Date","2024-12-10T00:00:00.000Z"],"16 min read",[],"arrays.md","git-and-github",{id:655,data:657,body:663,filePath:664,digest:665,rendered:666,legacyId:701},{title:658,author:659,draft:359,date:660,description:661,featured:18,thumbnail:662},"Contributing to GitHub Repositories",{id:16,collection:17},["Date","2024-12-15T00:00:00.000Z"],"A comprehensive guide to contributing to GitHub repositories, covering cloning, forking, pull requests, and essential Git commands.","/thumbnails/contributing-to-github-repositories.png","Contributing to a GitHub repository requires an understanding of Git and collaborative workflows. This guide covers cloning, forking, pull requests, and essential Git commands, along with a list of resources if you need more help. Most of the time, cloning, forking, pull requests and basic Git commands are enough to get you going, but it's always good to have a list of resources to refer to when you need help. Let's dive in!\r\n\r\n> This article is mainly focused for the hackathon participants, and does not cover advanced Git topics. If you're looking for a more advanced Git tutorial, you can refer to the resources at the end of the article.\r\n\r\n## Table of Contents\r\n\r\n- [Initial Steps](#initial-steps)\r\n- [Cloning a Repository](#cloning-a-repository)\r\n- [Making Changes to the Project Files](#making-changes-to-the-project-files)\r\n- [Synchronizing Changes with the Remote Repository](#synchronizing-changes-with-the-remote-repository)\r\n- [Forking a Repository](#forking-a-repository)\r\n- [Submitting a Pull Request](#submitting-a-pull-request)\r\n- [Git Commands Quick Reference](#git-commands-quick-reference)\r\n- [Ending Notes and Resources](#ending-notes-and-resources)\r\n\r\n## Initial Steps\r\n\r\nBefore you can contribute to a repository, you need to find one that you're interested in. You can search for repositories on GitHub using the search bar at the top of the page. Once you've found a repository that you want to contribute to, you can follow the steps below to start contributing. I'm taking an example of my own repository here. You can replace the URL with the repository you want to contribute to.\r\n\r\nThis is how an empty repository looks like:\r\n\r\n![An empty Git repository](/blog-assets/git-and-github/empty-repo.png)\r\n\r\n## Cloning a Repository\r\n\r\n> If you're contributing to a repository owned by someone else, you need to fork the repository first. Forking is covered in a later section in the article. You can jump to the [Forking](#forking-a-repository) section first if you want to contribute to a repository owned by someone else, else you can continue reading this section.\r\n\r\nTo contribute to an open-source project in a futureproof manner, you should ideally clone the repository on your local machine. By cloning the repository, you create a local copy of the project that you can work on without affecting the original codebase. Here's how you can clone a repository:\r\n\r\n1. **Identify the Repository**: Navigate to the target repository’s page on GitHub. This repository serves as the central hub for project coordination.\r\n\r\n2. **Clone the Repository**:\r\n\r\n   - Copy the HTTPS or SSH URL from the repository’s GitHub page. The URL is typically displayed under the **Code** button.\r\n\r\n     ![Clone Repository](/blog-assets/git-and-github/clone-repo.png)\r\n\r\n   - You need to copy the URL from the repository. You can do so by clicking on the Copy button next to the URL. After you're done copying the URL, you can clone the repository using the following command:\r\n\r\n     ```bash\r\n     git clone <repository-url>\r\n     ```\r\n\r\n     For example, in my case, it is:\r\n\r\n     ```bash\r\n     git clone https://github.com/a2ys/git-blog-tutorial.git\r\n     ```\r\n\r\n3. **Navigate to the Project Directory**:\r\n\r\n   You cannot start off directly if you're not in the project directory. This is a common mistake that beginners make. You need to navigate to the project directory using the following command:\r\n\r\n   ```bash\r\n   cd repository\r\n   ```\r\n\r\n   For example, in my case, it is:\r\n\r\n   ```bash\r\n   cd git-blog-tutorial\r\n   ```\r\n\r\n   This command grants access to the project’s structure and files, ready for development. You can now make changes to the project files.\r\n\r\n## Making Changes to the Project Files\r\n\r\nAfter you're done cloning the repository and navigating to the project directory, you can start making changes to the project files. You can use any text editor or IDE to make changes to the files.\r\n\r\n1. **Create a New Branch (Optional)**:\r\n\r\n   Even though creating a new branch is optional, it is a good practice to create a new branch for every feature or bug fix that you're working on, or . This way, you can isolate your changes and work on them without affecting the main branch. You can create a new branch using the following command:\r\n\r\n   ```bash\r\n   git checkout -b <branch-name>\r\n   ```\r\n\r\n   A branch isolates your changes, enabling parallel workstreams without affecting the main branch or the work of others. You can also work on a project without making a new branch, but it is not recommended.\r\n\r\n2. **Make Edits**: Use an IDE or text editor to modify files as needed, adhering to project standards.\r\n\r\n3. **Stage Changes**:\r\n\r\n   Staging prepares changes for inclusion in the repository's history and allows you to group related changes together. This also prepares the changes for a commit. You can stage changes with the following commands:\r\n\r\n   - To stage specific files:\r\n\r\n     ```bash\r\n     git add <file-name>\r\n     ```\r\n\r\n   - To stage all updated files:\r\n\r\n     ```bash\r\n     git add .\r\n     ```\r\n\r\n4. **Commit Staged Changes**:\r\n\r\n   Now that you've staged the changes, you can commit them to the repository. Committing changes records the modifications in the repository's history. You can commit changes using the following command:\r\n\r\n   ```bash\r\n   git commit -m \"Descriptive message summarizing changes\"\r\n   ```\r\n\r\n   Example:\r\n\r\n   ```bash\r\n   git commit -m \"Refactored API endpoint for improved performance\"\r\n   ```\r\n\r\n   Descriptive commit messages enhance project transparency and maintainability. It also help the maintainers understand the changes you've made.\r\n\r\n## Synchronizing Changes with the Remote Repository\r\n\r\nTill now, you've made the changes and committed them to your local repository. Now, you need to push these changes to the remote repository. This is important because the changes you've made are only on your local machine. You need to push these changes to the remote repository so that others can see the changes you've made.\r\n\r\n1. **Push Changes**:\r\n\r\n   To push changes to a remote repository, you need to use the following command:\r\n\r\n   ```bash\r\n   git push origin <branch-name>\r\n   ```\r\n\r\n2. **Validate Updates**: Confirm the changes are reflected on GitHub by reviewing the branch’s file history or content.\r\n\r\nThis is an example of how the commands run and what are the expected messages:\r\n\r\n![Terminal Messages](/blog-assets/git-and-github/terminal-messages.png)\r\n\r\nThis is how the remote repository would look like after the changes are pushed:\r\n\r\n![Remote Repository](/blog-assets/git-and-github/remote-repository.png)\r\n\r\nYou can see the latest commit message along with the changes that were made in the commit.\r\n\r\n## Forking a Repository\r\n\r\nForking a repository is a way to create a copy of the repository in your GitHub account. This is useful when you want to contribute to a repository owned by someone else. By forking the repository, you can make changes to the repository without affecting the original repository. Here's how you can fork a repository:\r\n\r\n1. **Create a Fork**:\r\n\r\n   Click the **Fork** button on the repository’s GitHub page to copy the repository to your account. The fork button is usually located in the top right corner of the repository page.\r\n\r\n   ![Fork Button](/blog-assets/git-and-github/fork-button.png)\r\n\r\n2. **Clone the Forked Repository**:\r\n\r\n   Use the fork’s URL, it is the same as the original repository but with your username instead of the original owner's username. Navigate to [Cloning a Repository](#cloning-a-repository) section to see how you can clone the repository.\r\n\r\n3. **Link the Upstream Repository**:\r\n\r\n   > If you are not working on a production level project, you can skip this step and the next step. These are useful when the upstream repository is updated frequently and you want to keep your fork updated with the changes in the upstream repository. There is a Sync Fork button in the GitHub UI to help you with this, but it is always good to know how to do it using the command line.\r\n\r\n   To link the upstream repository, you need to add a new remote to your local repository. You can do this using the following command:\r\n\r\n   ```bash\r\n   git remote add upstream https://github.com/original-username/repository.git\r\n   ```\r\n\r\n   This linkage facilitates synchronization with the original repository. Adding the upstream remote allows you to fetch changes from the original repository and merge them into your fork. This helps keep your fork updated with the latest changes from the source repository.\r\n\r\n4. **Fetch Updates from Upstream**:\r\n\r\n   To fetch updates from the upstream repository, you can use the following command:\r\n\r\n   ```bash\r\n   git fetch upstream\r\n   git merge upstream/<branch-name>\r\n   ```\r\n\r\n   This avoids merge conflicts and ensures your work is based on the latest changes. Covering this step in detail is not in the scope of this article, but you can refer to the resources at the end of the article to learn more about this.\r\n\r\n## Submitting a Pull Request\r\n\r\nAfter you've made the changes and pushed them to the remote repository, you need to submit a pull request to the original repository. A pull request is a way to notify the maintainers of the original repository that you've made changes and that you want them to review and merge your changes. Here's how you can submit a pull request:\r\n\r\n1. **Push Your Feature Branch**:\r\n\r\n   ```bash\r\n   git push origin <branch-name>\r\n   ```\r\n\r\n2. **Create the Pull Request**:\r\n\r\n   - Go to your fork on GitHub.\r\n   - Click the **Pull Requests** tab and select **New Pull Request**.\r\n     ![New Pull Request](/blog-assets/git-and-github/new-pull-request.png)\r\n   - Choose the base repository and branch to compare against your feature branch.\r\n     ![Comparing Changes](/blog-assets/git-and-github/comparing-changes.png)\r\n   - Add a title and description to summarize the changes made in the pull request.\r\n     ![Add Title and Description](/blog-assets/git-and-github/add-title-and-description.png)\r\n\r\n3. **Submit the PR**:\r\n\r\n   - Click **Create Pull Request** and include supplementary information if necessary.\r\n\r\n4. **Respond to Feedback**: Engage with maintainers to address comments or requested changes, ensuring the PR meets project requirements.\r\n\r\n## Git Commands Quick Reference\r\n\r\n- **Clone a Repository**:\r\n\r\n  ```bash\r\n  git clone <repository-url>\r\n  ```\r\n\r\n- **Create a New Branch**:\r\n\r\n  ```bash\r\n  git checkout -b <branch-name>\r\n  ```\r\n\r\n- **Stage Changes**:\r\n\r\n  ```bash\r\n  git add .\r\n  ```\r\n\r\n- **Commit Changes**:\r\n\r\n  ```bash\r\n  git commit -m \"Message summarizing the update\"\r\n  ```\r\n\r\n- **Push Changes**:\r\n\r\n  ```bash\r\n  git push origin <branch-name>\r\n  ```\r\n\r\n- **Add Upstream Remote**:\r\n\r\n  ```bash\r\n  git remote add upstream <original-repo-url>\r\n  ```\r\n\r\n- **Fetch Updates from Upstream**:\r\n\r\n  ```bash\r\n  git fetch upstream\r\n  ```\r\n\r\n- **Pull Upstream Changes**:\r\n\r\n  ```bash\r\n  git pull upstream main\r\n  ```\r\n\r\n## Ending Notes and Resources\r\n\r\nThis blog was a brief introduction to contributing to GitHub repositories. If you want to learn more about Git and GitHub, here are some resources that you might find helpful:\r\n\r\n- **[Builders-Hut/Resources](https://github.com/Builders-Hut/Resources/blob/main/Resources/git_and_github.md)**: A short and concise guide to Git and GitHub from Aditya Jyoti under the Builders Hut repository.\r\n- **[GitHub Guides](https://guides.github.com/)**: Official guides from GitHub to help you learn more about Git and GitHub.\r\n- **[Pro Git Book](https://git-scm.com/book/en/v2)**: A comprehensive guide to Git.","src/content/blog/git-and-github.md","9ee0961b9f1da9c0",{html:667,metadata:668},"<p>Contributing to a GitHub repository requires an understanding of Git and collaborative workflows. This guide covers cloning, forking, pull requests, and essential Git commands, along with a list of resources if you need more help. Most of the time, cloning, forking, pull requests and basic Git commands are enough to get you going, but it’s always good to have a list of resources to refer to when you need help. Let’s dive in!</p>\n<blockquote>\n<p>This article is mainly focused for the hackathon participants, and does not cover advanced Git topics. If you’re looking for a more advanced Git tutorial, you can refer to the resources at the end of the article.</p>\n</blockquote>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#initial-steps\">Initial Steps</a></li>\n<li><a href=\"#cloning-a-repository\">Cloning a Repository</a></li>\n<li><a href=\"#making-changes-to-the-project-files\">Making Changes to the Project Files</a></li>\n<li><a href=\"#synchronizing-changes-with-the-remote-repository\">Synchronizing Changes with the Remote Repository</a></li>\n<li><a href=\"#forking-a-repository\">Forking a Repository</a></li>\n<li><a href=\"#submitting-a-pull-request\">Submitting a Pull Request</a></li>\n<li><a href=\"#git-commands-quick-reference\">Git Commands Quick Reference</a></li>\n<li><a href=\"#ending-notes-and-resources\">Ending Notes and Resources</a></li>\n</ul>\n<h2 id=\"initial-steps\">Initial Steps</h2>\n<p>Before you can contribute to a repository, you need to find one that you’re interested in. You can search for repositories on GitHub using the search bar at the top of the page. Once you’ve found a repository that you want to contribute to, you can follow the steps below to start contributing. I’m taking an example of my own repository here. You can replace the URL with the repository you want to contribute to.</p>\n<p>This is how an empty repository looks like:</p>\n<p><img src=\"/blog-assets/git-and-github/empty-repo.png\" alt=\"An empty Git repository\"></p>\n<h2 id=\"cloning-a-repository\">Cloning a Repository</h2>\n<blockquote>\n<p>If you’re contributing to a repository owned by someone else, you need to fork the repository first. Forking is covered in a later section in the article. You can jump to the <a href=\"#forking-a-repository\">Forking</a> section first if you want to contribute to a repository owned by someone else, else you can continue reading this section.</p>\n</blockquote>\n<p>To contribute to an open-source project in a futureproof manner, you should ideally clone the repository on your local machine. By cloning the repository, you create a local copy of the project that you can work on without affecting the original codebase. Here’s how you can clone a repository:</p>\n<ol>\n<li>\n<p><strong>Identify the Repository</strong>: Navigate to the target repository’s page on GitHub. This repository serves as the central hub for project coordination.</p>\n</li>\n<li>\n<p><strong>Clone the Repository</strong>:</p>\n<ul>\n<li>\n<p>Copy the HTTPS or SSH URL from the repository’s GitHub page. The URL is typically displayed under the <strong>Code</strong> button.</p>\n<p><img src=\"/blog-assets/git-and-github/clone-repo.png\" alt=\"Clone Repository\"></p>\n</li>\n<li>\n<p>You need to copy the URL from the repository. You can do so by clicking on the Copy button next to the URL. After you’re done copying the URL, you can clone the repository using the following command:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> clone</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">repository-ur</span><span style=\"color:#A9B1D6\">l</span><span style=\"color:#89DDFF\">></span></span></code></pre>\n<p>For example, in my case, it is:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> clone</span><span style=\"color:#9ECE6A\"> https://github.com/a2ys/git-blog-tutorial.git</span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Navigate to the Project Directory</strong>:</p>\n<p>You cannot start off directly if you’re not in the project directory. This is a common mistake that beginners make. You need to navigate to the project directory using the following command:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#0DB9D7\">cd</span><span style=\"color:#9ECE6A\"> repository</span></span></code></pre>\n<p>For example, in my case, it is:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#0DB9D7\">cd</span><span style=\"color:#9ECE6A\"> git-blog-tutorial</span></span></code></pre>\n<p>This command grants access to the project’s structure and files, ready for development. You can now make changes to the project files.</p>\n</li>\n</ol>\n<h2 id=\"making-changes-to-the-project-files\">Making Changes to the Project Files</h2>\n<p>After you’re done cloning the repository and navigating to the project directory, you can start making changes to the project files. You can use any text editor or IDE to make changes to the files.</p>\n<ol>\n<li>\n<p><strong>Create a New Branch (Optional)</strong>:</p>\n<p>Even though creating a new branch is optional, it is a good practice to create a new branch for every feature or bug fix that you’re working on, or . This way, you can isolate your changes and work on them without affecting the main branch. You can create a new branch using the following command:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> checkout</span><span style=\"color:#E0AF68\"> -b</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">branch-nam</span><span style=\"color:#A9B1D6\">e</span><span style=\"color:#89DDFF\">></span></span></code></pre>\n<p>A branch isolates your changes, enabling parallel workstreams without affecting the main branch or the work of others. You can also work on a project without making a new branch, but it is not recommended.</p>\n</li>\n<li>\n<p><strong>Make Edits</strong>: Use an IDE or text editor to modify files as needed, adhering to project standards.</p>\n</li>\n<li>\n<p><strong>Stage Changes</strong>:</p>\n<p>Staging prepares changes for inclusion in the repository’s history and allows you to group related changes together. This also prepares the changes for a commit. You can stage changes with the following commands:</p>\n<ul>\n<li>\n<p>To stage specific files:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> add</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">file-nam</span><span style=\"color:#A9B1D6\">e</span><span style=\"color:#89DDFF\">></span></span></code></pre>\n</li>\n<li>\n<p>To stage all updated files:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> add</span><span style=\"color:#9ECE6A\"> .</span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Commit Staged Changes</strong>:</p>\n<p>Now that you’ve staged the changes, you can commit them to the repository. Committing changes records the modifications in the repository’s history. You can commit changes using the following command:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> commit</span><span style=\"color:#E0AF68\"> -m</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">Descriptive message summarizing changes</span><span style=\"color:#89DDFF\">\"</span></span></code></pre>\n<p>Example:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> commit</span><span style=\"color:#E0AF68\"> -m</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">Refactored API endpoint for improved performance</span><span style=\"color:#89DDFF\">\"</span></span></code></pre>\n<p>Descriptive commit messages enhance project transparency and maintainability. It also help the maintainers understand the changes you’ve made.</p>\n</li>\n</ol>\n<h2 id=\"synchronizing-changes-with-the-remote-repository\">Synchronizing Changes with the Remote Repository</h2>\n<p>Till now, you’ve made the changes and committed them to your local repository. Now, you need to push these changes to the remote repository. This is important because the changes you’ve made are only on your local machine. You need to push these changes to the remote repository so that others can see the changes you’ve made.</p>\n<ol>\n<li>\n<p><strong>Push Changes</strong>:</p>\n<p>To push changes to a remote repository, you need to use the following command:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> push</span><span style=\"color:#9ECE6A\"> origin</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">branch-nam</span><span style=\"color:#A9B1D6\">e</span><span style=\"color:#89DDFF\">></span></span></code></pre>\n</li>\n<li>\n<p><strong>Validate Updates</strong>: Confirm the changes are reflected on GitHub by reviewing the branch’s file history or content.</p>\n</li>\n</ol>\n<p>This is an example of how the commands run and what are the expected messages:</p>\n<p><img src=\"/blog-assets/git-and-github/terminal-messages.png\" alt=\"Terminal Messages\"></p>\n<p>This is how the remote repository would look like after the changes are pushed:</p>\n<p><img src=\"/blog-assets/git-and-github/remote-repository.png\" alt=\"Remote Repository\"></p>\n<p>You can see the latest commit message along with the changes that were made in the commit.</p>\n<h2 id=\"forking-a-repository\">Forking a Repository</h2>\n<p>Forking a repository is a way to create a copy of the repository in your GitHub account. This is useful when you want to contribute to a repository owned by someone else. By forking the repository, you can make changes to the repository without affecting the original repository. Here’s how you can fork a repository:</p>\n<ol>\n<li>\n<p><strong>Create a Fork</strong>:</p>\n<p>Click the <strong>Fork</strong> button on the repository’s GitHub page to copy the repository to your account. The fork button is usually located in the top right corner of the repository page.</p>\n<p><img src=\"/blog-assets/git-and-github/fork-button.png\" alt=\"Fork Button\"></p>\n</li>\n<li>\n<p><strong>Clone the Forked Repository</strong>:</p>\n<p>Use the fork’s URL, it is the same as the original repository but with your username instead of the original owner’s username. Navigate to <a href=\"#cloning-a-repository\">Cloning a Repository</a> section to see how you can clone the repository.</p>\n</li>\n<li>\n<p><strong>Link the Upstream Repository</strong>:</p>\n<blockquote>\n<p>If you are not working on a production level project, you can skip this step and the next step. These are useful when the upstream repository is updated frequently and you want to keep your fork updated with the changes in the upstream repository. There is a Sync Fork button in the GitHub UI to help you with this, but it is always good to know how to do it using the command line.</p>\n</blockquote>\n<p>To link the upstream repository, you need to add a new remote to your local repository. You can do this using the following command:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> remote</span><span style=\"color:#9ECE6A\"> add</span><span style=\"color:#9ECE6A\"> upstream</span><span style=\"color:#9ECE6A\"> https://github.com/original-username/repository.git</span></span></code></pre>\n<p>This linkage facilitates synchronization with the original repository. Adding the upstream remote allows you to fetch changes from the original repository and merge them into your fork. This helps keep your fork updated with the latest changes from the source repository.</p>\n</li>\n<li>\n<p><strong>Fetch Updates from Upstream</strong>:</p>\n<p>To fetch updates from the upstream repository, you can use the following command:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> fetch</span><span style=\"color:#9ECE6A\"> upstream</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> merge</span><span style=\"color:#9ECE6A\"> upstream/</span><span style=\"color:#89DDFF\">&#x3C;</span><span style=\"color:#9ECE6A\">branch-nam</span><span style=\"color:#A9B1D6\">e</span><span style=\"color:#89DDFF\">></span></span></code></pre>\n<p>This avoids merge conflicts and ensures your work is based on the latest changes. Covering this step in detail is not in the scope of this article, but you can refer to the resources at the end of the article to learn more about this.</p>\n</li>\n</ol>\n<h2 id=\"submitting-a-pull-request\">Submitting a Pull Request</h2>\n<p>After you’ve made the changes and pushed them to the remote repository, you need to submit a pull request to the original repository. A pull request is a way to notify the maintainers of the original repository that you’ve made changes and that you want them to review and merge your changes. Here’s how you can submit a pull request:</p>\n<ol>\n<li>\n<p><strong>Push Your Feature Branch</strong>:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> push</span><span style=\"color:#9ECE6A\"> origin</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">branch-nam</span><span style=\"color:#A9B1D6\">e</span><span style=\"color:#89DDFF\">></span></span></code></pre>\n</li>\n<li>\n<p><strong>Create the Pull Request</strong>:</p>\n<ul>\n<li>Go to your fork on GitHub.</li>\n<li>Click the <strong>Pull Requests</strong> tab and select <strong>New Pull Request</strong>.\r\n<img src=\"/blog-assets/git-and-github/new-pull-request.png\" alt=\"New Pull Request\"></li>\n<li>Choose the base repository and branch to compare against your feature branch.\r\n<img src=\"/blog-assets/git-and-github/comparing-changes.png\" alt=\"Comparing Changes\"></li>\n<li>Add a title and description to summarize the changes made in the pull request.\r\n<img src=\"/blog-assets/git-and-github/add-title-and-description.png\" alt=\"Add Title and Description\"></li>\n</ul>\n</li>\n<li>\n<p><strong>Submit the PR</strong>:</p>\n<ul>\n<li>Click <strong>Create Pull Request</strong> and include supplementary information if necessary.</li>\n</ul>\n</li>\n<li>\n<p><strong>Respond to Feedback</strong>: Engage with maintainers to address comments or requested changes, ensuring the PR meets project requirements.</p>\n</li>\n</ol>\n<h2 id=\"git-commands-quick-reference\">Git Commands Quick Reference</h2>\n<ul>\n<li>\n<p><strong>Clone a Repository</strong>:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> clone</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">repository-ur</span><span style=\"color:#A9B1D6\">l</span><span style=\"color:#89DDFF\">></span></span></code></pre>\n</li>\n<li>\n<p><strong>Create a New Branch</strong>:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> checkout</span><span style=\"color:#E0AF68\"> -b</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">branch-nam</span><span style=\"color:#A9B1D6\">e</span><span style=\"color:#89DDFF\">></span></span></code></pre>\n</li>\n<li>\n<p><strong>Stage Changes</strong>:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> add</span><span style=\"color:#9ECE6A\"> .</span></span></code></pre>\n</li>\n<li>\n<p><strong>Commit Changes</strong>:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> commit</span><span style=\"color:#E0AF68\"> -m</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">Message summarizing the update</span><span style=\"color:#89DDFF\">\"</span></span></code></pre>\n</li>\n<li>\n<p><strong>Push Changes</strong>:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> push</span><span style=\"color:#9ECE6A\"> origin</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">branch-nam</span><span style=\"color:#A9B1D6\">e</span><span style=\"color:#89DDFF\">></span></span></code></pre>\n</li>\n<li>\n<p><strong>Add Upstream Remote</strong>:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> remote</span><span style=\"color:#9ECE6A\"> add</span><span style=\"color:#9ECE6A\"> upstream</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">original-repo-ur</span><span style=\"color:#A9B1D6\">l</span><span style=\"color:#89DDFF\">></span></span></code></pre>\n</li>\n<li>\n<p><strong>Fetch Updates from Upstream</strong>:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> fetch</span><span style=\"color:#9ECE6A\"> upstream</span></span></code></pre>\n</li>\n<li>\n<p><strong>Pull Upstream Changes</strong>:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> pull</span><span style=\"color:#9ECE6A\"> upstream</span><span style=\"color:#9ECE6A\"> main</span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"ending-notes-and-resources\">Ending Notes and Resources</h2>\n<p>This blog was a brief introduction to contributing to GitHub repositories. If you want to learn more about Git and GitHub, here are some resources that you might find helpful:</p>\n<ul>\n<li><strong><a href=\"https://github.com/Builders-Hut/Resources/blob/main/Resources/git_and_github.md\">Builders-Hut/Resources</a></strong>: A short and concise guide to Git and GitHub from Aditya Jyoti under the Builders Hut repository.</li>\n<li><strong><a href=\"https://guides.github.com/\">GitHub Guides</a></strong>: Official guides from GitHub to help you learn more about Git and GitHub.</li>\n<li><strong><a href=\"https://git-scm.com/book/en/v2\">Pro Git Book</a></strong>: A comprehensive guide to Git.</li>\n</ul>",{headings:669,localImagePaths:695,remoteImagePaths:696,frontmatter:697,imagePaths:700},[670,671,674,677,680,683,686,689,692],{depth:34,slug:45,text:46},{depth:34,slug:672,text:673},"initial-steps","Initial Steps",{depth:34,slug:675,text:676},"cloning-a-repository","Cloning a Repository",{depth:34,slug:678,text:679},"making-changes-to-the-project-files","Making Changes to the Project Files",{depth:34,slug:681,text:682},"synchronizing-changes-with-the-remote-repository","Synchronizing Changes with the Remote Repository",{depth:34,slug:684,text:685},"forking-a-repository","Forking a Repository",{depth:34,slug:687,text:688},"submitting-a-pull-request","Submitting a Pull Request",{depth:34,slug:690,text:691},"git-commands-quick-reference","Git Commands Quick Reference",{depth:34,slug:693,text:694},"ending-notes-and-resources","Ending Notes and Resources",[],[],{title:658,date:698,description:661,author:16,thumbnail:662,draft:359,minutesRead:699},["Date","2024-12-15T00:00:00.000Z"],"8 min read",[],"git-and-github.md","godel-breaks-math",{id:702,data:704,body:710,filePath:711,digest:712,rendered:713,legacyId:732},{title:705,author:706,draft:18,date:707,description:708,featured:18,thumbnail:106,series:709,seriesOrder:34},"Season 1, Act II: Gödel Breaks Math (Before Computers Even Existed)",{id:16,collection:17},["Date","2025-08-25T00:00:00.000Z"],"Incompleteness & why math alone wasn’t enough.",{id:108,collection:24},"## Introduction\r\n\r\nIn our last post, we defined computation as following a recipe, or an **algorithm**, to get from a problem to a solution. For centuries, mathematicians believed that with enough brainpower and the right set of rules (axioms), they could create a perfect, complete system of mathematics - a system that could prove or disprove any mathematical statement imaginable.\r\n\r\nThey dreamed of a \"master recipe\" for all of math.\r\n\r\nThen, in 1931, a quiet, brilliant Austrian logician named **Kurt Gödel** came along and proved that this dream was impossible. He didn't just find a problem math couldn't solve yet; he proved that there would always be problems it could never solve.\r\n\r\n## The Dream of a Perfect System\r\n\r\nImagine you have a set of fundamental truths in mathematics, like \"$1 + 1 = 2$\" or \"a straight line is the shortest distance between two points.\" These are your axioms. From these axioms, you can use the rules of logic to build up more complex truths, called theorems.\r\n\r\nThe hope was that this system would be:\r\n\r\n1. **Consistent**: It would never produce contradictions. You could never prove that $2 + 2 = 4$ and $2 + 2 = 5$.\r\n2. **Complete**: It could prove or disprove any statement you could possibly phrase in the language of math.\r\n\r\nEveryone assumed this was not only possible but the ultimate goal of mathematics. It was just a matter of finding the right axioms.\r\n\r\n## Gödel's Bombshell: The Incompleteness Theorems\r\n\r\nGödel turned this entire idea on its head. He did it by creating a mathematical statement that was brilliantly paradoxical. In simple terms, the statement he constructed said:\r\n\r\n**\"This statement cannot be proven.\"**\r\n\r\nThink about that for a second. Let's call this statement 'G'.\r\n\r\n- **What if 'G' is false?** If it's false, then its claim (\"This statement cannot be proven\") must be wrong. That would mean the statement can be proven. But if you can prove it, it must be true. This is a contradiction. So 'G' cannot be false.\r\n- **What if 'G' is true?** If it's true, then it's exactly what it says it is: a statement that cannot be proven.\r\n\r\nSo here we have it: a statement, 'G', that is true, but it is impossible to prove using the very system of mathematics it's written in.\r\n\r\nThis was Gödel's First Incompleteness Theorem. It says that for any consistent formal system of mathematics powerful enough to describe basic arithmetic, there will always be true statements that are unprovable within that system.\r\n\r\n**_Math, by its very nature, is incomplete._**\r\n\r\n## Why This Matters for Computers\r\n\r\nGödel published this before modern computers even existed, but he had unknowingly discovered a fundamental limit of what they could ever hope to achieve.\r\n\r\nRemember, computation is just executing an algorithm - a set of logical steps. Computers are machines that run on formal systems, just like the one Gödel was studying.\r\n\r\nHis work implied that you could never create a computer program that could solve _all_ mathematical problems. No matter how clever your algorithm, there would always be questions it simply couldn't answer. It's not a matter of not having enough processing power or time; it's a fundamental wall built into the fabric of logic itself.\r\n\r\nMath alone wasn't going to be enough to build the all-powerful thinking machines people might have imagined. The search was on for a new way to think about what is, and isn't, computable. This search would lead others, like Alonzo Church and Alan Turing, to invent their own models of computation, which we'll explore next.","src/content/blog/godel-breaks-math.md","9917e578be2db8e2",{html:714,metadata:715},"<h2 id=\"introduction\">Introduction</h2>\n<p>In our last post, we defined computation as following a recipe, or an <strong>algorithm</strong>, to get from a problem to a solution. For centuries, mathematicians believed that with enough brainpower and the right set of rules (axioms), they could create a perfect, complete system of mathematics - a system that could prove or disprove any mathematical statement imaginable.</p>\n<p>They dreamed of a “master recipe” for all of math.</p>\n<p>Then, in 1931, a quiet, brilliant Austrian logician named <strong>Kurt Gödel</strong> came along and proved that this dream was impossible. He didn’t just find a problem math couldn’t solve yet; he proved that there would always be problems it could never solve.</p>\n<h2 id=\"the-dream-of-a-perfect-system\">The Dream of a Perfect System</h2>\n<p>Imagine you have a set of fundamental truths in mathematics, like \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">1 + 1 = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>\" or “a straight line is the shortest distance between two points.” These are your axioms. From these axioms, you can use the rules of logic to build up more complex truths, called theorems.</p>\n<p>The hope was that this system would be:</p>\n<ol>\n<li><strong>Consistent</strong>: It would never produce contradictions. You could never prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>+</mo><mn>2</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">2 + 2 = 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>+</mo><mn>2</mn><mo>=</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">2 + 2 = 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span>.</li>\n<li><strong>Complete</strong>: It could prove or disprove any statement you could possibly phrase in the language of math.</li>\n</ol>\n<p>Everyone assumed this was not only possible but the ultimate goal of mathematics. It was just a matter of finding the right axioms.</p>\n<h2 id=\"gödels-bombshell-the-incompleteness-theorems\">Gödel’s Bombshell: The Incompleteness Theorems</h2>\n<p>Gödel turned this entire idea on its head. He did it by creating a mathematical statement that was brilliantly paradoxical. In simple terms, the statement he constructed said:</p>\n<p><strong>“This statement cannot be proven.”</strong></p>\n<p>Think about that for a second. Let’s call this statement ‘G’.</p>\n<ul>\n<li><strong>What if ‘G’ is false?</strong> If it’s false, then its claim (“This statement cannot be proven”) must be wrong. That would mean the statement can be proven. But if you can prove it, it must be true. This is a contradiction. So ‘G’ cannot be false.</li>\n<li><strong>What if ‘G’ is true?</strong> If it’s true, then it’s exactly what it says it is: a statement that cannot be proven.</li>\n</ul>\n<p>So here we have it: a statement, ‘G’, that is true, but it is impossible to prove using the very system of mathematics it’s written in.</p>\n<p>This was Gödel’s First Incompleteness Theorem. It says that for any consistent formal system of mathematics powerful enough to describe basic arithmetic, there will always be true statements that are unprovable within that system.</p>\n<p><strong><em>Math, by its very nature, is incomplete.</em></strong></p>\n<h2 id=\"why-this-matters-for-computers\">Why This Matters for Computers</h2>\n<p>Gödel published this before modern computers even existed, but he had unknowingly discovered a fundamental limit of what they could ever hope to achieve.</p>\n<p>Remember, computation is just executing an algorithm - a set of logical steps. Computers are machines that run on formal systems, just like the one Gödel was studying.</p>\n<p>His work implied that you could never create a computer program that could solve <em>all</em> mathematical problems. No matter how clever your algorithm, there would always be questions it simply couldn’t answer. It’s not a matter of not having enough processing power or time; it’s a fundamental wall built into the fabric of logic itself.</p>\n<p>Math alone wasn’t going to be enough to build the all-powerful thinking machines people might have imagined. The search was on for a new way to think about what is, and isn’t, computable. This search would lead others, like Alonzo Church and Alan Turing, to invent their own models of computation, which we’ll explore next.</p>",{headings:716,localImagePaths:727,remoteImagePaths:728,frontmatter:729,imagePaths:731},[717,718,721,724],{depth:34,slug:117,text:118},{depth:34,slug:719,text:720},"the-dream-of-a-perfect-system","The Dream of a Perfect System",{depth:34,slug:722,text:723},"gödels-bombshell-the-incompleteness-theorems","Gödel’s Bombshell: The Incompleteness Theorems",{depth:34,slug:725,text:726},"why-this-matters-for-computers","Why This Matters for Computers",[],[],{title:705,date:730,description:708,author:16,series:108,thumbnail:106,seriesOrder:34,minutesRead:243},["Date","2025-08-25T00:00:00.000Z"],[],"godel-breaks-math.md","how-os-decides-what-to-run-next",{id:733,data:735,body:742,filePath:743,digest:744,rendered:745,legacyId:800},{title:736,author:737,draft:18,date:738,description:739,featured:18,thumbnail:740,series:741,seriesOrder:38},"How Your OS Decides Which Program Gets to Run Next",{id:16,collection:17},["Date","2025-05-21T00:00:00.000Z"],"A deep dive into how operating systems manage multitasking and decide which program gets to run next.","/thumbnails/scheduling-intro.png",{id:147,collection:24},"## Introduction\r\n\r\n> This post is kind of like an introduction to CPU scheduling, which we will discuss in detail in a future post. You can read this for a basic understanding of how CPU scheduling works, and how it is done in the operating system.\r\n\r\nIn our previous posts, we explored how your computer creates the illusion of running multiple programs simultaneously and the critical difference between a static program and an active process. Now, let's peek behind the curtain at the decision-maker responsible for this juggling act: **the CPU scheduler**.\r\n\r\n## Table of Contents\r\n\r\n- [CPU Scheduler: The Traffic Controller of Your Computer](#cpu-scheduler-the-traffic-controller-of-your-computer)\r\n- [What Makes a Good Scheduling Algorithm?](#what-makes-a-good-scheduling-algorithm)\r\n- [Common Scheduling Algorithms](#common-scheduling-algorithms)\r\n  - [1. First-Come, First-Served (FCFS)](#1-first-come-first-served-fcfs)\r\n  - [2. Shortest Job Next (SJN)](#2-shortest-job-next-sjn)\r\n  - [3. Round Robin (RR)](#3-round-robin-rr)\r\n  - [4. Priority Scheduling](#4-priority-scheduling)\r\n  - [5. Multilevel Queue Scheduling](#5-multilevel-queue-scheduling)\r\n  - [6. Multilevel Feedback Queue Scheduling](#6-multilevel-feedback-queue-scheduling)\r\n- [Modern Scheduling in Practice](#modern-scheduling-in-practice)\r\n  - [Linux's Completely Fair Scheduler (CFS)](#linuxs-completely-fair-scheduler-cfs)\r\n  - [Windows 10/11 Scheduler](#windows-1011-scheduler)\r\n  - [macOS Scheduler](#macos-scheduler)\r\n- [The Impact on Your Computing Experience](#the-impact-on-your-computing-experience)\r\n- [Coming Up Next](#coming-up-next)\r\n\r\n## CPU Scheduler: The Traffic Controller of Your Computer\r\n\r\nImagine your CPU as a single-lane bridge that can only let one car (process) cross at a time. With dozens or even hundreds of processes wanting to use the CPU, something needs to decide which process goes next and for how long. That's your CPU scheduler.\r\n\r\nThe scheduler has a challenging job: it must make decisions quickly (often in microseconds), balance competing objectives, and ensure all processes get their fair share of CPU time — all while keeping your computer responsive to your inputs.\r\n\r\n## What Makes a Good Scheduling Algorithm?\r\n\r\nBefore diving into specific algorithms, let's understand what we're optimizing for:\r\n\r\n- **CPU Utilization**: Keep the CPU as busy as possible\r\n- **Throughput**: Complete as many processes as possible per time unit\r\n- **Turnaround Time**: Minimize the time from process submission to completion\r\n- **Waiting Time**: Minimize time processes spend waiting in the ready queue\r\n- **Response Time**: Minimize delay between request and first response (crucial for interactive systems)\r\n- **Fairness**: Ensure each process gets its fair share of CPU time\r\n\r\nUnfortunately, these goals often conflict. Optimizing for one might hurt another, leading to different schedulers for different scenarios.\r\n\r\n## Common Scheduling Algorithms\r\n\r\n> We will discuss these along with the mathematical formulas used to calculate the performance of these algorithms in a future post. This is just an overview of the algorithms.\r\n\r\nLet's look at some of the most common scheduling algorithms, their pros and cons, and when to use them.\r\n\r\n#### 1. First-Come, First-Served (FCFS)\r\n\r\n- **How It Works**: Processes are executed in the order they arrive in the ready queue.\r\n- **Pros**: Simple and easy to implement.\r\n- **Cons**: Can lead to the \"convoy effect,\" where short processes wait for long ones, increasing average waiting time.\r\n- **Use Case**: Suitable for batch systems where all processes are similar in length.\r\n\r\n#### 2. Shortest Job Next (SJN)\r\n\r\n- **How It Works**: The process with the smallest execution time is selected next.\r\n- **Pros**: Minimizes average waiting time and turnaround time.\r\n- **Cons**: Difficult to predict execution time; can lead to starvation for longer processes.\r\n- **Use Case**: Ideal for batch systems where execution times are known in advance.\r\n\r\n#### 3. Round Robin (RR)\r\n\r\n- **How It Works**: Each process gets a fixed time slice (quantum) in a cyclic order.\r\n- **Pros**: Fair and responsive; suitable for time-sharing systems.\r\n- **Cons**: Can lead to high turnaround time if the quantum is too small; context switching overhead.\r\n- **Use Case**: Ideal for interactive systems where responsiveness is crucial.\r\n\r\n#### 4. Priority Scheduling\r\n\r\n- **How It Works**: Each process is assigned a priority, and the highest-priority process is executed\r\n- - **Pros**: Can be preemptive or non-preemptive; allows for prioritization of critical tasks.\r\n- **Cons**: Can lead to starvation for low-priority processes; requires careful tuning of priorities.\r\n- **Use Case**: Suitable for real-time systems where certain tasks must be prioritized.\r\n\r\n#### 5. Multilevel Queue Scheduling\r\n\r\n- **How It Works**: Processes are divided into multiple queues based on priority or type, each with its own scheduling algorithm.\r\n- **Pros**: Flexible and allows for different scheduling strategies for different types of processes.\r\n- **Cons**: Complex to implement and manage; can lead to starvation if not designed carefully.\r\n- **Use Case**: Ideal for systems with a mix of interactive and batch processes.\r\n\r\n#### 6. Multilevel Feedback Queue Scheduling\r\n\r\n- **How It Works**: Similar to multilevel queue scheduling, but processes can move between queues based on their behavior and requirements.\r\n- **Pros**: Highly flexible and adaptive; can optimize for both short and long processes.\r\n- **Cons**: Complex to implement and manage; requires careful tuning of parameters.\r\n- **Use Case**: Suitable for systems with a wide variety of process types and requirements.\r\n\r\n## Modern Scheduling in Practice\r\n\r\nReal-world schedulers are significantly more complex than these textbook algorithms. Let's look at some examples:\r\n\r\n#### Linux's Completely Fair Scheduler (CFS)\r\n\r\nInstead of fixed time slices, CFS aims to give each process a \"fair\" share of CPU time based on a weighted fair queueing approach:\r\n\r\n1. Each process gets CPU time proportional to its weight (nice value)\r\n2. CFS tracks \"virtual runtime\" for each process\r\n3. The process with the lowest virtual runtime runs next\r\n4. Red-black trees provide efficient process selection\r\n\r\nThis elegant approach automatically adapts to the number of processes and provides good interactive performance while being fair to all processes.\r\n\r\n#### Windows 10/11 Scheduler\r\n\r\nWindows uses a priority-based preemptive scheduler with these distinctive features:\r\n\r\n1. 32 priority levels (0-31)\r\n2. Dynamic boosting of foreground applications\r\n3. Different queues for real-time and variable priority processes\r\n4. Priority inheritance to address priority inversion\r\n\r\n#### macOS Scheduler\r\n\r\nApple's macOS uses a sophisticated scheduler that:\r\n\r\n1. Works on a priority system from 0-127\r\n2. Uses thread aging to prevent starvation\r\n3. Implements special handling for UI threads to keep interfaces responsive\r\n4. Employs task coalescence to improve power efficiency\r\n\r\n## The Impact on Your Computing Experience\r\n\r\nThe next time your computer feels sluggish when running too many applications, remember this: the scheduling algorithm is desperately trying to share CPU time fairly while keeping everything responsive. Some observations from everyday computing:\r\n\r\n1. **Why your computer feels faster right after booting**: Fewer processes competing for CPU time\r\n2. **Why browser tabs \"sleep\"**: Modern browsers deprioritize inactive tabs to save resources\r\n3. **Why background file copying slows down when you start using the computer**: Interactive processes get priority boosts\r\n4. **Why real-time applications like audio production software need special settings**: They need guaranteed CPU time, not just fair sharing\r\n\r\n## Coming Up Next\r\n\r\nNow that we understand how processes get their turn on the CPU, our next post will dive into the critical interface between user programs and the operating system: **System Calls**. We'll explore how your everyday applications request services from the kernel and why this boundary is essential for security and stability.","src/content/blog/how-os-decides-what-to-run-next.md","a9a0003441c9cda0",{html:746,metadata:747},"<h2 id=\"introduction\">Introduction</h2>\n<blockquote>\n<p>This post is kind of like an introduction to CPU scheduling, which we will discuss in detail in a future post. You can read this for a basic understanding of how CPU scheduling works, and how it is done in the operating system.</p>\n</blockquote>\n<p>In our previous posts, we explored how your computer creates the illusion of running multiple programs simultaneously and the critical difference between a static program and an active process. Now, let’s peek behind the curtain at the decision-maker responsible for this juggling act: <strong>the CPU scheduler</strong>.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#cpu-scheduler-the-traffic-controller-of-your-computer\">CPU Scheduler: The Traffic Controller of Your Computer</a></li>\n<li><a href=\"#what-makes-a-good-scheduling-algorithm\">What Makes a Good Scheduling Algorithm?</a></li>\n<li><a href=\"#common-scheduling-algorithms\">Common Scheduling Algorithms</a>\n<ul>\n<li><a href=\"#1-first-come-first-served-fcfs\">1. First-Come, First-Served (FCFS)</a></li>\n<li><a href=\"#2-shortest-job-next-sjn\">2. Shortest Job Next (SJN)</a></li>\n<li><a href=\"#3-round-robin-rr\">3. Round Robin (RR)</a></li>\n<li><a href=\"#4-priority-scheduling\">4. Priority Scheduling</a></li>\n<li><a href=\"#5-multilevel-queue-scheduling\">5. Multilevel Queue Scheduling</a></li>\n<li><a href=\"#6-multilevel-feedback-queue-scheduling\">6. Multilevel Feedback Queue Scheduling</a></li>\n</ul>\n</li>\n<li><a href=\"#modern-scheduling-in-practice\">Modern Scheduling in Practice</a>\n<ul>\n<li><a href=\"#linuxs-completely-fair-scheduler-cfs\">Linux’s Completely Fair Scheduler (CFS)</a></li>\n<li><a href=\"#windows-1011-scheduler\">Windows 10/11 Scheduler</a></li>\n<li><a href=\"#macos-scheduler\">macOS Scheduler</a></li>\n</ul>\n</li>\n<li><a href=\"#the-impact-on-your-computing-experience\">The Impact on Your Computing Experience</a></li>\n<li><a href=\"#coming-up-next\">Coming Up Next</a></li>\n</ul>\n<h2 id=\"cpu-scheduler-the-traffic-controller-of-your-computer\">CPU Scheduler: The Traffic Controller of Your Computer</h2>\n<p>Imagine your CPU as a single-lane bridge that can only let one car (process) cross at a time. With dozens or even hundreds of processes wanting to use the CPU, something needs to decide which process goes next and for how long. That’s your CPU scheduler.</p>\n<p>The scheduler has a challenging job: it must make decisions quickly (often in microseconds), balance competing objectives, and ensure all processes get their fair share of CPU time — all while keeping your computer responsive to your inputs.</p>\n<h2 id=\"what-makes-a-good-scheduling-algorithm\">What Makes a Good Scheduling Algorithm?</h2>\n<p>Before diving into specific algorithms, let’s understand what we’re optimizing for:</p>\n<ul>\n<li><strong>CPU Utilization</strong>: Keep the CPU as busy as possible</li>\n<li><strong>Throughput</strong>: Complete as many processes as possible per time unit</li>\n<li><strong>Turnaround Time</strong>: Minimize the time from process submission to completion</li>\n<li><strong>Waiting Time</strong>: Minimize time processes spend waiting in the ready queue</li>\n<li><strong>Response Time</strong>: Minimize delay between request and first response (crucial for interactive systems)</li>\n<li><strong>Fairness</strong>: Ensure each process gets its fair share of CPU time</li>\n</ul>\n<p>Unfortunately, these goals often conflict. Optimizing for one might hurt another, leading to different schedulers for different scenarios.</p>\n<h2 id=\"common-scheduling-algorithms\">Common Scheduling Algorithms</h2>\n<blockquote>\n<p>We will discuss these along with the mathematical formulas used to calculate the performance of these algorithms in a future post. This is just an overview of the algorithms.</p>\n</blockquote>\n<p>Let’s look at some of the most common scheduling algorithms, their pros and cons, and when to use them.</p>\n<h4 id=\"1-first-come-first-served-fcfs\">1. First-Come, First-Served (FCFS)</h4>\n<ul>\n<li><strong>How It Works</strong>: Processes are executed in the order they arrive in the ready queue.</li>\n<li><strong>Pros</strong>: Simple and easy to implement.</li>\n<li><strong>Cons</strong>: Can lead to the “convoy effect,” where short processes wait for long ones, increasing average waiting time.</li>\n<li><strong>Use Case</strong>: Suitable for batch systems where all processes are similar in length.</li>\n</ul>\n<h4 id=\"2-shortest-job-next-sjn\">2. Shortest Job Next (SJN)</h4>\n<ul>\n<li><strong>How It Works</strong>: The process with the smallest execution time is selected next.</li>\n<li><strong>Pros</strong>: Minimizes average waiting time and turnaround time.</li>\n<li><strong>Cons</strong>: Difficult to predict execution time; can lead to starvation for longer processes.</li>\n<li><strong>Use Case</strong>: Ideal for batch systems where execution times are known in advance.</li>\n</ul>\n<h4 id=\"3-round-robin-rr\">3. Round Robin (RR)</h4>\n<ul>\n<li><strong>How It Works</strong>: Each process gets a fixed time slice (quantum) in a cyclic order.</li>\n<li><strong>Pros</strong>: Fair and responsive; suitable for time-sharing systems.</li>\n<li><strong>Cons</strong>: Can lead to high turnaround time if the quantum is too small; context switching overhead.</li>\n<li><strong>Use Case</strong>: Ideal for interactive systems where responsiveness is crucial.</li>\n</ul>\n<h4 id=\"4-priority-scheduling\">4. Priority Scheduling</h4>\n<ul>\n<li><strong>How It Works</strong>: Each process is assigned a priority, and the highest-priority process is executed</li>\n<li>\n<ul>\n<li><strong>Pros</strong>: Can be preemptive or non-preemptive; allows for prioritization of critical tasks.</li>\n</ul>\n</li>\n<li><strong>Cons</strong>: Can lead to starvation for low-priority processes; requires careful tuning of priorities.</li>\n<li><strong>Use Case</strong>: Suitable for real-time systems where certain tasks must be prioritized.</li>\n</ul>\n<h4 id=\"5-multilevel-queue-scheduling\">5. Multilevel Queue Scheduling</h4>\n<ul>\n<li><strong>How It Works</strong>: Processes are divided into multiple queues based on priority or type, each with its own scheduling algorithm.</li>\n<li><strong>Pros</strong>: Flexible and allows for different scheduling strategies for different types of processes.</li>\n<li><strong>Cons</strong>: Complex to implement and manage; can lead to starvation if not designed carefully.</li>\n<li><strong>Use Case</strong>: Ideal for systems with a mix of interactive and batch processes.</li>\n</ul>\n<h4 id=\"6-multilevel-feedback-queue-scheduling\">6. Multilevel Feedback Queue Scheduling</h4>\n<ul>\n<li><strong>How It Works</strong>: Similar to multilevel queue scheduling, but processes can move between queues based on their behavior and requirements.</li>\n<li><strong>Pros</strong>: Highly flexible and adaptive; can optimize for both short and long processes.</li>\n<li><strong>Cons</strong>: Complex to implement and manage; requires careful tuning of parameters.</li>\n<li><strong>Use Case</strong>: Suitable for systems with a wide variety of process types and requirements.</li>\n</ul>\n<h2 id=\"modern-scheduling-in-practice\">Modern Scheduling in Practice</h2>\n<p>Real-world schedulers are significantly more complex than these textbook algorithms. Let’s look at some examples:</p>\n<h4 id=\"linuxs-completely-fair-scheduler-cfs\">Linux’s Completely Fair Scheduler (CFS)</h4>\n<p>Instead of fixed time slices, CFS aims to give each process a “fair” share of CPU time based on a weighted fair queueing approach:</p>\n<ol>\n<li>Each process gets CPU time proportional to its weight (nice value)</li>\n<li>CFS tracks “virtual runtime” for each process</li>\n<li>The process with the lowest virtual runtime runs next</li>\n<li>Red-black trees provide efficient process selection</li>\n</ol>\n<p>This elegant approach automatically adapts to the number of processes and provides good interactive performance while being fair to all processes.</p>\n<h4 id=\"windows-1011-scheduler\">Windows 10/11 Scheduler</h4>\n<p>Windows uses a priority-based preemptive scheduler with these distinctive features:</p>\n<ol>\n<li>32 priority levels (0-31)</li>\n<li>Dynamic boosting of foreground applications</li>\n<li>Different queues for real-time and variable priority processes</li>\n<li>Priority inheritance to address priority inversion</li>\n</ol>\n<h4 id=\"macos-scheduler\">macOS Scheduler</h4>\n<p>Apple’s macOS uses a sophisticated scheduler that:</p>\n<ol>\n<li>Works on a priority system from 0-127</li>\n<li>Uses thread aging to prevent starvation</li>\n<li>Implements special handling for UI threads to keep interfaces responsive</li>\n<li>Employs task coalescence to improve power efficiency</li>\n</ol>\n<h2 id=\"the-impact-on-your-computing-experience\">The Impact on Your Computing Experience</h2>\n<p>The next time your computer feels sluggish when running too many applications, remember this: the scheduling algorithm is desperately trying to share CPU time fairly while keeping everything responsive. Some observations from everyday computing:</p>\n<ol>\n<li><strong>Why your computer feels faster right after booting</strong>: Fewer processes competing for CPU time</li>\n<li><strong>Why browser tabs “sleep”</strong>: Modern browsers deprioritize inactive tabs to save resources</li>\n<li><strong>Why background file copying slows down when you start using the computer</strong>: Interactive processes get priority boosts</li>\n<li><strong>Why real-time applications like audio production software need special settings</strong>: They need guaranteed CPU time, not just fair sharing</li>\n</ol>\n<h2 id=\"coming-up-next\">Coming Up Next</h2>\n<p>Now that we understand how processes get their turn on the CPU, our next post will dive into the critical interface between user programs and the operating system: <strong>System Calls</strong>. We’ll explore how your everyday applications request services from the kernel and why this boundary is essential for security and stability.</p>",{headings:748,localImagePaths:794,remoteImagePaths:795,frontmatter:796,imagePaths:799},[749,750,751,754,757,760,763,766,769,772,775,778,781,784,787,790,793],{depth:34,slug:117,text:118},{depth:34,slug:45,text:46},{depth:34,slug:752,text:753},"cpu-scheduler-the-traffic-controller-of-your-computer","CPU Scheduler: The Traffic Controller of Your Computer",{depth:34,slug:755,text:756},"what-makes-a-good-scheduling-algorithm","What Makes a Good Scheduling Algorithm?",{depth:34,slug:758,text:759},"common-scheduling-algorithms","Common Scheduling Algorithms",{depth:38,slug:761,text:762},"1-first-come-first-served-fcfs","1. First-Come, First-Served (FCFS)",{depth:38,slug:764,text:765},"2-shortest-job-next-sjn","2. Shortest Job Next (SJN)",{depth:38,slug:767,text:768},"3-round-robin-rr","3. Round Robin (RR)",{depth:38,slug:770,text:771},"4-priority-scheduling","4. Priority Scheduling",{depth:38,slug:773,text:774},"5-multilevel-queue-scheduling","5. Multilevel Queue Scheduling",{depth:38,slug:776,text:777},"6-multilevel-feedback-queue-scheduling","6. Multilevel Feedback Queue Scheduling",{depth:34,slug:779,text:780},"modern-scheduling-in-practice","Modern Scheduling in Practice",{depth:38,slug:782,text:783},"linuxs-completely-fair-scheduler-cfs","Linux’s Completely Fair Scheduler (CFS)",{depth:38,slug:785,text:786},"windows-1011-scheduler","Windows 10/11 Scheduler",{depth:38,slug:788,text:789},"macos-scheduler","macOS Scheduler",{depth:34,slug:791,text:792},"the-impact-on-your-computing-experience","The Impact on Your Computing Experience",{depth:34,slug:183,text:184},[],[],{title:736,date:797,description:739,author:16,thumbnail:740,series:147,seriesOrder:38,minutesRead:798},["Date","2025-05-21T00:00:00.000Z"],"5 min read",[],"how-os-decides-what-to-run-next.md","intro-to-operating-systems",{id:801,data:803,body:810,filePath:811,digest:812,rendered:813,legacyId:896},{title:804,author:805,draft:18,date:806,description:807,featured:18,thumbnail:808,series:809,seriesOrder:201},"Introduction to Operating Systems — What even is an OS?",{id:16,collection:17},["Date","2025-05-14T00:00:00.000Z"],"An introduction to Operating Systems, their functions, and their importance in computing.","/thumbnails/os-intro.png",{id:147,collection:24},"Picture this: you press the power button on your laptop, and after a few moments, you're greeted with a colorful screen where you can click on icons to open your favorite apps. But have you ever stopped to wonder what's happening behind that pretty interface? What's actually making your computer... well, compute?\r\n\r\n## Table of Contents\r\n\r\n- [The OS: Your Computer's Master Coordinator](#the-os-your-computers-master-coordinator)\r\n  - [Real-life Examples You Already Know](#real-life-examples-you-already-know)\r\n- [What Does an Operating System Actually Do?](#what-does-an-operating-system-actually-do)\r\n  - [Resource Management](#resource-management)\r\n  - [User Interface](#user-interface)\r\n  - [Application Platform](#application-platform)\r\n  - [File Management](#file-management)\r\n- [The Core Abstractions of Operating Systems](#the-core-abstractions-of-operating-systems)\r\n  - [Abstractions: Hiding Complexity Behind Simplicity](#abstractions-hiding-complexity-behind-simplicity)\r\n  - [Processes: The Living Programs](#processes-the-living-programs)\r\n    - [The Process Lifecycle: From Birth to Termination](#the-process-lifecycle-from-birth-to-termination)\r\n    - [Process Control: The OS as Traffic Controller](#process-control-the-os-as-traffic-controller)\r\n    - [Process Relationships and Communication](#process-relationships-and-communication)\r\n  - [Resources: The Currency of Computing](#resources-the-currency-of-computing)\r\n  - [OS Design Approaches: Different Architectures for Different Needs](#os-design-approaches-different-architectures-for-different-needs)\r\n    - [1. Monolithic Structure](#1-monolithic-structure)\r\n    - [2. Layered Structure](#2-layered-structure)\r\n    - [3. Modular Structure](#3-modular-structure)\r\n    - [4. Microkernel Structure](#4-microkernel-structure)\r\n  - [How Security, Networking, and Multimedia Shape Modern OS Design](#how-security-networking-and-multimedia-shape-modern-os-design)\r\n    - [Security Considerations](#security-considerations)\r\n    - [Networking Integration](#networking-integration)\r\n    - [Multimedia Support](#multimedia-support)\r\n  - [Bringing It All Together](#bringing-it-all-together)\r\n\r\n## The OS: Your Computer's Master Coordinator\r\n\r\nAn operating system (OS) is essentially a sophisticated piece of software that acts as the central manager of your computer. Think of it as the mayor of a bustling digital city, coordinating everything from traffic flow to resource allocation.\r\n\r\nWithout an operating system, your computer would just be a collection of electronic components with no way to communicate with each other or with you. The OS is what bridges the gap between the physical hardware (the actual electronic components) and the applications you use every day (like your web browser, games, or word processor).\r\n\r\nFrom a technical perspective, an OS consists of:\r\n\r\n- **Kernel**: The core component that has complete control over system resources. It provides low-level services like device drivers, memory management, and process scheduling.\r\n- **System Programs**: Utilities that perform common tasks like file management, status information, and configuration.\r\n- **Shell**: The interface (command-line or graphical) that interprets user commands and passes them to the kernel.\r\n\r\nThe OS kernel operates in a privileged mode (often called \"kernel mode\" or \"supervisor mode\") with unrestricted access to hardware, while user applications run in a restricted \"user mode.\" This separation is enforced by the CPU's hardware protection mechanisms and is fundamental to system stability and security.\r\n\r\n#### Real-life Examples You Already Know\r\n\r\nYou're probably familiar with several operating systems even if you didn't realize it:\r\n\r\n- **Windows 11**: Microsoft's latest OS running on most personal computers\r\n- **macOS**: Apple's operating system for MacBooks and iMacs\r\n- **iOS**: Powers your iPhone\r\n- **Android**: The system behind most non-Apple smartphones\r\n- **Linux**: An open-source OS with various distributions like Ubuntu, Fedora, Debian, Arch Linux, and much more, used in servers, desktops, and embedded systems\r\n\r\nWhen you're scrolling through Instagram Reels or playing Minecraft, you're interacting with applications, but it's the operating system working tirelessly underneath that makes it all possible.\r\n\r\n## What Does an Operating System Actually Do?\r\n\r\nAn OS handles a surprisingly wide range of responsibilities. Let's break down the main functions:\r\n\r\n#### Resource Management\r\n\r\nYour computer has limited resources — CPU time, memory space, storage, and more. The OS acts like a fair referee, deciding which programs get what resources and when:\r\n\r\n- **CPU Management**: Decides which process gets processing time through scheduling algorithms like Round-Robin (giving each process equal time slices), Priority-based (important tasks first), or Completely Fair Scheduler (CFS) used in Linux. The OS also handles context switching — saving and restoring CPU state when switching between processes, which typically takes hundreds of nanoseconds.\r\n\r\n- **Memory Management**: Allocates working memory (RAM) to different applications using techniques like:\r\n\r\n  - **Paging**: Dividing physical memory into fixed-size frames (typically 4KB) and logical memory into pages of the same size\r\n  - **Virtual Memory**: Creating an abstraction that allows programs to use more memory than physically available by swapping data between RAM and disk\r\n  - **Memory Protection**: Using hardware features like Memory Management Units (MMUs) to prevent one process from accessing another's memory space\r\n\r\n- **Storage Management**: Controls how files are stored and retrieved through file systems like NTFS (Windows), APFS (Mac), or ext4 (Linux) that handle complex tasks including:\r\n\r\n  - Block allocation and tracking\r\n  - Metadata management (file attributes, permissions)\r\n  - Journaling to prevent corruption during system crashes\r\n  - Cache management to speed up disk operations\r\n\r\n- **I/O Device Management**: Coordinates communication with keyboards, screens, printers, etc. through device drivers that translate general I/O requests into device-specific commands. This includes interrupt handling (when devices need attention) and buffer management (temporary storage for data being transferred).\r\n\r\nImagine trying to manually tell your processor which calculation to perform next, or personally directing where in RAM your Spotify playlist should be stored. The OS handles all this complexity so you don't have to!\r\n\r\n#### User Interface\r\n\r\nThe OS provides a way for you to actually talk to your computer:\r\n\r\n- **Command-Line Interface (CLI)**: Text-based interaction (like Terminal on Mac or Command Prompt on Windows)\r\n- **Graphical User Interface (GUI)**: The visual interface with windows, icons, and menus that most people use today\r\n\r\n#### Application Platform\r\n\r\nThe OS provides a stable foundation for applications to run on:\r\n\r\n- Gives apps access to hardware through standardized interfaces\r\n- Ensures applications play nicely together\r\n- Provides security measures to prevent rogue applications from causing damage\r\n\r\n#### File Management\r\n\r\nThe OS organizes and keeps track of all your files:\r\n\r\n- Creates and maintains file systems\r\n- Handles file operations (creating, reading, writing, deleting)\r\n- Manages file permissions and security\r\n\r\n## The Core Abstractions of Operating Systems\r\n\r\nOne of the most brilliant aspects of operating systems is how they simplify complexity through abstractions. Let's look at three fundamental abstractions that make modern computing possible:\r\n\r\n#### Abstractions: Hiding Complexity Behind Simplicity\r\n\r\nAn abstraction is like a simplified model that hides complicated details. Think of how you drive a car — you press the gas pedal to go faster without needing to understand the internal combustion process happening in the engine, or how the brakes work. You just know that pressing the pedal makes the car move, and pulling the lever stops it.\r\nThis is the essence of abstraction: providing a simple interface to complex systems. In programming, this means creating functions, classes, or modules that encapsulate complex logic and expose only the necessary parts to the user.\r\n\r\nIn OS terms, abstractions hide the messy hardware details behind clean, simple interfaces. This means:\r\n\r\n- Programmers can write code without knowing exact hardware specifications\r\n- Users can interact with computers without understanding binary code\r\n- Different applications can run on diverse hardware with minimal changes\r\n\r\nFrom a technical standpoint, operating systems implement several key abstraction layers:\r\n\r\n- **Hardware Abstraction Layer (HAL)**: Provides a consistent interface to various hardware devices, allowing the OS to work with different hardware configurations without major modifications.\r\n\r\n- **System Call Interface**: Provides a standardized API for applications to request OS services. For example, when an application calls `open()`, `read()`, or `write()` functions, it's using this interface to access the file system.\r\n\r\n- **File Abstraction**: Represents all storage as a uniform collection of files, regardless of the physical storage medium (SSD, HDD, network drive, etc.) or underlying file system structure.\r\n\r\n- **Device Abstraction**: Treats all I/O devices using a consistent model — typically as special files in Unix-like systems (e.g., `/dev/sda` for disk drives) or through device handles in Windows.\r\n\r\nFor example, when you save a file, you don't need to know which specific sectors of your hard drive are being written to — the file system abstraction handles that for you. At a deeper level, this involves the OS translating your high-level \"save file\" command through multiple abstraction layers until it becomes specific disk controller commands.\r\n\r\n#### Processes: The Living Programs\r\n\r\nA process is an OS abstraction that represents a running program. Think of it as an active instance of an application that's currently executing — a program in action, with its own unique identity and dedicated resources.\r\n\r\nWhat makes processes special:\r\n\r\n- **Isolated Memory Space**: Each process gets its own private chunk of memory, preventing one application from accidentally (or maliciously) accessing another's data. This isolation is like giving each application its own private office space in a large building.\r\n\r\n- **Program Counter and Registers**: A process maintains its own current execution position and state information, allowing the OS to pause it and come back to exactly the same point later.\r\n\r\n- **Process Control Block (PCB)**: The OS maintains a special data structure for each process containing all its vital information — like its ID, state, priority, memory locations, and open files. Think of this as each process's personnel file.\r\n\r\n- **Multiple Execution States**: Processes move through various states during their lifecycle, which we'll explore next.\r\n\r\n###### The Process Lifecycle: From Birth to Termination\r\n\r\nProcesses have a fascinating lifecycle that the OS manages:\r\n\r\n1. **Created (New)**: When you double-click an application icon, the OS creates a new process. During this brief initial state, the OS allocates memory and resources, sets up the PCB, and loads program code from storage into memory. It's like setting up a new workspace before an employee starts work.\r\n\r\n2. **Ready**: After creation, the process enters a \"ready\" state, where it's fully prepared to run but is waiting for CPU time. Think of this as employees waiting in line for their turn at a shared tool.\r\n\r\n3. **Running**: This is when the process is actively executing on the CPU — the application is doing its actual work! Due to CPU sharing, a process typically gets short bursts of running time before being switched out.\r\n\r\n4. **Waiting/Blocked**: Sometimes processes need to pause while waiting for something external, like data from a file or user input. Instead of wasting CPU time, the OS moves these processes to a \"waiting\" state. Imagine an employee who can't continue their work until they receive an important email.\r\n\r\n5. **Terminated**: When a process completes its execution (or when you close an app), it enters the terminated state. The OS then cleans up all resources allocated to that process, reclaiming memory and closing files — like clearing out a desk after someone leaves.\r\n\r\n###### Process Control: The OS as Traffic Controller\r\n\r\nThe OS has several mechanisms to manage processes throughout their lifecycle:\r\n\r\n- **Process Creation**: The OS can spawn new processes either at user request (when you open an app) or when an existing process creates a child process (like when your browser opens a new tab).\r\n\r\n- **Process Scheduling**: The OS decides which ready processes get CPU time and for how long, using sophisticated scheduling algorithms that balance fairness, priority, and performance.\r\n\r\n- **Process Suspension**: The OS can temporarily pause a running process, saving its complete state. This happens automatically during multitasking or can be triggered by events like pressing Ctrl+Z in a terminal.\r\n\r\n- **Process Resumption**: A suspended process can later be resumed from exactly where it left off. The OS restores its saved state and puts it back in the ready queue to await CPU time.\r\n\r\n- **Process Termination**: Processes can end voluntarily (when a program completes its task) or be forcibly terminated (when you use Task Manager to kill an unresponsive app or when a critical error occurs).\r\n\r\n###### Process Relationships and Communication\r\n\r\nProcesses rarely exist in isolation:\r\n\r\n- **Parent-Child Relationships**: Processes often create other processes, forming family trees of related processes. The web browser process might spawn child processes for each tab.\r\n\r\n- **Inter-Process Communication (IPC)**: Processes need to talk to each other, which they do through mechanisms like pipes, shared memory, message queues, and signals — all managed by the OS.\r\n\r\n- **Synchronization**: The OS provides tools like semaphores and mutexes to help processes coordinate when accessing shared resources, preventing conflicts.\r\n\r\nWhen you open Chrome, Word, and Spotify at the same time, each runs as a separate process with its own memory space and resources. The OS juggles them all, rapidly switching between them to create the illusion they're all running simultaneously. If Chrome crashes, the OS ensures that the problem is contained within Chrome's process boundaries, allowing Word and Spotify to continue playing your favorite tunes without missing a beat. Pretty neat, right?\r\n\r\n#### Resources: The Currency of Computing\r\n\r\nResources are all the things programs need to run — like CPU time, memory, disk space, network bandwidth, and access to devices like printers or graphics cards.\r\n\r\nThe OS is ultimately a sophisticated resource manager that:\r\n\r\n- Tracks available resources\r\n- Handles resource requests from applications\r\n- Allocates resources fairly and efficiently\r\n- Recovers resources when programs finish or crash\r\n\r\nAt a technical level, resource management involves several complex mechanisms:\r\n\r\n- **Resource Accounting**: The OS maintains detailed metadata about available and allocated resources, including physical memory pages, disk blocks, I/O channels, and CPU utilization statistics.\r\n\r\n- **Resource Scheduling**: For time-shared resources like CPU, the OS implements scheduling algorithms with policies that optimize for different goals:\r\n\r\n  - Throughput (maximizing total work completed)\r\n  - Response time (minimizing user-perceived delay)\r\n  - Fairness (ensuring all processes get adequate resources)\r\n  - Priority satisfaction (allocating more resources to important processes)\r\n\r\n- **Resource Protection**: The OS implements access control mechanisms to prevent unauthorized use of resources, including:\r\n\r\n  - Capability-based security models\r\n  - Access control lists (ACLs)\r\n  - Role-based access control (RBAC)\r\n\r\n- **Resource Deadlock Prevention**: The OS must handle situations where multiple processes are waiting for resources held by each other. It uses techniques like:\r\n  - Resource allocation graphs to detect cycles\r\n  - Banker's algorithm to ensure safe allocation states\r\n  - Timeouts and preemption to break deadlocks\r\n\r\nFor example, when your video editing software asks for 4GB of RAM, the OS checks if that amount is available and then reserves it specifically for that application. Behind the scenes, this involves page table manipulations, possibly moving other data to swap space, and updating internal resource allocation tables.\r\n\r\n## OS Design Approaches: Different Architectures for Different Needs\r\n\r\nOperating systems aren't all built the same way. Over decades, several design approaches have emerged:\r\n\r\n#### 1. Monolithic Structure\r\n\r\nImagine a massive, integrated system where all OS functions operate in a single, large kernel (the core part of the OS).\r\n\r\n**Technical Characteristics:**\r\n\r\n- All OS services run in privileged kernel mode\r\n- Direct function calls between components for efficiency\r\n- Static linking of most system components at compile time\r\n- Typically organized into logical subsystems internally (memory manager, process scheduler, file system, etc.)\r\n- System call interface provides the boundary between user applications and kernel services\r\n\r\n**Pros:**\r\n\r\n- Direct communication between components\r\n- Often better performance due to tight integration\r\n- No message-passing overhead between modules\r\n\r\n**Cons:**\r\n\r\n- A bug in one part can crash the entire system\r\n- Hard to maintain as it grows larger\r\n- Requires complete recompilation for most changes\r\n\r\n**Example:** Traditional Unix and early Linux versions used this approach. Linux, while considered monolithic, has evolved to support loadable kernel modules that can be added without recompiling the entire kernel.\r\n\r\n**Technical Implementation:** In a monolithic kernel like Linux, when a user program executes a system call (like `read()`), the CPU switches from user mode to kernel mode, the kernel executes the entire operation within its address space, and then returns control to the user program.\r\n\r\n#### 2. Layered Structure\r\n\r\nPicture a wedding cake with distinct layers, each built on top of the one below, with each layer providing services to the layers above it.\r\n\r\n**Technical Characteristics:**\r\n\r\n- Hierarchical organization with well-defined interfaces between layers\r\n- Lower layers handle more primitive operations (closer to hardware)\r\n- Higher layers implement more abstract functions\r\n- Each layer only uses functions and services of lower layers\r\n- Typically follows the principle of information hiding between layers\r\n\r\n**Pros:**\r\n\r\n- Better organization and separation of functions\r\n- Easier to debug and maintain\r\n- Simplifies design and verification\r\n- Changes to one layer don't affect other layers if interfaces remain stable\r\n\r\n**Cons:**\r\n\r\n- Performance overhead from communication between layers\r\n- Lower layers can become bottlenecks\r\n- Strict layering can lead to duplication of functionality\r\n- Determining the optimal number of layers is challenging\r\n\r\n**Example:** THE (Technische Hogeschool Eindhoven) operating system used a strict layered approach with six layers, from hardware management at the bottom to user programs at the top. Modern network protocols like TCP/IP also use a layered design (the OSI model).\r\n\r\n**Technical Implementation:** In a layered system, a request like \"open a file\" traverses down through layers: user interface → file system manager → logical disk manager → disk driver → hardware controller. Each layer processes the request, adds its own control information, and passes it to the next layer.\r\n\r\n#### 3. Modular Structure\r\n\r\nThink of a LEGO set where different components (modules) can be added or removed as needed.\r\n\r\n**Technical Characteristics:**\r\n\r\n- Core kernel with dynamically loadable modules\r\n- Well-defined interfaces and communication protocols between modules\r\n- Object-oriented design principles often used\r\n- Support for hot-swapping modules without system restart\r\n- Configuration and tuning without full recompilation\r\n\r\n**Pros:**\r\n\r\n- Flexible and extensible\r\n- Easier to maintain and update individual components\r\n- Facilitates independent development of different parts\r\n- Allows for customization without modifying core functionality\r\n- Only necessary modules need to be loaded, reducing memory footprint\r\n\r\n**Cons:**\r\n\r\n- Requires well-defined interfaces between modules\r\n- Potential performance overhead from communication\r\n- Complex dependency management between modules\r\n- Potential for version compatibility issues\r\n\r\n**Example:** Modern Linux is largely modular, allowing kernel modules to be loaded/unloaded. For instance, device drivers, file systems, and networking protocols are implemented as loadable kernel modules (LKMs) with the `.ko` extension.\r\n\r\n**Technical Implementation:** In Linux, the `insmod` and `modprobe` commands load kernel modules, which then register themselves with specific kernel subsystems. The kernel maintains a module dependency tree and reference counts to manage module relationships and ensure safe unloading.\r\n\r\n#### 4. Microkernel Structure\r\n\r\nImagine keeping only the absolute essentials in the core kernel and running everything else as separate services.\r\n\r\n**Technical Characteristics:**\r\n\r\n- Minimal kernel handling only critical functions:\r\n  - Low-level memory management\r\n  - Basic inter-process communication (IPC)\r\n  - Elementary process scheduling\r\n- All other OS services (file systems, device drivers, network protocols) run as user-mode processes\r\n- Communication via message passing through IPC mechanisms\r\n- Hardware abstraction layer often included in the microkernel\r\n\r\n**Pros:**\r\n\r\n- Improved reliability (if one service crashes, others continue)\r\n- Better security through isolation\r\n- Easier to extend and maintain\r\n- Smaller trusted computing base (TCB)\r\n- More portable across hardware platforms\r\n\r\n**Cons:**\r\n\r\n- Performance overhead from message-passing IPC\r\n- More complex design\r\n- Increased context-switching overhead\r\n- Potentially higher latency for system calls\r\n\r\n**Example:** MINIX was designed as a true microkernel system for educational purposes. QNX is a commercial real-time OS with microkernel architecture used in automotive and industrial systems. macOS/iOS is partially based on a hybrid kernel called XNU that combines microkernel design elements with monolithic components.\r\n\r\n**Technical Implementation:** In a microkernel system like MINIX, when an application needs to read a file, it sends a message to the file system server, which processes the request and sends a message to the disk driver, which then interacts with the hardware. The microkernel itself only handles the passing of these messages between processes.\r\n\r\n## How Security, Networking, and Multimedia Shape Modern OS Design\r\n\r\nModern operating systems have evolved dramatically to address new challenges:\r\n\r\n#### Security Considerations\r\n\r\nSecurity has become a primary design concern for OS developers:\r\n\r\n- **Process Isolation**: Prevents one app from accessing another's data through memory protection units (MPUs) and virtual memory techniques. Modern CPUs implement protection rings (with ring 0 for kernel mode and ring 3 for user mode) to enforce privilege separation.\r\n\r\n- **User Permissions**: Control who can access what through access control mechanisms:\r\n\r\n  - Discretionary Access Control (DAC): Owner-based permissions (like Unix's read/write/execute bits)\r\n  - Mandatory Access Control (MAC): System-enforced policies (like SELinux)\r\n  - Role-Based Access Control (RBAC): Permissions based on user roles\r\n\r\n- **Encryption**: Protects sensitive data through techniques like:\r\n\r\n  - Full disk encryption (BitLocker, FileVault)\r\n  - Secure boot with trusted platform modules (TPMs)\r\n  - Memory encryption to prevent cold boot attacks\r\n  - Encrypted swap to protect data paged to disk\r\n\r\n- **Secure Boot**: Ensures the system hasn't been tampered with by verifying digital signatures of boot components and creating a chain of trust from firmware to OS kernel.\r\n\r\n- **Regular Security Updates**: Patch vulnerabilities through a structured process:\r\n  - Security bulletins to notify users\r\n  - CVE (Common Vulnerabilities and Exposures) tracking\r\n  - Patches distributed through centralized update mechanisms\r\n\r\nThese security features aren't add-ons; they're deeply integrated into the core OS design. Modern operating systems also implement Address Space Layout Randomization (ASLR), Stack Canaries, Data Execution Prevention (DEP), and sandboxing techniques to mitigate various attack vectors.\r\n\r\n#### Networking Integration\r\n\r\nToday's operating systems are built with the assumption that devices will be connected:\r\n\r\n- **Network Stack**: Built into the kernel with implementation of:\r\n\r\n  - Protocol layers (Ethernet, IP, TCP/UDP)\r\n  - Socket interfaces for application communication\r\n  - Protocol-independent mechanisms like Berkeley sockets or Windows Winsock\r\n  - Buffering and flow control mechanisms\r\n\r\n- **Seamless File Sharing**: Across devices through protocols and services like:\r\n\r\n  - Server Message Block (SMB)/Common Internet File System (CIFS) for Windows\r\n  - Network File System (NFS) for Unix/Linux systems\r\n  - Apple Filing Protocol (AFP) and SMB for macOS\r\n  - Distributed file systems like Andrew File System (AFS)\r\n\r\n- **Remote Access Capabilities**:\r\n\r\n  - Secure Shell (SSH) for command-line access\r\n  - Remote Desktop Protocol (RDP) for Windows\r\n  - Virtual Network Computing (VNC) for cross-platform support\r\n  - X11 forwarding for Unix/Linux GUI applications\r\n\r\n- **Distributed Computing Support**:\r\n\r\n  - Remote procedure calls (RPCs) and distributed objects\r\n  - Clustering and load balancing capabilities\r\n  - Distributed locking mechanisms\r\n  - Support for message queuing systems\r\n\r\n- **Built-in Network Protection**:\r\n  - Stateful packet inspection firewalls\r\n  - Network Address Translation (NAT) for sharing connections\r\n  - Intrusion detection/prevention systems\r\n  - Quality of Service (QoS) for bandwidth management\r\n\r\nRemember when you had to install separate software to connect to the internet? Now networking is an integral part of every OS, with sophisticated capabilities like zero-configuration networking (like Apple's Bonjour), IPv6 support, and software-defined networking interfaces.\r\n\r\n#### Multimedia Support\r\n\r\nAs computers evolved from text-processing machines to multimedia powerhouses, OS design adapted:\r\n\r\n- **Hardware Acceleration for Media**:\r\n\r\n  - Graphics Processing Unit (GPU) integration for video rendering\r\n  - DirectX (Windows) and Metal (Apple) APIs for hardware-accelerated graphics\r\n  - OpenGL and Vulkan cross-platform graphics acceleration\r\n  - Digital Signal Processor (DSP) utilization for audio processing\r\n  - Video decode/encode acceleration through frameworks like VDPAU, VAAPI, and NVENC\r\n\r\n- **Advanced Graphics Subsystems**:\r\n\r\n  - Compositing window managers (like Windows DWM or macOS Quartz Compositor)\r\n  - Hardware-accelerated 2D and 3D rendering pipelines\r\n  - Multiple display support with different resolutions and refresh rates\r\n  - Color management systems for accurate color reproduction\r\n  - High dynamic range (HDR) and wide color gamut support\r\n\r\n- **Media Streaming Capabilities**:\r\n\r\n  - Low-latency audio streaming through WASAPI (Windows) or CoreAudio (Apple)\r\n  - Video streaming APIs with buffer management\r\n  - Adaptive bitrate techniques for network conditions\r\n  - Time synchronization between audio and video streams\r\n  - Digital Rights Management (DRM) integration\r\n\r\n- **Real-time Processing**:\r\n\r\n  - Priority scheduling for time-sensitive media applications\r\n  - Low-latency audio paths with minimal buffer sizes\r\n  - Hardware-accelerated video conferencing codecs\r\n  - Echo cancellation and noise reduction algorithms\r\n  - Camera and microphone privacy controls\r\n\r\n- **Media Format Support**:\r\n  - Codec frameworks (DirectShow, Media Foundation, AVFoundation)\r\n  - Container format handling (MP4, MKV, etc.)\r\n  - Metadata extraction and indexing\r\n  - Transcoding capabilities for format conversion\r\n  - Accessibility features like closed captioning\r\n\r\nModern OS multimedia subsystems are remarkably complex, often involving specialized driver models like Windows Display Driver Model (WDDM) or macOS's IOKit graphics stack, which provide capabilities far beyond the simple bitmap displays of early operating systems.\r\n\r\n## Bringing It All Together\r\n\r\nSo, what even is an operating system? It's the sophisticated conductor of your computer's orchestra, ensuring all the components work together harmoniously. It's the mediator between your hardware and software, and the platform that makes modern computing possible.\r\n\r\nNext time you start up your device, take a moment to appreciate the incredible complexity working behind the scenes. From managing your CPU cycles to ensuring your files are stored safely, your OS is constantly juggling countless tasks so you can focus on what matters — using your computer to work, create, connect, and play.\r\n\r\nIn the next post, we'll dive into how operating systems handle multiple tasks simultaneously without everything descending into chaos.","src/content/blog/intro-to-operating-systems.md","ed29fae216a1f937",{html:814,metadata:815},"<p>Picture this: you press the power button on your laptop, and after a few moments, you’re greeted with a colorful screen where you can click on icons to open your favorite apps. But have you ever stopped to wonder what’s happening behind that pretty interface? What’s actually making your computer… well, compute?</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#the-os-your-computers-master-coordinator\">The OS: Your Computer’s Master Coordinator</a>\n<ul>\n<li><a href=\"#real-life-examples-you-already-know\">Real-life Examples You Already Know</a></li>\n</ul>\n</li>\n<li><a href=\"#what-does-an-operating-system-actually-do\">What Does an Operating System Actually Do?</a>\n<ul>\n<li><a href=\"#resource-management\">Resource Management</a></li>\n<li><a href=\"#user-interface\">User Interface</a></li>\n<li><a href=\"#application-platform\">Application Platform</a></li>\n<li><a href=\"#file-management\">File Management</a></li>\n</ul>\n</li>\n<li><a href=\"#the-core-abstractions-of-operating-systems\">The Core Abstractions of Operating Systems</a>\n<ul>\n<li><a href=\"#abstractions-hiding-complexity-behind-simplicity\">Abstractions: Hiding Complexity Behind Simplicity</a></li>\n<li><a href=\"#processes-the-living-programs\">Processes: The Living Programs</a>\n<ul>\n<li><a href=\"#the-process-lifecycle-from-birth-to-termination\">The Process Lifecycle: From Birth to Termination</a></li>\n<li><a href=\"#process-control-the-os-as-traffic-controller\">Process Control: The OS as Traffic Controller</a></li>\n<li><a href=\"#process-relationships-and-communication\">Process Relationships and Communication</a></li>\n</ul>\n</li>\n<li><a href=\"#resources-the-currency-of-computing\">Resources: The Currency of Computing</a></li>\n<li><a href=\"#os-design-approaches-different-architectures-for-different-needs\">OS Design Approaches: Different Architectures for Different Needs</a>\n<ul>\n<li><a href=\"#1-monolithic-structure\">1. Monolithic Structure</a></li>\n<li><a href=\"#2-layered-structure\">2. Layered Structure</a></li>\n<li><a href=\"#3-modular-structure\">3. Modular Structure</a></li>\n<li><a href=\"#4-microkernel-structure\">4. Microkernel Structure</a></li>\n</ul>\n</li>\n<li><a href=\"#how-security-networking-and-multimedia-shape-modern-os-design\">How Security, Networking, and Multimedia Shape Modern OS Design</a>\n<ul>\n<li><a href=\"#security-considerations\">Security Considerations</a></li>\n<li><a href=\"#networking-integration\">Networking Integration</a></li>\n<li><a href=\"#multimedia-support\">Multimedia Support</a></li>\n</ul>\n</li>\n<li><a href=\"#bringing-it-all-together\">Bringing It All Together</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"the-os-your-computers-master-coordinator\">The OS: Your Computer’s Master Coordinator</h2>\n<p>An operating system (OS) is essentially a sophisticated piece of software that acts as the central manager of your computer. Think of it as the mayor of a bustling digital city, coordinating everything from traffic flow to resource allocation.</p>\n<p>Without an operating system, your computer would just be a collection of electronic components with no way to communicate with each other or with you. The OS is what bridges the gap between the physical hardware (the actual electronic components) and the applications you use every day (like your web browser, games, or word processor).</p>\n<p>From a technical perspective, an OS consists of:</p>\n<ul>\n<li><strong>Kernel</strong>: The core component that has complete control over system resources. It provides low-level services like device drivers, memory management, and process scheduling.</li>\n<li><strong>System Programs</strong>: Utilities that perform common tasks like file management, status information, and configuration.</li>\n<li><strong>Shell</strong>: The interface (command-line or graphical) that interprets user commands and passes them to the kernel.</li>\n</ul>\n<p>The OS kernel operates in a privileged mode (often called “kernel mode” or “supervisor mode”) with unrestricted access to hardware, while user applications run in a restricted “user mode.” This separation is enforced by the CPU’s hardware protection mechanisms and is fundamental to system stability and security.</p>\n<h4 id=\"real-life-examples-you-already-know\">Real-life Examples You Already Know</h4>\n<p>You’re probably familiar with several operating systems even if you didn’t realize it:</p>\n<ul>\n<li><strong>Windows 11</strong>: Microsoft’s latest OS running on most personal computers</li>\n<li><strong>macOS</strong>: Apple’s operating system for MacBooks and iMacs</li>\n<li><strong>iOS</strong>: Powers your iPhone</li>\n<li><strong>Android</strong>: The system behind most non-Apple smartphones</li>\n<li><strong>Linux</strong>: An open-source OS with various distributions like Ubuntu, Fedora, Debian, Arch Linux, and much more, used in servers, desktops, and embedded systems</li>\n</ul>\n<p>When you’re scrolling through Instagram Reels or playing Minecraft, you’re interacting with applications, but it’s the operating system working tirelessly underneath that makes it all possible.</p>\n<h2 id=\"what-does-an-operating-system-actually-do\">What Does an Operating System Actually Do?</h2>\n<p>An OS handles a surprisingly wide range of responsibilities. Let’s break down the main functions:</p>\n<h4 id=\"resource-management\">Resource Management</h4>\n<p>Your computer has limited resources — CPU time, memory space, storage, and more. The OS acts like a fair referee, deciding which programs get what resources and when:</p>\n<ul>\n<li>\n<p><strong>CPU Management</strong>: Decides which process gets processing time through scheduling algorithms like Round-Robin (giving each process equal time slices), Priority-based (important tasks first), or Completely Fair Scheduler (CFS) used in Linux. The OS also handles context switching — saving and restoring CPU state when switching between processes, which typically takes hundreds of nanoseconds.</p>\n</li>\n<li>\n<p><strong>Memory Management</strong>: Allocates working memory (RAM) to different applications using techniques like:</p>\n<ul>\n<li><strong>Paging</strong>: Dividing physical memory into fixed-size frames (typically 4KB) and logical memory into pages of the same size</li>\n<li><strong>Virtual Memory</strong>: Creating an abstraction that allows programs to use more memory than physically available by swapping data between RAM and disk</li>\n<li><strong>Memory Protection</strong>: Using hardware features like Memory Management Units (MMUs) to prevent one process from accessing another’s memory space</li>\n</ul>\n</li>\n<li>\n<p><strong>Storage Management</strong>: Controls how files are stored and retrieved through file systems like NTFS (Windows), APFS (Mac), or ext4 (Linux) that handle complex tasks including:</p>\n<ul>\n<li>Block allocation and tracking</li>\n<li>Metadata management (file attributes, permissions)</li>\n<li>Journaling to prevent corruption during system crashes</li>\n<li>Cache management to speed up disk operations</li>\n</ul>\n</li>\n<li>\n<p><strong>I/O Device Management</strong>: Coordinates communication with keyboards, screens, printers, etc. through device drivers that translate general I/O requests into device-specific commands. This includes interrupt handling (when devices need attention) and buffer management (temporary storage for data being transferred).</p>\n</li>\n</ul>\n<p>Imagine trying to manually tell your processor which calculation to perform next, or personally directing where in RAM your Spotify playlist should be stored. The OS handles all this complexity so you don’t have to!</p>\n<h4 id=\"user-interface\">User Interface</h4>\n<p>The OS provides a way for you to actually talk to your computer:</p>\n<ul>\n<li><strong>Command-Line Interface (CLI)</strong>: Text-based interaction (like Terminal on Mac or Command Prompt on Windows)</li>\n<li><strong>Graphical User Interface (GUI)</strong>: The visual interface with windows, icons, and menus that most people use today</li>\n</ul>\n<h4 id=\"application-platform\">Application Platform</h4>\n<p>The OS provides a stable foundation for applications to run on:</p>\n<ul>\n<li>Gives apps access to hardware through standardized interfaces</li>\n<li>Ensures applications play nicely together</li>\n<li>Provides security measures to prevent rogue applications from causing damage</li>\n</ul>\n<h4 id=\"file-management\">File Management</h4>\n<p>The OS organizes and keeps track of all your files:</p>\n<ul>\n<li>Creates and maintains file systems</li>\n<li>Handles file operations (creating, reading, writing, deleting)</li>\n<li>Manages file permissions and security</li>\n</ul>\n<h2 id=\"the-core-abstractions-of-operating-systems\">The Core Abstractions of Operating Systems</h2>\n<p>One of the most brilliant aspects of operating systems is how they simplify complexity through abstractions. Let’s look at three fundamental abstractions that make modern computing possible:</p>\n<h4 id=\"abstractions-hiding-complexity-behind-simplicity\">Abstractions: Hiding Complexity Behind Simplicity</h4>\n<p>An abstraction is like a simplified model that hides complicated details. Think of how you drive a car — you press the gas pedal to go faster without needing to understand the internal combustion process happening in the engine, or how the brakes work. You just know that pressing the pedal makes the car move, and pulling the lever stops it.\r\nThis is the essence of abstraction: providing a simple interface to complex systems. In programming, this means creating functions, classes, or modules that encapsulate complex logic and expose only the necessary parts to the user.</p>\n<p>In OS terms, abstractions hide the messy hardware details behind clean, simple interfaces. This means:</p>\n<ul>\n<li>Programmers can write code without knowing exact hardware specifications</li>\n<li>Users can interact with computers without understanding binary code</li>\n<li>Different applications can run on diverse hardware with minimal changes</li>\n</ul>\n<p>From a technical standpoint, operating systems implement several key abstraction layers:</p>\n<ul>\n<li>\n<p><strong>Hardware Abstraction Layer (HAL)</strong>: Provides a consistent interface to various hardware devices, allowing the OS to work with different hardware configurations without major modifications.</p>\n</li>\n<li>\n<p><strong>System Call Interface</strong>: Provides a standardized API for applications to request OS services. For example, when an application calls <code>open()</code>, <code>read()</code>, or <code>write()</code> functions, it’s using this interface to access the file system.</p>\n</li>\n<li>\n<p><strong>File Abstraction</strong>: Represents all storage as a uniform collection of files, regardless of the physical storage medium (SSD, HDD, network drive, etc.) or underlying file system structure.</p>\n</li>\n<li>\n<p><strong>Device Abstraction</strong>: Treats all I/O devices using a consistent model — typically as special files in Unix-like systems (e.g., <code>/dev/sda</code> for disk drives) or through device handles in Windows.</p>\n</li>\n</ul>\n<p>For example, when you save a file, you don’t need to know which specific sectors of your hard drive are being written to — the file system abstraction handles that for you. At a deeper level, this involves the OS translating your high-level “save file” command through multiple abstraction layers until it becomes specific disk controller commands.</p>\n<h4 id=\"processes-the-living-programs\">Processes: The Living Programs</h4>\n<p>A process is an OS abstraction that represents a running program. Think of it as an active instance of an application that’s currently executing — a program in action, with its own unique identity and dedicated resources.</p>\n<p>What makes processes special:</p>\n<ul>\n<li>\n<p><strong>Isolated Memory Space</strong>: Each process gets its own private chunk of memory, preventing one application from accidentally (or maliciously) accessing another’s data. This isolation is like giving each application its own private office space in a large building.</p>\n</li>\n<li>\n<p><strong>Program Counter and Registers</strong>: A process maintains its own current execution position and state information, allowing the OS to pause it and come back to exactly the same point later.</p>\n</li>\n<li>\n<p><strong>Process Control Block (PCB)</strong>: The OS maintains a special data structure for each process containing all its vital information — like its ID, state, priority, memory locations, and open files. Think of this as each process’s personnel file.</p>\n</li>\n<li>\n<p><strong>Multiple Execution States</strong>: Processes move through various states during their lifecycle, which we’ll explore next.</p>\n</li>\n</ul>\n<h6 id=\"the-process-lifecycle-from-birth-to-termination\">The Process Lifecycle: From Birth to Termination</h6>\n<p>Processes have a fascinating lifecycle that the OS manages:</p>\n<ol>\n<li>\n<p><strong>Created (New)</strong>: When you double-click an application icon, the OS creates a new process. During this brief initial state, the OS allocates memory and resources, sets up the PCB, and loads program code from storage into memory. It’s like setting up a new workspace before an employee starts work.</p>\n</li>\n<li>\n<p><strong>Ready</strong>: After creation, the process enters a “ready” state, where it’s fully prepared to run but is waiting for CPU time. Think of this as employees waiting in line for their turn at a shared tool.</p>\n</li>\n<li>\n<p><strong>Running</strong>: This is when the process is actively executing on the CPU — the application is doing its actual work! Due to CPU sharing, a process typically gets short bursts of running time before being switched out.</p>\n</li>\n<li>\n<p><strong>Waiting/Blocked</strong>: Sometimes processes need to pause while waiting for something external, like data from a file or user input. Instead of wasting CPU time, the OS moves these processes to a “waiting” state. Imagine an employee who can’t continue their work until they receive an important email.</p>\n</li>\n<li>\n<p><strong>Terminated</strong>: When a process completes its execution (or when you close an app), it enters the terminated state. The OS then cleans up all resources allocated to that process, reclaiming memory and closing files — like clearing out a desk after someone leaves.</p>\n</li>\n</ol>\n<h6 id=\"process-control-the-os-as-traffic-controller\">Process Control: The OS as Traffic Controller</h6>\n<p>The OS has several mechanisms to manage processes throughout their lifecycle:</p>\n<ul>\n<li>\n<p><strong>Process Creation</strong>: The OS can spawn new processes either at user request (when you open an app) or when an existing process creates a child process (like when your browser opens a new tab).</p>\n</li>\n<li>\n<p><strong>Process Scheduling</strong>: The OS decides which ready processes get CPU time and for how long, using sophisticated scheduling algorithms that balance fairness, priority, and performance.</p>\n</li>\n<li>\n<p><strong>Process Suspension</strong>: The OS can temporarily pause a running process, saving its complete state. This happens automatically during multitasking or can be triggered by events like pressing Ctrl+Z in a terminal.</p>\n</li>\n<li>\n<p><strong>Process Resumption</strong>: A suspended process can later be resumed from exactly where it left off. The OS restores its saved state and puts it back in the ready queue to await CPU time.</p>\n</li>\n<li>\n<p><strong>Process Termination</strong>: Processes can end voluntarily (when a program completes its task) or be forcibly terminated (when you use Task Manager to kill an unresponsive app or when a critical error occurs).</p>\n</li>\n</ul>\n<h6 id=\"process-relationships-and-communication\">Process Relationships and Communication</h6>\n<p>Processes rarely exist in isolation:</p>\n<ul>\n<li>\n<p><strong>Parent-Child Relationships</strong>: Processes often create other processes, forming family trees of related processes. The web browser process might spawn child processes for each tab.</p>\n</li>\n<li>\n<p><strong>Inter-Process Communication (IPC)</strong>: Processes need to talk to each other, which they do through mechanisms like pipes, shared memory, message queues, and signals — all managed by the OS.</p>\n</li>\n<li>\n<p><strong>Synchronization</strong>: The OS provides tools like semaphores and mutexes to help processes coordinate when accessing shared resources, preventing conflicts.</p>\n</li>\n</ul>\n<p>When you open Chrome, Word, and Spotify at the same time, each runs as a separate process with its own memory space and resources. The OS juggles them all, rapidly switching between them to create the illusion they’re all running simultaneously. If Chrome crashes, the OS ensures that the problem is contained within Chrome’s process boundaries, allowing Word and Spotify to continue playing your favorite tunes without missing a beat. Pretty neat, right?</p>\n<h4 id=\"resources-the-currency-of-computing\">Resources: The Currency of Computing</h4>\n<p>Resources are all the things programs need to run — like CPU time, memory, disk space, network bandwidth, and access to devices like printers or graphics cards.</p>\n<p>The OS is ultimately a sophisticated resource manager that:</p>\n<ul>\n<li>Tracks available resources</li>\n<li>Handles resource requests from applications</li>\n<li>Allocates resources fairly and efficiently</li>\n<li>Recovers resources when programs finish or crash</li>\n</ul>\n<p>At a technical level, resource management involves several complex mechanisms:</p>\n<ul>\n<li>\n<p><strong>Resource Accounting</strong>: The OS maintains detailed metadata about available and allocated resources, including physical memory pages, disk blocks, I/O channels, and CPU utilization statistics.</p>\n</li>\n<li>\n<p><strong>Resource Scheduling</strong>: For time-shared resources like CPU, the OS implements scheduling algorithms with policies that optimize for different goals:</p>\n<ul>\n<li>Throughput (maximizing total work completed)</li>\n<li>Response time (minimizing user-perceived delay)</li>\n<li>Fairness (ensuring all processes get adequate resources)</li>\n<li>Priority satisfaction (allocating more resources to important processes)</li>\n</ul>\n</li>\n<li>\n<p><strong>Resource Protection</strong>: The OS implements access control mechanisms to prevent unauthorized use of resources, including:</p>\n<ul>\n<li>Capability-based security models</li>\n<li>Access control lists (ACLs)</li>\n<li>Role-based access control (RBAC)</li>\n</ul>\n</li>\n<li>\n<p><strong>Resource Deadlock Prevention</strong>: The OS must handle situations where multiple processes are waiting for resources held by each other. It uses techniques like:</p>\n<ul>\n<li>Resource allocation graphs to detect cycles</li>\n<li>Banker’s algorithm to ensure safe allocation states</li>\n<li>Timeouts and preemption to break deadlocks</li>\n</ul>\n</li>\n</ul>\n<p>For example, when your video editing software asks for 4GB of RAM, the OS checks if that amount is available and then reserves it specifically for that application. Behind the scenes, this involves page table manipulations, possibly moving other data to swap space, and updating internal resource allocation tables.</p>\n<h2 id=\"os-design-approaches-different-architectures-for-different-needs\">OS Design Approaches: Different Architectures for Different Needs</h2>\n<p>Operating systems aren’t all built the same way. Over decades, several design approaches have emerged:</p>\n<h4 id=\"1-monolithic-structure\">1. Monolithic Structure</h4>\n<p>Imagine a massive, integrated system where all OS functions operate in a single, large kernel (the core part of the OS).</p>\n<p><strong>Technical Characteristics:</strong></p>\n<ul>\n<li>All OS services run in privileged kernel mode</li>\n<li>Direct function calls between components for efficiency</li>\n<li>Static linking of most system components at compile time</li>\n<li>Typically organized into logical subsystems internally (memory manager, process scheduler, file system, etc.)</li>\n<li>System call interface provides the boundary between user applications and kernel services</li>\n</ul>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Direct communication between components</li>\n<li>Often better performance due to tight integration</li>\n<li>No message-passing overhead between modules</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>A bug in one part can crash the entire system</li>\n<li>Hard to maintain as it grows larger</li>\n<li>Requires complete recompilation for most changes</li>\n</ul>\n<p><strong>Example:</strong> Traditional Unix and early Linux versions used this approach. Linux, while considered monolithic, has evolved to support loadable kernel modules that can be added without recompiling the entire kernel.</p>\n<p><strong>Technical Implementation:</strong> In a monolithic kernel like Linux, when a user program executes a system call (like <code>read()</code>), the CPU switches from user mode to kernel mode, the kernel executes the entire operation within its address space, and then returns control to the user program.</p>\n<h4 id=\"2-layered-structure\">2. Layered Structure</h4>\n<p>Picture a wedding cake with distinct layers, each built on top of the one below, with each layer providing services to the layers above it.</p>\n<p><strong>Technical Characteristics:</strong></p>\n<ul>\n<li>Hierarchical organization with well-defined interfaces between layers</li>\n<li>Lower layers handle more primitive operations (closer to hardware)</li>\n<li>Higher layers implement more abstract functions</li>\n<li>Each layer only uses functions and services of lower layers</li>\n<li>Typically follows the principle of information hiding between layers</li>\n</ul>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Better organization and separation of functions</li>\n<li>Easier to debug and maintain</li>\n<li>Simplifies design and verification</li>\n<li>Changes to one layer don’t affect other layers if interfaces remain stable</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Performance overhead from communication between layers</li>\n<li>Lower layers can become bottlenecks</li>\n<li>Strict layering can lead to duplication of functionality</li>\n<li>Determining the optimal number of layers is challenging</li>\n</ul>\n<p><strong>Example:</strong> THE (Technische Hogeschool Eindhoven) operating system used a strict layered approach with six layers, from hardware management at the bottom to user programs at the top. Modern network protocols like TCP/IP also use a layered design (the OSI model).</p>\n<p><strong>Technical Implementation:</strong> In a layered system, a request like “open a file” traverses down through layers: user interface → file system manager → logical disk manager → disk driver → hardware controller. Each layer processes the request, adds its own control information, and passes it to the next layer.</p>\n<h4 id=\"3-modular-structure\">3. Modular Structure</h4>\n<p>Think of a LEGO set where different components (modules) can be added or removed as needed.</p>\n<p><strong>Technical Characteristics:</strong></p>\n<ul>\n<li>Core kernel with dynamically loadable modules</li>\n<li>Well-defined interfaces and communication protocols between modules</li>\n<li>Object-oriented design principles often used</li>\n<li>Support for hot-swapping modules without system restart</li>\n<li>Configuration and tuning without full recompilation</li>\n</ul>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Flexible and extensible</li>\n<li>Easier to maintain and update individual components</li>\n<li>Facilitates independent development of different parts</li>\n<li>Allows for customization without modifying core functionality</li>\n<li>Only necessary modules need to be loaded, reducing memory footprint</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Requires well-defined interfaces between modules</li>\n<li>Potential performance overhead from communication</li>\n<li>Complex dependency management between modules</li>\n<li>Potential for version compatibility issues</li>\n</ul>\n<p><strong>Example:</strong> Modern Linux is largely modular, allowing kernel modules to be loaded/unloaded. For instance, device drivers, file systems, and networking protocols are implemented as loadable kernel modules (LKMs) with the <code>.ko</code> extension.</p>\n<p><strong>Technical Implementation:</strong> In Linux, the <code>insmod</code> and <code>modprobe</code> commands load kernel modules, which then register themselves with specific kernel subsystems. The kernel maintains a module dependency tree and reference counts to manage module relationships and ensure safe unloading.</p>\n<h4 id=\"4-microkernel-structure\">4. Microkernel Structure</h4>\n<p>Imagine keeping only the absolute essentials in the core kernel and running everything else as separate services.</p>\n<p><strong>Technical Characteristics:</strong></p>\n<ul>\n<li>Minimal kernel handling only critical functions:\n<ul>\n<li>Low-level memory management</li>\n<li>Basic inter-process communication (IPC)</li>\n<li>Elementary process scheduling</li>\n</ul>\n</li>\n<li>All other OS services (file systems, device drivers, network protocols) run as user-mode processes</li>\n<li>Communication via message passing through IPC mechanisms</li>\n<li>Hardware abstraction layer often included in the microkernel</li>\n</ul>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Improved reliability (if one service crashes, others continue)</li>\n<li>Better security through isolation</li>\n<li>Easier to extend and maintain</li>\n<li>Smaller trusted computing base (TCB)</li>\n<li>More portable across hardware platforms</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Performance overhead from message-passing IPC</li>\n<li>More complex design</li>\n<li>Increased context-switching overhead</li>\n<li>Potentially higher latency for system calls</li>\n</ul>\n<p><strong>Example:</strong> MINIX was designed as a true microkernel system for educational purposes. QNX is a commercial real-time OS with microkernel architecture used in automotive and industrial systems. macOS/iOS is partially based on a hybrid kernel called XNU that combines microkernel design elements with monolithic components.</p>\n<p><strong>Technical Implementation:</strong> In a microkernel system like MINIX, when an application needs to read a file, it sends a message to the file system server, which processes the request and sends a message to the disk driver, which then interacts with the hardware. The microkernel itself only handles the passing of these messages between processes.</p>\n<h2 id=\"how-security-networking-and-multimedia-shape-modern-os-design\">How Security, Networking, and Multimedia Shape Modern OS Design</h2>\n<p>Modern operating systems have evolved dramatically to address new challenges:</p>\n<h4 id=\"security-considerations\">Security Considerations</h4>\n<p>Security has become a primary design concern for OS developers:</p>\n<ul>\n<li>\n<p><strong>Process Isolation</strong>: Prevents one app from accessing another’s data through memory protection units (MPUs) and virtual memory techniques. Modern CPUs implement protection rings (with ring 0 for kernel mode and ring 3 for user mode) to enforce privilege separation.</p>\n</li>\n<li>\n<p><strong>User Permissions</strong>: Control who can access what through access control mechanisms:</p>\n<ul>\n<li>Discretionary Access Control (DAC): Owner-based permissions (like Unix’s read/write/execute bits)</li>\n<li>Mandatory Access Control (MAC): System-enforced policies (like SELinux)</li>\n<li>Role-Based Access Control (RBAC): Permissions based on user roles</li>\n</ul>\n</li>\n<li>\n<p><strong>Encryption</strong>: Protects sensitive data through techniques like:</p>\n<ul>\n<li>Full disk encryption (BitLocker, FileVault)</li>\n<li>Secure boot with trusted platform modules (TPMs)</li>\n<li>Memory encryption to prevent cold boot attacks</li>\n<li>Encrypted swap to protect data paged to disk</li>\n</ul>\n</li>\n<li>\n<p><strong>Secure Boot</strong>: Ensures the system hasn’t been tampered with by verifying digital signatures of boot components and creating a chain of trust from firmware to OS kernel.</p>\n</li>\n<li>\n<p><strong>Regular Security Updates</strong>: Patch vulnerabilities through a structured process:</p>\n<ul>\n<li>Security bulletins to notify users</li>\n<li>CVE (Common Vulnerabilities and Exposures) tracking</li>\n<li>Patches distributed through centralized update mechanisms</li>\n</ul>\n</li>\n</ul>\n<p>These security features aren’t add-ons; they’re deeply integrated into the core OS design. Modern operating systems also implement Address Space Layout Randomization (ASLR), Stack Canaries, Data Execution Prevention (DEP), and sandboxing techniques to mitigate various attack vectors.</p>\n<h4 id=\"networking-integration\">Networking Integration</h4>\n<p>Today’s operating systems are built with the assumption that devices will be connected:</p>\n<ul>\n<li>\n<p><strong>Network Stack</strong>: Built into the kernel with implementation of:</p>\n<ul>\n<li>Protocol layers (Ethernet, IP, TCP/UDP)</li>\n<li>Socket interfaces for application communication</li>\n<li>Protocol-independent mechanisms like Berkeley sockets or Windows Winsock</li>\n<li>Buffering and flow control mechanisms</li>\n</ul>\n</li>\n<li>\n<p><strong>Seamless File Sharing</strong>: Across devices through protocols and services like:</p>\n<ul>\n<li>Server Message Block (SMB)/Common Internet File System (CIFS) for Windows</li>\n<li>Network File System (NFS) for Unix/Linux systems</li>\n<li>Apple Filing Protocol (AFP) and SMB for macOS</li>\n<li>Distributed file systems like Andrew File System (AFS)</li>\n</ul>\n</li>\n<li>\n<p><strong>Remote Access Capabilities</strong>:</p>\n<ul>\n<li>Secure Shell (SSH) for command-line access</li>\n<li>Remote Desktop Protocol (RDP) for Windows</li>\n<li>Virtual Network Computing (VNC) for cross-platform support</li>\n<li>X11 forwarding for Unix/Linux GUI applications</li>\n</ul>\n</li>\n<li>\n<p><strong>Distributed Computing Support</strong>:</p>\n<ul>\n<li>Remote procedure calls (RPCs) and distributed objects</li>\n<li>Clustering and load balancing capabilities</li>\n<li>Distributed locking mechanisms</li>\n<li>Support for message queuing systems</li>\n</ul>\n</li>\n<li>\n<p><strong>Built-in Network Protection</strong>:</p>\n<ul>\n<li>Stateful packet inspection firewalls</li>\n<li>Network Address Translation (NAT) for sharing connections</li>\n<li>Intrusion detection/prevention systems</li>\n<li>Quality of Service (QoS) for bandwidth management</li>\n</ul>\n</li>\n</ul>\n<p>Remember when you had to install separate software to connect to the internet? Now networking is an integral part of every OS, with sophisticated capabilities like zero-configuration networking (like Apple’s Bonjour), IPv6 support, and software-defined networking interfaces.</p>\n<h4 id=\"multimedia-support\">Multimedia Support</h4>\n<p>As computers evolved from text-processing machines to multimedia powerhouses, OS design adapted:</p>\n<ul>\n<li>\n<p><strong>Hardware Acceleration for Media</strong>:</p>\n<ul>\n<li>Graphics Processing Unit (GPU) integration for video rendering</li>\n<li>DirectX (Windows) and Metal (Apple) APIs for hardware-accelerated graphics</li>\n<li>OpenGL and Vulkan cross-platform graphics acceleration</li>\n<li>Digital Signal Processor (DSP) utilization for audio processing</li>\n<li>Video decode/encode acceleration through frameworks like VDPAU, VAAPI, and NVENC</li>\n</ul>\n</li>\n<li>\n<p><strong>Advanced Graphics Subsystems</strong>:</p>\n<ul>\n<li>Compositing window managers (like Windows DWM or macOS Quartz Compositor)</li>\n<li>Hardware-accelerated 2D and 3D rendering pipelines</li>\n<li>Multiple display support with different resolutions and refresh rates</li>\n<li>Color management systems for accurate color reproduction</li>\n<li>High dynamic range (HDR) and wide color gamut support</li>\n</ul>\n</li>\n<li>\n<p><strong>Media Streaming Capabilities</strong>:</p>\n<ul>\n<li>Low-latency audio streaming through WASAPI (Windows) or CoreAudio (Apple)</li>\n<li>Video streaming APIs with buffer management</li>\n<li>Adaptive bitrate techniques for network conditions</li>\n<li>Time synchronization between audio and video streams</li>\n<li>Digital Rights Management (DRM) integration</li>\n</ul>\n</li>\n<li>\n<p><strong>Real-time Processing</strong>:</p>\n<ul>\n<li>Priority scheduling for time-sensitive media applications</li>\n<li>Low-latency audio paths with minimal buffer sizes</li>\n<li>Hardware-accelerated video conferencing codecs</li>\n<li>Echo cancellation and noise reduction algorithms</li>\n<li>Camera and microphone privacy controls</li>\n</ul>\n</li>\n<li>\n<p><strong>Media Format Support</strong>:</p>\n<ul>\n<li>Codec frameworks (DirectShow, Media Foundation, AVFoundation)</li>\n<li>Container format handling (MP4, MKV, etc.)</li>\n<li>Metadata extraction and indexing</li>\n<li>Transcoding capabilities for format conversion</li>\n<li>Accessibility features like closed captioning</li>\n</ul>\n</li>\n</ul>\n<p>Modern OS multimedia subsystems are remarkably complex, often involving specialized driver models like Windows Display Driver Model (WDDM) or macOS’s IOKit graphics stack, which provide capabilities far beyond the simple bitmap displays of early operating systems.</p>\n<h2 id=\"bringing-it-all-together\">Bringing It All Together</h2>\n<p>So, what even is an operating system? It’s the sophisticated conductor of your computer’s orchestra, ensuring all the components work together harmoniously. It’s the mediator between your hardware and software, and the platform that makes modern computing possible.</p>\n<p>Next time you start up your device, take a moment to appreciate the incredible complexity working behind the scenes. From managing your CPU cycles to ensuring your files are stored safely, your OS is constantly juggling countless tasks so you can focus on what matters — using your computer to work, create, connect, and play.</p>\n<p>In the next post, we’ll dive into how operating systems handle multiple tasks simultaneously without everything descending into chaos.</p>",{headings:816,localImagePaths:890,remoteImagePaths:891,frontmatter:892,imagePaths:895},[817,818,821,824,827,830,833,836,839,842,845,848,851,854,857,860,863,866,869,872,875,878,881,884,887],{depth:34,slug:45,text:46},{depth:34,slug:819,text:820},"the-os-your-computers-master-coordinator","The OS: Your Computer’s Master Coordinator",{depth:38,slug:822,text:823},"real-life-examples-you-already-know","Real-life Examples You Already Know",{depth:34,slug:825,text:826},"what-does-an-operating-system-actually-do","What Does an Operating System Actually Do?",{depth:38,slug:828,text:829},"resource-management","Resource Management",{depth:38,slug:831,text:832},"user-interface","User Interface",{depth:38,slug:834,text:835},"application-platform","Application Platform",{depth:38,slug:837,text:838},"file-management","File Management",{depth:34,slug:840,text:841},"the-core-abstractions-of-operating-systems","The Core Abstractions of Operating Systems",{depth:38,slug:843,text:844},"abstractions-hiding-complexity-behind-simplicity","Abstractions: Hiding Complexity Behind Simplicity",{depth:38,slug:846,text:847},"processes-the-living-programs","Processes: The Living Programs",{depth:396,slug:849,text:850},"the-process-lifecycle-from-birth-to-termination","The Process Lifecycle: From Birth to Termination",{depth:396,slug:852,text:853},"process-control-the-os-as-traffic-controller","Process Control: The OS as Traffic Controller",{depth:396,slug:855,text:856},"process-relationships-and-communication","Process Relationships and Communication",{depth:38,slug:858,text:859},"resources-the-currency-of-computing","Resources: The Currency of Computing",{depth:34,slug:861,text:862},"os-design-approaches-different-architectures-for-different-needs","OS Design Approaches: Different Architectures for Different Needs",{depth:38,slug:864,text:865},"1-monolithic-structure","1. Monolithic Structure",{depth:38,slug:867,text:868},"2-layered-structure","2. Layered Structure",{depth:38,slug:870,text:871},"3-modular-structure","3. Modular Structure",{depth:38,slug:873,text:874},"4-microkernel-structure","4. Microkernel Structure",{depth:34,slug:876,text:877},"how-security-networking-and-multimedia-shape-modern-os-design","How Security, Networking, and Multimedia Shape Modern OS Design",{depth:38,slug:879,text:880},"security-considerations","Security Considerations",{depth:38,slug:882,text:883},"networking-integration","Networking Integration",{depth:38,slug:885,text:886},"multimedia-support","Multimedia Support",{depth:34,slug:888,text:889},"bringing-it-all-together","Bringing It All Together",[],[],{title:804,date:893,description:807,author:16,thumbnail:808,series:147,seriesOrder:201,minutesRead:894},["Date","2025-05-14T00:00:00.000Z"],"18 min read",[],"intro-to-operating-systems.md","legends-of-toc",{id:897,data:899,body:906,filePath:907,digest:908,rendered:909,legacyId:973},{title:900,author:901,draft:18,date:902,description:903,featured:18,thumbnail:904,series:905,seriesOrder:34},"The Legends of TOC – Turing, Chomsky, Gödel & The Minds That Built Computing",{id:16,collection:17},["Date","2025-03-22T00:00:00.000Z"],"Meet the brilliant minds whose ideas form the foundation of all modern computing systems.","/thumbnails/toc-the-brains.png",{id:23,collection:24},"## Introduction: The Minds Behind the Machines\r\n\r\nWhen you tap on your smartphone screen or ask a virtual assistant a question, you're standing on the shoulders of intellectual giants – visionaries who laid the theoretical groundwork long before modern computers existed.\r\n\r\nTheory of Computation (TOC) wasn't born in a vacuum; it emerged from the dedicated work of some of the most brilliant thinkers in mathematics, linguistics, and logic. These pioneers weren't merely interested in building faster calculators. They were driven by profound curiosity about the fundamental nature of computation itself: What can be computed? How do we define computation? Are there problems that lie beyond computational reach?\r\n\r\nIn this exploration, we'll meet the remarkable individuals whose ideas not only defined TOC but ultimately shaped every aspect of our digital world. Their stories reveal how abstract mathematical theories transformed into the technologies we now take for granted.\r\n\r\n## Table of Contents\r\n\r\n- [Alan Turing: The Father of Computability](#alan-turing-the-father-of-computability)\r\n- [Alonzo Church: The Power of Functions](#alonzo-church-the-power-of-functions)\r\n- [Kurt Gödel: The Limits of Mathematics](#kurt-gödel-the-limits-of-mathematics)\r\n- [Noam Chomsky: The Structure of Languages](#noam-chomsky-the-structure-of-languages)\r\n- [Stephen Kleene: Regular Expressions & Automata](#stephen-kleene-regular-expressions--automata)\r\n- [Emil Post: Pioneering Undecidability](#emil-post-pioneering-undecidability)\r\n- [John von Neumann: The Architecture of Modern Computers](#john-von-neumann-the-architecture-of-modern-computers)\r\n- [Claude Shannon: The Information Pioneer](#claude-shannon-the-information-pioneer)\r\n- [The Legacy: How These Thinkers Shaped Our World](#the-legacy-how-these-thinkers-shaped-our-world)\r\n- [Coming Next: Automata Theory – When Machines Recognize Patterns](#coming-next-automata-theory--when-machines-recognize-patterns)\r\n\r\n## Alan Turing: The Father of Computability\r\n\r\n_(This legend goes beyond TOC! We will dedicate a separate, in-depth article to explore his immense contributions to AI, cryptography, and computing history.)_\r\n\r\n> \"We can only see a short distance ahead, but we can see plenty there that needs to be done.\"\r\n> — Alan Turing\r\n\r\nImagine trying to formalize the concept of \"computation\" before electronic computers even existed. This was Turing's challenge in the 1930s, and his solution was nothing short of revolutionary.\r\n\r\n#### Key Contributions\r\n\r\n- **Turing Machine (1936)** → A deceptively simple mathematical model consisting of a tape with symbols, a read/write head, and a set of rules. This elegant abstraction demonstrated that complex computations could be performed by following simple mechanical procedures. Today's computers are essentially sophisticated implementations of Turing's theoretical machine.\r\n\r\n- **The Halting Problem** → Perhaps Turing's most profound contribution was proving that some problems are fundamentally unsolvable by algorithmic means. He demonstrated that no algorithm can determine whether an arbitrary program will eventually stop running or continue indefinitely. This discovery established the first concrete limits on what computers can accomplish, regardless of their processing power.\r\n\r\n- **Breaking the Enigma Code** → During World War II, Turing led the team at Bletchley Park that cracked the German Enigma encryption. His work not only shortened the war by an estimated two to four years (saving millions of lives) but also established foundations for modern cryptography and computer design.\r\n\r\n- **Turing Test** → In his 1950 paper \"Computing Machinery and Intelligence,\" Turing proposed his famous test for machine intelligence: if a human evaluator cannot reliably distinguish between responses from a machine and a human, the machine could be considered \"intelligent.\" This thought experiment continues to influence AI research today.\r\n\r\nTuring's tragic personal story – his prosecution for homosexuality and subsequent suicide – serves as a somber reminder of the human cost of prejudice. Despite his short life, his ideas fundamentally altered human history, defining the theoretical boundaries of computation and setting the stage for artificial intelligence.\r\n\r\n## Alonzo Church: The Power of Functions\r\n\r\n> \"Everything computable can be computed by lambda calculus.\"\r\n> — Alonzo Church\r\n\r\nWhile Turing approached computation from a machine-oriented perspective, Church arrived at similar conclusions from a purely mathematical angle. Their complementary approaches together cemented our understanding of computation.\r\n\r\n#### Key Contributions\r\n\r\n- **Lambda Calculus (1930s)** → Church developed a formal system for expressing computation based on function abstraction and application. This elegant mathematical notation proved capable of expressing any computable function. Though it might look abstract at first glance, lambda calculus forms the theoretical foundation of functional programming languages like Haskell, Lisp, and Clojure, and influences features in Python, JavaScript, and most modern languages.\r\n\r\n- **Church-Turing Thesis** → Working independently, Church and Turing arrived at equivalent models of computation. Their combined insight – that any effectively calculable function can be computed by a Turing machine – defines the boundaries of what is computable. This thesis remains unchallenged and serves as the bedrock of computational theory.\r\n\r\n- **Church Encoding** → Church demonstrated how to represent data structures and operations using only functions – no numbers or other primitives needed! This showed the surprising expressiveness of pure functions and influenced programming language design for generations.\r\n\r\nChurch's work might seem highly theoretical, but its impact is tangible in modern software development. Every time you use a functional programming approach – passing functions as arguments, using anonymous functions, or applying map/filter/reduce operations – you're leveraging Church's intellectual legacy.\r\n\r\n## Kurt Gödel: The Limits of Mathematics\r\n\r\n> \"Either mathematics is too big for the human mind, or the human mind is more than a machine.\"\r\n> — Kurt Gödel\r\n\r\nGödel shook the foundations of mathematics and, by extension, computing, by demonstrating that certain limitations are inherent to formal systems themselves.\r\n\r\n#### Key Contributions\r\n\r\n- **Incompleteness Theorems (1931)** → In what many consider one of the most important mathematical results of the 20th century, Gödel proved that in any formal mathematical system powerful enough to describe basic arithmetic, there will always exist true statements that cannot be proven within that system. This shattering result showed that mathematics contained inherent limitations – a revolutionary concept that deeply influenced the development of computer science.\r\n\r\n- **Computability & Logic** → Gödel's work provided the logical framework that Turing and Church extended into computability theory. His formalization of recursive functions directly contributed to defining what it means for a function to be \"computable.\"\r\n\r\n- **Constructive Proofs** → Gödel's methods for constructing self-referential statements (statements that \"talk about themselves\") laid groundwork for important computer science concepts like recursion and self-modifying code.\r\n\r\nThe philosophical implications of Gödel's work extend beyond pure mathematics. His theorems suggest fundamental limitations to what can be formally proven or computed – even with unlimited computing power. This insight continues to influence discussions about artificial intelligence, the nature of consciousness, and whether human understanding can ever be fully replicated by machines.\r\n\r\n## Noam Chomsky: The Structure of Languages\r\n\r\n> \"Language is not just words. It's a culture, a tradition, a unification of a community, a whole history that creates what a community is. It's all embodied in a language.\"\r\n> — Noam Chomsky\r\n\r\nPrimarily known for his revolutionary work in linguistics, Chomsky created a bridge between human languages and formal computation that fundamentally transformed how we understand both.\r\n\r\n#### Key Contributions\r\n\r\n- **Chomsky Hierarchy (1956)** → Chomsky classified formal languages into four increasingly powerful categories based on the complexity of rules needed to generate them:\r\n\r\n  - Type 3: Regular Languages (recognized by finite automata)\r\n  - Type 2: Context-Free Languages (recognized by pushdown automata)\r\n  - Type 1: Context-Sensitive Languages (recognized by linear bounded automata)\r\n  - Type 0: Recursively Enumerable Languages (recognized by Turing machines)\r\n\r\n  This hierarchy provides the theoretical foundation for compiler design, parsing algorithms, and formal verification systems. Every time you write code in a programming language, the compiler uses Chomsky's theories to understand your instructions.\r\n\r\n- **Generative Grammar** → Chomsky proposed that human languages are generated by rule-based systems, similar to formal languages. This insight created a theoretical framework for natural language processing and computational linguistics, enabling technologies like speech recognition, machine translation, and text analysis.\r\n\r\n- **Universal Grammar** → His controversial but influential theory suggests humans possess innate language acquisition capabilities – an idea that continues to inform research in cognitive science, language learning, and artificial intelligence.\r\n\r\nChomsky's work on formal languages has profound practical applications in programming language design, compiler construction, and natural language processing. When your code editor highlights a syntax error or your voice assistant understands your question, you're witnessing Chomsky's intellectual legacy in action.\r\n\r\nInterestingly, Chomsky himself has been a prominent critic of certain approaches to artificial intelligence, arguing that statistical methods alone cannot capture the true nature of human language and cognition – a perspective that continues to stimulate important debates in the field.\r\n\r\n## Stephen Kleene: Regular Expressions & Automata\r\n\r\n> \"Mathematics is the tool specially suited for dealing with abstract concepts of any kind.\"\r\n> — Stephen Kleene\r\n\r\nKleene's work on regular expressions and finite automata might be the most widely applied aspect of theoretical computer science in everyday technology.\r\n\r\n#### Key Contributions\r\n\r\n- **Regular Expressions (1950s)** → Kleene formalized the concept of regular languages and the notation for describing them, leading to what we now call \"regex\" (regular expressions). This powerful pattern-matching tool is used in virtually every programming language, text editor, and search engine. Whenever you search for text patterns, validate input formats, or parse structured data, you're using Kleene's work.\r\n\r\n- **Kleene Star Operation** → The '\\*' operator in regular expressions (indicating \"zero or more occurrences\") is named after him and forms a fundamental building block of pattern matching.\r\n\r\n- **Recursive Function Theory** → Building on Gödel's work, Kleene developed recursive function theory, which helped establish the theoretical foundation for algorithm design and analysis.\r\n\r\n- **Finite Automata** → Kleene established the equivalence between finite automata and regular expressions, showing that these seemingly different formalisms had exactly the same expressive power.\r\n\r\nTo appreciate Kleene's impact, consider how often you use pattern matching in daily computing: searching for files with certain extensions, validating email addresses or phone numbers, finding and replacing text patterns, or filtering data based on specific criteria. His theoretical work on regular languages has become one of the most practical tools in computing.\r\n\r\n## Emil Post: Pioneering Undecidability\r\n\r\n> \"Mathematics is the science of skilful operations with concepts and rules invented just for this purpose.\"\r\n> — Emil Post\r\n\r\nWorking independently and sometimes in the shadow of contemporaries like Turing and Church, Post made profound contributions to computability theory and formal systems.\r\n\r\n#### Key Contributions\r\n\r\n- **Post Correspondence Problem (1946)** → Post formulated this deceptively simple puzzle that proved to be undecidable (no algorithm can solve all instances). This became an important tool for proving other problems undecidable – a key technique in theoretical computer science.\r\n\r\n- **Post Machine** → Similar to a Turing machine but with a different formulation, the Post machine provided an alternative model of computation that helped solidify understanding of computational universality.\r\n\r\n- **Post's Theorem** → His work on degrees of unsolvability established hierarchies of undecidable problems, showing that even among unsolvable problems, some are \"more unsolvable\" than others – an insight that led to important developments in complexity theory.\r\n\r\n- **Production Systems** → Post's work on \"production systems\" (rule-based computational models) influenced the development of expert systems, rule engines, and certain programming paradigms.\r\n\r\nThe beauty of Post's contributions lies in their elegance. The Post Correspondence Problem, for instance, can be explained to a child (match domino-like tiles to make identical strings), yet its implications reach to the heart of computation theory. His work reminds us that profound theoretical results often emerge from seemingly simple questions.\r\n\r\n## John von Neumann: The Architecture of Modern Computers\r\n\r\n> \"If people do not believe that mathematics is simple, it is only because they do not realize how complicated life is.\"\r\n> — John von Neumann\r\n\r\nA polymath of extraordinary breadth, von Neumann bridged the gap between abstract theory and practical computing machines, designing the architecture that powers virtually all modern computers.\r\n\r\n#### Key Contributions\r\n\r\n- **Von Neumann Architecture (1945)** → His revolutionary design placed programs and data in the same memory, allowing programs to modify themselves and enabling the stored-program concept that defines modern computing. This fundamental architecture – with its CPU, memory unit, input/output, and control unit – remains the blueprint for most computing devices today.\r\n\r\n- **Game Theory** → Von Neumann essentially created the field of game theory with his minimax theorem and later work with Oskar Morgenstern. This mathematical framework for analyzing strategic decision-making underpins much of modern economics, political science, evolutionary biology, and artificial intelligence.\r\n\r\n- **Cellular Automata** → His work on self-replicating machines and cellular automata pioneered concepts that would influence fields ranging from artificial life to complex systems theory.\r\n\r\n- **Monte Carlo Method** → During the Manhattan Project, von Neumann developed this statistical approach to solving problems that were too complex for direct computation – a method now widely used in everything from physics simulations to financial modeling.\r\n\r\n- **Numerical Analysis** → He made significant contributions to computational methods for solving differential equations and other numerical problems, establishing foundations for scientific computing.\r\n\r\nVon Neumann's legacy is extraordinary in its breadth. His architecture concepts live on in every digital device, while his work in game theory shapes how we understand strategic interaction in fields from economics to artificial intelligence. Perhaps most remarkably, he bridged pure mathematical theory and practical engineering, demonstrating how abstract ideas could be implemented in physical machines.\r\n\r\n## Claude Shannon: The Information Pioneer\r\n\r\n> \"Information is the resolution of uncertainty.\"\r\n> — Claude Shannon\r\n\r\nThough often associated with information theory rather than TOC specifically, Shannon's work created essential foundations for digital computing and established theoretical limits of information processing.\r\n\r\n#### Key Contributions\r\n\r\n- **Information Theory (1948)** → Shannon's landmark paper \"A Mathematical Theory of Communication\" essentially created information theory, introducing concepts like bits (binary digits), information entropy, channel capacity, and the fundamental limits of data compression and error correction. These ideas form the theoretical foundation for all digital communication.\r\n\r\n- **Boolean Logic Implementation** → In his Master's thesis, Shannon showed how Boolean algebra could be used to design electrical circuits – a breakthrough that established the theoretical foundation for digital circuit design and, ultimately, all digital computers.\r\n\r\n- **Sampling Theorem** → His work on signal sampling (now called the Nyquist-Shannon sampling theorem) established the conditions under which continuous analog signals can be converted to discrete digital form without loss of information – a principle fundamental to digital audio, video, and all forms of analog-to-digital conversion.\r\n\r\n- **Cryptography** → Building on his wartime work, Shannon developed the concept of perfect secrecy and the mathematical principles of secure communication, establishing foundations for modern cryptography.\r\n\r\nShannon's information theory connects directly to TOC through its focus on the fundamental limits of computation and communication. His insights into entropy, information content, and channel capacity established theoretical boundaries that no computational system can exceed, regardless of its design or power.\r\n\r\n## The Legacy: How These Thinkers Shaped Our World\r\n\r\nThese brilliant minds didn't just develop abstract theories – they fundamentally altered human civilization. Their work forms the invisible intellectual infrastructure underlying our digital world:\r\n\r\n- **Every search query** you type relies on algorithms and pattern matching derived from Kleene's regular expressions.\r\n- **Every program you run** executes on hardware architectures descended from von Neumann's designs.\r\n- **Every encrypted message** you send employs principles established by Turing and Shannon.\r\n- **Every programming language** you use is parsed and compiled using Chomsky's formal language theory.\r\n- **Every AI system** builds upon questions first posed by Turing about machine intelligence.\r\n\r\nPerhaps most profoundly, their work collectively established the theoretical boundaries of computation itself – what can be computed, what cannot, and why. These boundaries aren't merely academic; they guide practical research by focusing innovation on what's theoretically possible.\r\n\r\nThe concepts these pioneers developed continue to evolve. Modern complexity theory extends their work to classify problems not just as \"computable\" or \"uncomputable,\" but according to the resources required to solve them. Quantum computing explores computational models that may transcend classical limitations in specific domains. AI research continues to explore the boundaries of machine intelligence that Turing first contemplated.\r\n\r\n#### **Thought Experiment**\r\n\r\nImagine our technological development if these thinkers had never existed. Would someone else have discovered the same principles? Would computing have developed along entirely different lines? Or would we still be working with mechanical calculators, lacking the theoretical foundation to build general-purpose computers?\r\n\r\nThis thought experiment highlights a profound truth: behind every technological revolution lies a theoretical breakthrough. The smartphones, cloud computing, and AI systems we use daily exist because these visionaries first imagined the abstract frameworks that made them possible.\r\n\r\n## Coming Next: Automata Theory – When Machines Recognize Patterns\r\n\r\nNow that we've met the pioneers, we'll dive deeper into one of the foundational areas they established: Automata Theory. We'll explore how these abstract \"machines\" recognize patterns, from the simplest finite automata to the all-powerful Turing machines, and see how they're applied in everything from text processing to compiler design.\r\n\r\nStay curious.","src/content/blog/legends-of-toc.md","d4e7557592b656b0",{html:910,metadata:911},"<h2 id=\"introduction-the-minds-behind-the-machines\">Introduction: The Minds Behind the Machines</h2>\n<p>When you tap on your smartphone screen or ask a virtual assistant a question, you’re standing on the shoulders of intellectual giants – visionaries who laid the theoretical groundwork long before modern computers existed.</p>\n<p>Theory of Computation (TOC) wasn’t born in a vacuum; it emerged from the dedicated work of some of the most brilliant thinkers in mathematics, linguistics, and logic. These pioneers weren’t merely interested in building faster calculators. They were driven by profound curiosity about the fundamental nature of computation itself: What can be computed? How do we define computation? Are there problems that lie beyond computational reach?</p>\n<p>In this exploration, we’ll meet the remarkable individuals whose ideas not only defined TOC but ultimately shaped every aspect of our digital world. Their stories reveal how abstract mathematical theories transformed into the technologies we now take for granted.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#alan-turing-the-father-of-computability\">Alan Turing: The Father of Computability</a></li>\n<li><a href=\"#alonzo-church-the-power-of-functions\">Alonzo Church: The Power of Functions</a></li>\n<li><a href=\"#kurt-g%C3%B6del-the-limits-of-mathematics\">Kurt Gödel: The Limits of Mathematics</a></li>\n<li><a href=\"#noam-chomsky-the-structure-of-languages\">Noam Chomsky: The Structure of Languages</a></li>\n<li><a href=\"#stephen-kleene-regular-expressions--automata\">Stephen Kleene: Regular Expressions &#x26; Automata</a></li>\n<li><a href=\"#emil-post-pioneering-undecidability\">Emil Post: Pioneering Undecidability</a></li>\n<li><a href=\"#john-von-neumann-the-architecture-of-modern-computers\">John von Neumann: The Architecture of Modern Computers</a></li>\n<li><a href=\"#claude-shannon-the-information-pioneer\">Claude Shannon: The Information Pioneer</a></li>\n<li><a href=\"#the-legacy-how-these-thinkers-shaped-our-world\">The Legacy: How These Thinkers Shaped Our World</a></li>\n<li><a href=\"#coming-next-automata-theory--when-machines-recognize-patterns\">Coming Next: Automata Theory – When Machines Recognize Patterns</a></li>\n</ul>\n<h2 id=\"alan-turing-the-father-of-computability\">Alan Turing: The Father of Computability</h2>\n<p><em>(This legend goes beyond TOC! We will dedicate a separate, in-depth article to explore his immense contributions to AI, cryptography, and computing history.)</em></p>\n<blockquote>\n<p>“We can only see a short distance ahead, but we can see plenty there that needs to be done.”\r\n— Alan Turing</p>\n</blockquote>\n<p>Imagine trying to formalize the concept of “computation” before electronic computers even existed. This was Turing’s challenge in the 1930s, and his solution was nothing short of revolutionary.</p>\n<h4 id=\"key-contributions\">Key Contributions</h4>\n<ul>\n<li>\n<p><strong>Turing Machine (1936)</strong> → A deceptively simple mathematical model consisting of a tape with symbols, a read/write head, and a set of rules. This elegant abstraction demonstrated that complex computations could be performed by following simple mechanical procedures. Today’s computers are essentially sophisticated implementations of Turing’s theoretical machine.</p>\n</li>\n<li>\n<p><strong>The Halting Problem</strong> → Perhaps Turing’s most profound contribution was proving that some problems are fundamentally unsolvable by algorithmic means. He demonstrated that no algorithm can determine whether an arbitrary program will eventually stop running or continue indefinitely. This discovery established the first concrete limits on what computers can accomplish, regardless of their processing power.</p>\n</li>\n<li>\n<p><strong>Breaking the Enigma Code</strong> → During World War II, Turing led the team at Bletchley Park that cracked the German Enigma encryption. His work not only shortened the war by an estimated two to four years (saving millions of lives) but also established foundations for modern cryptography and computer design.</p>\n</li>\n<li>\n<p><strong>Turing Test</strong> → In his 1950 paper “Computing Machinery and Intelligence,” Turing proposed his famous test for machine intelligence: if a human evaluator cannot reliably distinguish between responses from a machine and a human, the machine could be considered “intelligent.” This thought experiment continues to influence AI research today.</p>\n</li>\n</ul>\n<p>Turing’s tragic personal story – his prosecution for homosexuality and subsequent suicide – serves as a somber reminder of the human cost of prejudice. Despite his short life, his ideas fundamentally altered human history, defining the theoretical boundaries of computation and setting the stage for artificial intelligence.</p>\n<h2 id=\"alonzo-church-the-power-of-functions\">Alonzo Church: The Power of Functions</h2>\n<blockquote>\n<p>“Everything computable can be computed by lambda calculus.”\r\n— Alonzo Church</p>\n</blockquote>\n<p>While Turing approached computation from a machine-oriented perspective, Church arrived at similar conclusions from a purely mathematical angle. Their complementary approaches together cemented our understanding of computation.</p>\n<h4 id=\"key-contributions-1\">Key Contributions</h4>\n<ul>\n<li>\n<p><strong>Lambda Calculus (1930s)</strong> → Church developed a formal system for expressing computation based on function abstraction and application. This elegant mathematical notation proved capable of expressing any computable function. Though it might look abstract at first glance, lambda calculus forms the theoretical foundation of functional programming languages like Haskell, Lisp, and Clojure, and influences features in Python, JavaScript, and most modern languages.</p>\n</li>\n<li>\n<p><strong>Church-Turing Thesis</strong> → Working independently, Church and Turing arrived at equivalent models of computation. Their combined insight – that any effectively calculable function can be computed by a Turing machine – defines the boundaries of what is computable. This thesis remains unchallenged and serves as the bedrock of computational theory.</p>\n</li>\n<li>\n<p><strong>Church Encoding</strong> → Church demonstrated how to represent data structures and operations using only functions – no numbers or other primitives needed! This showed the surprising expressiveness of pure functions and influenced programming language design for generations.</p>\n</li>\n</ul>\n<p>Church’s work might seem highly theoretical, but its impact is tangible in modern software development. Every time you use a functional programming approach – passing functions as arguments, using anonymous functions, or applying map/filter/reduce operations – you’re leveraging Church’s intellectual legacy.</p>\n<h2 id=\"kurt-gödel-the-limits-of-mathematics\">Kurt Gödel: The Limits of Mathematics</h2>\n<blockquote>\n<p>“Either mathematics is too big for the human mind, or the human mind is more than a machine.”\r\n— Kurt Gödel</p>\n</blockquote>\n<p>Gödel shook the foundations of mathematics and, by extension, computing, by demonstrating that certain limitations are inherent to formal systems themselves.</p>\n<h4 id=\"key-contributions-2\">Key Contributions</h4>\n<ul>\n<li>\n<p><strong>Incompleteness Theorems (1931)</strong> → In what many consider one of the most important mathematical results of the 20th century, Gödel proved that in any formal mathematical system powerful enough to describe basic arithmetic, there will always exist true statements that cannot be proven within that system. This shattering result showed that mathematics contained inherent limitations – a revolutionary concept that deeply influenced the development of computer science.</p>\n</li>\n<li>\n<p><strong>Computability &#x26; Logic</strong> → Gödel’s work provided the logical framework that Turing and Church extended into computability theory. His formalization of recursive functions directly contributed to defining what it means for a function to be “computable.”</p>\n</li>\n<li>\n<p><strong>Constructive Proofs</strong> → Gödel’s methods for constructing self-referential statements (statements that “talk about themselves”) laid groundwork for important computer science concepts like recursion and self-modifying code.</p>\n</li>\n</ul>\n<p>The philosophical implications of Gödel’s work extend beyond pure mathematics. His theorems suggest fundamental limitations to what can be formally proven or computed – even with unlimited computing power. This insight continues to influence discussions about artificial intelligence, the nature of consciousness, and whether human understanding can ever be fully replicated by machines.</p>\n<h2 id=\"noam-chomsky-the-structure-of-languages\">Noam Chomsky: The Structure of Languages</h2>\n<blockquote>\n<p>“Language is not just words. It’s a culture, a tradition, a unification of a community, a whole history that creates what a community is. It’s all embodied in a language.”\r\n— Noam Chomsky</p>\n</blockquote>\n<p>Primarily known for his revolutionary work in linguistics, Chomsky created a bridge between human languages and formal computation that fundamentally transformed how we understand both.</p>\n<h4 id=\"key-contributions-3\">Key Contributions</h4>\n<ul>\n<li>\n<p><strong>Chomsky Hierarchy (1956)</strong> → Chomsky classified formal languages into four increasingly powerful categories based on the complexity of rules needed to generate them:</p>\n<ul>\n<li>Type 3: Regular Languages (recognized by finite automata)</li>\n<li>Type 2: Context-Free Languages (recognized by pushdown automata)</li>\n<li>Type 1: Context-Sensitive Languages (recognized by linear bounded automata)</li>\n<li>Type 0: Recursively Enumerable Languages (recognized by Turing machines)</li>\n</ul>\n<p>This hierarchy provides the theoretical foundation for compiler design, parsing algorithms, and formal verification systems. Every time you write code in a programming language, the compiler uses Chomsky’s theories to understand your instructions.</p>\n</li>\n<li>\n<p><strong>Generative Grammar</strong> → Chomsky proposed that human languages are generated by rule-based systems, similar to formal languages. This insight created a theoretical framework for natural language processing and computational linguistics, enabling technologies like speech recognition, machine translation, and text analysis.</p>\n</li>\n<li>\n<p><strong>Universal Grammar</strong> → His controversial but influential theory suggests humans possess innate language acquisition capabilities – an idea that continues to inform research in cognitive science, language learning, and artificial intelligence.</p>\n</li>\n</ul>\n<p>Chomsky’s work on formal languages has profound practical applications in programming language design, compiler construction, and natural language processing. When your code editor highlights a syntax error or your voice assistant understands your question, you’re witnessing Chomsky’s intellectual legacy in action.</p>\n<p>Interestingly, Chomsky himself has been a prominent critic of certain approaches to artificial intelligence, arguing that statistical methods alone cannot capture the true nature of human language and cognition – a perspective that continues to stimulate important debates in the field.</p>\n<h2 id=\"stephen-kleene-regular-expressions--automata\">Stephen Kleene: Regular Expressions &#x26; Automata</h2>\n<blockquote>\n<p>“Mathematics is the tool specially suited for dealing with abstract concepts of any kind.”\r\n— Stephen Kleene</p>\n</blockquote>\n<p>Kleene’s work on regular expressions and finite automata might be the most widely applied aspect of theoretical computer science in everyday technology.</p>\n<h4 id=\"key-contributions-4\">Key Contributions</h4>\n<ul>\n<li>\n<p><strong>Regular Expressions (1950s)</strong> → Kleene formalized the concept of regular languages and the notation for describing them, leading to what we now call “regex” (regular expressions). This powerful pattern-matching tool is used in virtually every programming language, text editor, and search engine. Whenever you search for text patterns, validate input formats, or parse structured data, you’re using Kleene’s work.</p>\n</li>\n<li>\n<p><strong>Kleene Star Operation</strong> → The ’*’ operator in regular expressions (indicating “zero or more occurrences”) is named after him and forms a fundamental building block of pattern matching.</p>\n</li>\n<li>\n<p><strong>Recursive Function Theory</strong> → Building on Gödel’s work, Kleene developed recursive function theory, which helped establish the theoretical foundation for algorithm design and analysis.</p>\n</li>\n<li>\n<p><strong>Finite Automata</strong> → Kleene established the equivalence between finite automata and regular expressions, showing that these seemingly different formalisms had exactly the same expressive power.</p>\n</li>\n</ul>\n<p>To appreciate Kleene’s impact, consider how often you use pattern matching in daily computing: searching for files with certain extensions, validating email addresses or phone numbers, finding and replacing text patterns, or filtering data based on specific criteria. His theoretical work on regular languages has become one of the most practical tools in computing.</p>\n<h2 id=\"emil-post-pioneering-undecidability\">Emil Post: Pioneering Undecidability</h2>\n<blockquote>\n<p>“Mathematics is the science of skilful operations with concepts and rules invented just for this purpose.”\r\n— Emil Post</p>\n</blockquote>\n<p>Working independently and sometimes in the shadow of contemporaries like Turing and Church, Post made profound contributions to computability theory and formal systems.</p>\n<h4 id=\"key-contributions-5\">Key Contributions</h4>\n<ul>\n<li>\n<p><strong>Post Correspondence Problem (1946)</strong> → Post formulated this deceptively simple puzzle that proved to be undecidable (no algorithm can solve all instances). This became an important tool for proving other problems undecidable – a key technique in theoretical computer science.</p>\n</li>\n<li>\n<p><strong>Post Machine</strong> → Similar to a Turing machine but with a different formulation, the Post machine provided an alternative model of computation that helped solidify understanding of computational universality.</p>\n</li>\n<li>\n<p><strong>Post’s Theorem</strong> → His work on degrees of unsolvability established hierarchies of undecidable problems, showing that even among unsolvable problems, some are “more unsolvable” than others – an insight that led to important developments in complexity theory.</p>\n</li>\n<li>\n<p><strong>Production Systems</strong> → Post’s work on “production systems” (rule-based computational models) influenced the development of expert systems, rule engines, and certain programming paradigms.</p>\n</li>\n</ul>\n<p>The beauty of Post’s contributions lies in their elegance. The Post Correspondence Problem, for instance, can be explained to a child (match domino-like tiles to make identical strings), yet its implications reach to the heart of computation theory. His work reminds us that profound theoretical results often emerge from seemingly simple questions.</p>\n<h2 id=\"john-von-neumann-the-architecture-of-modern-computers\">John von Neumann: The Architecture of Modern Computers</h2>\n<blockquote>\n<p>“If people do not believe that mathematics is simple, it is only because they do not realize how complicated life is.”\r\n— John von Neumann</p>\n</blockquote>\n<p>A polymath of extraordinary breadth, von Neumann bridged the gap between abstract theory and practical computing machines, designing the architecture that powers virtually all modern computers.</p>\n<h4 id=\"key-contributions-6\">Key Contributions</h4>\n<ul>\n<li>\n<p><strong>Von Neumann Architecture (1945)</strong> → His revolutionary design placed programs and data in the same memory, allowing programs to modify themselves and enabling the stored-program concept that defines modern computing. This fundamental architecture – with its CPU, memory unit, input/output, and control unit – remains the blueprint for most computing devices today.</p>\n</li>\n<li>\n<p><strong>Game Theory</strong> → Von Neumann essentially created the field of game theory with his minimax theorem and later work with Oskar Morgenstern. This mathematical framework for analyzing strategic decision-making underpins much of modern economics, political science, evolutionary biology, and artificial intelligence.</p>\n</li>\n<li>\n<p><strong>Cellular Automata</strong> → His work on self-replicating machines and cellular automata pioneered concepts that would influence fields ranging from artificial life to complex systems theory.</p>\n</li>\n<li>\n<p><strong>Monte Carlo Method</strong> → During the Manhattan Project, von Neumann developed this statistical approach to solving problems that were too complex for direct computation – a method now widely used in everything from physics simulations to financial modeling.</p>\n</li>\n<li>\n<p><strong>Numerical Analysis</strong> → He made significant contributions to computational methods for solving differential equations and other numerical problems, establishing foundations for scientific computing.</p>\n</li>\n</ul>\n<p>Von Neumann’s legacy is extraordinary in its breadth. His architecture concepts live on in every digital device, while his work in game theory shapes how we understand strategic interaction in fields from economics to artificial intelligence. Perhaps most remarkably, he bridged pure mathematical theory and practical engineering, demonstrating how abstract ideas could be implemented in physical machines.</p>\n<h2 id=\"claude-shannon-the-information-pioneer\">Claude Shannon: The Information Pioneer</h2>\n<blockquote>\n<p>“Information is the resolution of uncertainty.”\r\n— Claude Shannon</p>\n</blockquote>\n<p>Though often associated with information theory rather than TOC specifically, Shannon’s work created essential foundations for digital computing and established theoretical limits of information processing.</p>\n<h4 id=\"key-contributions-7\">Key Contributions</h4>\n<ul>\n<li>\n<p><strong>Information Theory (1948)</strong> → Shannon’s landmark paper “A Mathematical Theory of Communication” essentially created information theory, introducing concepts like bits (binary digits), information entropy, channel capacity, and the fundamental limits of data compression and error correction. These ideas form the theoretical foundation for all digital communication.</p>\n</li>\n<li>\n<p><strong>Boolean Logic Implementation</strong> → In his Master’s thesis, Shannon showed how Boolean algebra could be used to design electrical circuits – a breakthrough that established the theoretical foundation for digital circuit design and, ultimately, all digital computers.</p>\n</li>\n<li>\n<p><strong>Sampling Theorem</strong> → His work on signal sampling (now called the Nyquist-Shannon sampling theorem) established the conditions under which continuous analog signals can be converted to discrete digital form without loss of information – a principle fundamental to digital audio, video, and all forms of analog-to-digital conversion.</p>\n</li>\n<li>\n<p><strong>Cryptography</strong> → Building on his wartime work, Shannon developed the concept of perfect secrecy and the mathematical principles of secure communication, establishing foundations for modern cryptography.</p>\n</li>\n</ul>\n<p>Shannon’s information theory connects directly to TOC through its focus on the fundamental limits of computation and communication. His insights into entropy, information content, and channel capacity established theoretical boundaries that no computational system can exceed, regardless of its design or power.</p>\n<h2 id=\"the-legacy-how-these-thinkers-shaped-our-world\">The Legacy: How These Thinkers Shaped Our World</h2>\n<p>These brilliant minds didn’t just develop abstract theories – they fundamentally altered human civilization. Their work forms the invisible intellectual infrastructure underlying our digital world:</p>\n<ul>\n<li><strong>Every search query</strong> you type relies on algorithms and pattern matching derived from Kleene’s regular expressions.</li>\n<li><strong>Every program you run</strong> executes on hardware architectures descended from von Neumann’s designs.</li>\n<li><strong>Every encrypted message</strong> you send employs principles established by Turing and Shannon.</li>\n<li><strong>Every programming language</strong> you use is parsed and compiled using Chomsky’s formal language theory.</li>\n<li><strong>Every AI system</strong> builds upon questions first posed by Turing about machine intelligence.</li>\n</ul>\n<p>Perhaps most profoundly, their work collectively established the theoretical boundaries of computation itself – what can be computed, what cannot, and why. These boundaries aren’t merely academic; they guide practical research by focusing innovation on what’s theoretically possible.</p>\n<p>The concepts these pioneers developed continue to evolve. Modern complexity theory extends their work to classify problems not just as “computable” or “uncomputable,” but according to the resources required to solve them. Quantum computing explores computational models that may transcend classical limitations in specific domains. AI research continues to explore the boundaries of machine intelligence that Turing first contemplated.</p>\n<h4 id=\"thought-experiment\"><strong>Thought Experiment</strong></h4>\n<p>Imagine our technological development if these thinkers had never existed. Would someone else have discovered the same principles? Would computing have developed along entirely different lines? Or would we still be working with mechanical calculators, lacking the theoretical foundation to build general-purpose computers?</p>\n<p>This thought experiment highlights a profound truth: behind every technological revolution lies a theoretical breakthrough. The smartphones, cloud computing, and AI systems we use daily exist because these visionaries first imagined the abstract frameworks that made them possible.</p>\n<h2 id=\"coming-next-automata-theory--when-machines-recognize-patterns\">Coming Next: Automata Theory – When Machines Recognize Patterns</h2>\n<p>Now that we’ve met the pioneers, we’ll dive deeper into one of the foundational areas they established: Automata Theory. We’ll explore how these abstract “machines” recognize patterns, from the simplest finite automata to the all-powerful Turing machines, and see how they’re applied in everything from text processing to compiler design.</p>\n<p>Stay curious.</p>",{headings:912,localImagePaths:967,remoteImagePaths:968,frontmatter:969,imagePaths:972},[913,916,917,920,923,926,928,931,933,936,938,941,943,946,948,951,953,956,958,961,964],{depth:34,slug:914,text:915},"introduction-the-minds-behind-the-machines","Introduction: The Minds Behind the Machines",{depth:34,slug:45,text:46},{depth:34,slug:918,text:919},"alan-turing-the-father-of-computability","Alan Turing: The Father of Computability",{depth:38,slug:921,text:922},"key-contributions","Key Contributions",{depth:34,slug:924,text:925},"alonzo-church-the-power-of-functions","Alonzo Church: The Power of Functions",{depth:38,slug:927,text:922},"key-contributions-1",{depth:34,slug:929,text:930},"kurt-gödel-the-limits-of-mathematics","Kurt Gödel: The Limits of Mathematics",{depth:38,slug:932,text:922},"key-contributions-2",{depth:34,slug:934,text:935},"noam-chomsky-the-structure-of-languages","Noam Chomsky: The Structure of Languages",{depth:38,slug:937,text:922},"key-contributions-3",{depth:34,slug:939,text:940},"stephen-kleene-regular-expressions--automata","Stephen Kleene: Regular Expressions & Automata",{depth:38,slug:942,text:922},"key-contributions-4",{depth:34,slug:944,text:945},"emil-post-pioneering-undecidability","Emil Post: Pioneering Undecidability",{depth:38,slug:947,text:922},"key-contributions-5",{depth:34,slug:949,text:950},"john-von-neumann-the-architecture-of-modern-computers","John von Neumann: The Architecture of Modern Computers",{depth:38,slug:952,text:922},"key-contributions-6",{depth:34,slug:954,text:955},"claude-shannon-the-information-pioneer","Claude Shannon: The Information Pioneer",{depth:38,slug:957,text:922},"key-contributions-7",{depth:34,slug:959,text:960},"the-legacy-how-these-thinkers-shaped-our-world","The Legacy: How These Thinkers Shaped Our World",{depth:38,slug:962,text:963},"thought-experiment","Thought Experiment",{depth:34,slug:965,text:966},"coming-next-automata-theory--when-machines-recognize-patterns","Coming Next: Automata Theory – When Machines Recognize Patterns",[],[],{title:900,date:970,description:903,author:16,series:23,thumbnail:904,seriesOrder:34,minutesRead:971},["Date","2025-03-22T00:00:00.000Z"],"13 min read",[],"legends-of-toc.md","multitasking-intro",{id:974,data:976,body:983,filePath:984,digest:985,rendered:986,legacyId:1011},{title:977,author:978,draft:18,date:979,description:980,featured:18,thumbnail:981,series:982,seriesOrder:34},"What's REALLY Happening When Your Computer 'Multitasks'?",{id:16,collection:17},["Date","2025-05-21T00:00:00.000Z"],"A look into the magic of multitasking in operating systems and how it creates the illusion of simultaneous execution of multiple processes.","/thumbnails/multitasking-intro.png",{id:147,collection:24},"## Introduction\r\n\r\nHave you ever wondered how your computer can seemingly run dozens of programs at once? How your Spotify keeps playing while you're browsing the web, chatting on Discord, and running a virus scan — all without missing a beat?\r\n\r\nIt seems like magic, but it's actually an intricate dance choreographed by your operating system. Today, we're pulling back the curtain on this remarkable illusion.\r\n\r\n## Table of Contents\r\n\r\n- [The Multitasking Mirage](#the-multitasking-mirage)\r\n  - [The Multitasking Dance: A Simplified View](#the-multitasking-dance-a-simplified-view)\r\n  - [Why This Matters to You](#why-this-matters-to-you)\r\n  - [The Proof Is in Your Task Manager](#the-proof-is-in-your-task-manager)\r\n- [Coming Up Next](#coming-up-next)\r\n\r\n## The Multitasking Mirage\r\n\r\nYour computer isn't actually doing everything simultaneously — it's creating a convincing illusion of simultaneity through a technique called **time-sharing**.\r\n\r\nThink of it like a street performer spinning plates. The performer isn't actually touching all plates at once, but by moving quickly between them, giving each a little spin before moving to the next, they create the illusion that all plates are being spun simultaneously.\r\n\r\nYour CPU works the same way — rapidly switching between different programs so quickly that to human perception, everything seems to happen at once.\r\n\r\n#### The Multitasking Dance: A Simplified View\r\n\r\n1. You launch multiple programs (creating multiple processes)\r\n2. The OS scheduler puts these processes in a queue\r\n3. Each process gets a small slice of CPU time (typically milliseconds)\r\n4. When a process's time is up, the OS saves its state and switches to the next process\r\n5. This cycle repeats thousands of times per second\r\n\r\n#### Why This Matters to You\r\n\r\nUnderstanding how multitasking works helps explain:\r\n\r\n- Why adding more programs eventually slows down your computer\r\n- Why some programs freeze temporarily while others keep running\r\n- How multi-core processors improve performance\r\n- Why \"force quitting\" a misbehaving program can restore system responsiveness\r\n\r\n#### The Proof Is in Your Task Manager\r\n\r\nWant to see multitasking in action? Open your Task Manager (Windows), Activity Monitor (Mac), or System Monitor (Linux) and watch the CPU usage graphs. You'll see how CPU time is being shared among dozens of processes, with the OS constantly juggling between them.\r\n\r\n## Coming Up Next\r\n\r\nIn our next post, we'll dig deeper into what exactly a process is and how it differs from a program. We'll explore the data structures your OS uses to keep track of all running processes and how these records enable the multitasking magic.","src/content/blog/multitasking-intro.md","6842d3a20b3cf963",{html:987,metadata:988},"<h2 id=\"introduction\">Introduction</h2>\n<p>Have you ever wondered how your computer can seemingly run dozens of programs at once? How your Spotify keeps playing while you’re browsing the web, chatting on Discord, and running a virus scan — all without missing a beat?</p>\n<p>It seems like magic, but it’s actually an intricate dance choreographed by your operating system. Today, we’re pulling back the curtain on this remarkable illusion.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#the-multitasking-mirage\">The Multitasking Mirage</a>\n<ul>\n<li><a href=\"#the-multitasking-dance-a-simplified-view\">The Multitasking Dance: A Simplified View</a></li>\n<li><a href=\"#why-this-matters-to-you\">Why This Matters to You</a></li>\n<li><a href=\"#the-proof-is-in-your-task-manager\">The Proof Is in Your Task Manager</a></li>\n</ul>\n</li>\n<li><a href=\"#coming-up-next\">Coming Up Next</a></li>\n</ul>\n<h2 id=\"the-multitasking-mirage\">The Multitasking Mirage</h2>\n<p>Your computer isn’t actually doing everything simultaneously — it’s creating a convincing illusion of simultaneity through a technique called <strong>time-sharing</strong>.</p>\n<p>Think of it like a street performer spinning plates. The performer isn’t actually touching all plates at once, but by moving quickly between them, giving each a little spin before moving to the next, they create the illusion that all plates are being spun simultaneously.</p>\n<p>Your CPU works the same way — rapidly switching between different programs so quickly that to human perception, everything seems to happen at once.</p>\n<h4 id=\"the-multitasking-dance-a-simplified-view\">The Multitasking Dance: A Simplified View</h4>\n<ol>\n<li>You launch multiple programs (creating multiple processes)</li>\n<li>The OS scheduler puts these processes in a queue</li>\n<li>Each process gets a small slice of CPU time (typically milliseconds)</li>\n<li>When a process’s time is up, the OS saves its state and switches to the next process</li>\n<li>This cycle repeats thousands of times per second</li>\n</ol>\n<h4 id=\"why-this-matters-to-you\">Why This Matters to You</h4>\n<p>Understanding how multitasking works helps explain:</p>\n<ul>\n<li>Why adding more programs eventually slows down your computer</li>\n<li>Why some programs freeze temporarily while others keep running</li>\n<li>How multi-core processors improve performance</li>\n<li>Why “force quitting” a misbehaving program can restore system responsiveness</li>\n</ul>\n<h4 id=\"the-proof-is-in-your-task-manager\">The Proof Is in Your Task Manager</h4>\n<p>Want to see multitasking in action? Open your Task Manager (Windows), Activity Monitor (Mac), or System Monitor (Linux) and watch the CPU usage graphs. You’ll see how CPU time is being shared among dozens of processes, with the OS constantly juggling between them.</p>\n<h2 id=\"coming-up-next\">Coming Up Next</h2>\n<p>In our next post, we’ll dig deeper into what exactly a process is and how it differs from a program. We’ll explore the data structures your OS uses to keep track of all running processes and how these records enable the multitasking magic.</p>",{headings:989,localImagePaths:1005,remoteImagePaths:1006,frontmatter:1007,imagePaths:1010},[990,991,992,995,998,1001,1004],{depth:34,slug:117,text:118},{depth:34,slug:45,text:46},{depth:34,slug:993,text:994},"the-multitasking-mirage","The Multitasking Mirage",{depth:38,slug:996,text:997},"the-multitasking-dance-a-simplified-view","The Multitasking Dance: A Simplified View",{depth:38,slug:999,text:1000},"why-this-matters-to-you","Why This Matters to You",{depth:38,slug:1002,text:1003},"the-proof-is-in-your-task-manager","The Proof Is in Your Task Manager",{depth:34,slug:183,text:184},[],[],{title:977,date:1008,description:980,author:16,thumbnail:981,series:147,seriesOrder:34,minutesRead:1009},["Date","2025-05-21T00:00:00.000Z"],"2 min read",[],"multitasking-intro.md","on-decidability",{id:1012,data:1014,body:1020,filePath:1021,digest:1022,rendered:1023,legacyId:1039},{title:1015,author:1016,draft:18,date:1017,description:105,featured:18,thumbnail:106,series:1018,seriesOrder:1019},"Season 1, Act V: Decidability & The Limits of Machines",{id:16,collection:17},["Date","2025-08-26T00:00:00.000Z"],{id:108,collection:24},5,"## Introduction\r\n\r\nSo far, we've met the giants. Gödel showed us that math is incomplete. Church and Turing gave us two different, yet equivalent, definitions of what is **computable**. They drew a line in the sand, defining the absolute boundaries of what algorithms can ever solve.\r\n\r\nThis leads to a crucial question: If we have a problem, how do we know if it's solvable by an algorithm? This is the idea of **decidability**.\r\n\r\nA problem is **decidable** if there exists an algorithm (a Turing machine) that, for any possible input, is guaranteed to finish and give a clear \"yes\" or \"no\" answer.\r\n\r\n- **Decidable Problem**: \"Is this number even?\" You can easily write an algorithm that takes any number, divides it by two, checks for a remainder, and halts with a \"yes\" or \"no.\"\r\n- **Undecidable Problem**: A problem for which no such \"always-halts\" algorithm can ever be created.\r\n\r\nIt seems abstract, but Alan Turing discovered the most famous undecidable problem of all, and it lies at the very heart of programming.\r\n\r\n## The Ultimate Bug-Checker: The Halting Problem\r\n\r\nEvery programmer has accidentally written an infinite loop. The program gets stuck, running forever, and never produces an answer.\r\n\r\nTuring asked a simple question: **Can we write a program that can look at any other program and its input, and tell us if it will ever stop (halt) or if it will run forever?**\r\n\r\nLet's call this hypothetical program `HaltsChecker`. It would be the ultimate debugging tool. You'd feed it any program and its potential input, and it would spit out a simple `TRUE` (it will halt) or `FALSE` (it will run forever).\r\n\r\n`HaltsChecker(program, input) -> TRUE or FALSE`\r\n\r\nTuring proved, with devastating logic, that creating `HaltsChecker` is impossible.\r\n\r\n## The Proof is a Paradox\r\n\r\nTuring's proof is a beautiful piece of logic that works by contradiction. It goes like this:\r\n\r\n1. **Assume the Impossible**: Let's pretend for a moment that some genius _did_ manage to create `HaltsChecker`. It exists, and it works perfectly.\r\n\r\n2. **Build a Troublemaker**: Now, using `HaltsChecker` as a component, we're going to build a new, mischievous program. Let's call it `Paradox`. `Paradox` takes another program's code as its only input. Here's what it does:\r\n   - It uses `HaltsChecker` to analyze the input program. Specifically, it asks `HaltsChecker`: \"What would happen if this program were run with _itself_ as its own input?\"\r\n   - Based on the answer, `Paradox` does the exact opposite:\r\n     - If `HaltsChecker` says, \"Yes, that program will halt,\" then `Paradox` intentionally throws itself into an infinite loop.\r\n     - If `HaltsChecker` says, \"No, that program will run forever,\" then `Paradox` immediately halts and prints \"Done.\"\r\n\r\n3. **Ask the Killer Question**: Now for the moment that breaks logic. What happens if we feed the `Paradox` program to _itself_? What is the result of `Paradox(Paradox)`?\r\n\r\n   Let's trace the logic:\r\n   - The `Paradox` program starts running. Its first step is to use `HaltsChecker` to analyze its own code. It asks: \"Will `Paradox` halt when given `Paradox` as input?\"\r\n   - **Scenario A**: `HaltsChecker` **answers \"Yes, it will halt.\"** If this is the answer, then the `Paradox` program, following its rules, must do the opposite and **enter an infinite loop**. But that means the original answer was wrong.\r\n   - **Scenario B**: `HaltsChecker` **answers \"No, it will run forever.\"** If this is the answer, then the `Paradox` program, following its rules, must do the opposite and **immediately halt**. But that also means the original answer was wrong.\r\n\r\nWe have a logical impossibility - a contradiction. The `Paradox` program cannot exist. And since the only magical ingredient we used to build it was `HaltsChecker`, our initial assumption must be false.\r\n\r\n> No program can ever exist that can solve the Halting Problem. It is fundamentally, provably undecidable.\r\n\r\nThis discovery wasn't just a party trick for logicians. It established that there are concrete, important problems that computers will never be able to solve, no matter how powerful they become. It's a permanent wall, a hard limit on the power of computation.\r\n\r\nWith these theoretical limits established, our story now pivots. The focus shifts from pure logic to the physical world. How do we actually represent and manipulate information? The answer would come from a man named Claude Shannon, who was about to invent the future.","src/content/blog/on-decidability.md","7a05235abec0f51a",{html:1024,metadata:1025},"<h2 id=\"introduction\">Introduction</h2>\n<p>So far, we’ve met the giants. Gödel showed us that math is incomplete. Church and Turing gave us two different, yet equivalent, definitions of what is <strong>computable</strong>. They drew a line in the sand, defining the absolute boundaries of what algorithms can ever solve.</p>\n<p>This leads to a crucial question: If we have a problem, how do we know if it’s solvable by an algorithm? This is the idea of <strong>decidability</strong>.</p>\n<p>A problem is <strong>decidable</strong> if there exists an algorithm (a Turing machine) that, for any possible input, is guaranteed to finish and give a clear “yes” or “no” answer.</p>\n<ul>\n<li><strong>Decidable Problem</strong>: “Is this number even?” You can easily write an algorithm that takes any number, divides it by two, checks for a remainder, and halts with a “yes” or “no.”</li>\n<li><strong>Undecidable Problem</strong>: A problem for which no such “always-halts” algorithm can ever be created.</li>\n</ul>\n<p>It seems abstract, but Alan Turing discovered the most famous undecidable problem of all, and it lies at the very heart of programming.</p>\n<h2 id=\"the-ultimate-bug-checker-the-halting-problem\">The Ultimate Bug-Checker: The Halting Problem</h2>\n<p>Every programmer has accidentally written an infinite loop. The program gets stuck, running forever, and never produces an answer.</p>\n<p>Turing asked a simple question: <strong>Can we write a program that can look at any other program and its input, and tell us if it will ever stop (halt) or if it will run forever?</strong></p>\n<p>Let’s call this hypothetical program <code>HaltsChecker</code>. It would be the ultimate debugging tool. You’d feed it any program and its potential input, and it would spit out a simple <code>TRUE</code> (it will halt) or <code>FALSE</code> (it will run forever).</p>\n<p><code>HaltsChecker(program, input) -> TRUE or FALSE</code></p>\n<p>Turing proved, with devastating logic, that creating <code>HaltsChecker</code> is impossible.</p>\n<h2 id=\"the-proof-is-a-paradox\">The Proof is a Paradox</h2>\n<p>Turing’s proof is a beautiful piece of logic that works by contradiction. It goes like this:</p>\n<ol>\n<li>\n<p><strong>Assume the Impossible</strong>: Let’s pretend for a moment that some genius <em>did</em> manage to create <code>HaltsChecker</code>. It exists, and it works perfectly.</p>\n</li>\n<li>\n<p><strong>Build a Troublemaker</strong>: Now, using <code>HaltsChecker</code> as a component, we’re going to build a new, mischievous program. Let’s call it <code>Paradox</code>. <code>Paradox</code> takes another program’s code as its only input. Here’s what it does:</p>\n<ul>\n<li>It uses <code>HaltsChecker</code> to analyze the input program. Specifically, it asks <code>HaltsChecker</code>: “What would happen if this program were run with <em>itself</em> as its own input?”</li>\n<li>Based on the answer, <code>Paradox</code> does the exact opposite:\n<ul>\n<li>If <code>HaltsChecker</code> says, “Yes, that program will halt,” then <code>Paradox</code> intentionally throws itself into an infinite loop.</li>\n<li>If <code>HaltsChecker</code> says, “No, that program will run forever,” then <code>Paradox</code> immediately halts and prints “Done.”</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Ask the Killer Question</strong>: Now for the moment that breaks logic. What happens if we feed the <code>Paradox</code> program to <em>itself</em>? What is the result of <code>Paradox(Paradox)</code>?</p>\n<p>Let’s trace the logic:</p>\n<ul>\n<li>The <code>Paradox</code> program starts running. Its first step is to use <code>HaltsChecker</code> to analyze its own code. It asks: “Will <code>Paradox</code> halt when given <code>Paradox</code> as input?”</li>\n<li><strong>Scenario A</strong>: <code>HaltsChecker</code> <strong>answers “Yes, it will halt.”</strong> If this is the answer, then the <code>Paradox</code> program, following its rules, must do the opposite and <strong>enter an infinite loop</strong>. But that means the original answer was wrong.</li>\n<li><strong>Scenario B</strong>: <code>HaltsChecker</code> <strong>answers “No, it will run forever.”</strong> If this is the answer, then the <code>Paradox</code> program, following its rules, must do the opposite and <strong>immediately halt</strong>. But that also means the original answer was wrong.</li>\n</ul>\n</li>\n</ol>\n<p>We have a logical impossibility - a contradiction. The <code>Paradox</code> program cannot exist. And since the only magical ingredient we used to build it was <code>HaltsChecker</code>, our initial assumption must be false.</p>\n<blockquote>\n<p>No program can ever exist that can solve the Halting Problem. It is fundamentally, provably undecidable.</p>\n</blockquote>\n<p>This discovery wasn’t just a party trick for logicians. It established that there are concrete, important problems that computers will never be able to solve, no matter how powerful they become. It’s a permanent wall, a hard limit on the power of computation.</p>\n<p>With these theoretical limits established, our story now pivots. The focus shifts from pure logic to the physical world. How do we actually represent and manipulate information? The answer would come from a man named Claude Shannon, who was about to invent the future.</p>",{headings:1026,localImagePaths:1034,remoteImagePaths:1035,frontmatter:1036,imagePaths:1038},[1027,1028,1031],{depth:34,slug:117,text:118},{depth:34,slug:1029,text:1030},"the-ultimate-bug-checker-the-halting-problem","The Ultimate Bug-Checker: The Halting Problem",{depth:34,slug:1032,text:1033},"the-proof-is-a-paradox","The Proof is a Paradox",[],[],{title:1015,date:1037,description:105,author:16,series:108,thumbnail:106,seriesOrder:1019,minutesRead:135},["Date","2025-08-26T00:00:00.000Z"],[],"on-decidability.md","contributing",{id:1040,data:1042,body:1048,filePath:1049,digest:1050,rendered:1051,legacyId:1072},{title:1043,author:1044,draft:18,date:1045,description:1046,featured:18,thumbnail:1047},"Contributing to Savant",{id:16,collection:17},["Date","2024-11-04T00:00:00.000Z"],"A guide on how to contribute to Savant, an open-source community blog platform.","/og.webp","## Introduction\r\n\r\nSavant is an open-source community blog platform built with Astro. It allows anyone to write and publish articles, tutorials, and guides on various topics. If you’re interested in contributing to Savant, this guide will help you get started. You can write blog posts, improve the platform, fix bugs, and suggest new features. Your contributions are valuable and appreciated. Let’s make Savant better together!\r\n\r\n## Prerequisites\r\n\r\nBefore contributing to Savant, you should have the following.\r\n\r\n- Basic knowledge of Git and GitHub\r\n- Familiarity with Markdown syntax\r\n- Node.js and npm installed on your machine\r\n- A GitHub account\r\n- A code editor like Visual Studio Code\r\n- A sense of humor (optional but recommended)\r\n- A cup of coffee or tea (highly recommended)\r\n- A cat, dog, or any pet to keep you company (optional but encouraged)\r\n- A love for open-source and community-driven projects\r\n\r\nI think that's enough for now! 😆\r\n\r\n## Contributing to Savant\r\n\r\nTo contribute to Savant, follow these steps:\r\n\r\n- Fork the Savant repository on GitHub.\r\n- Clone your forked repository to your local machine.\r\n- Install the project dependencies using npm.\r\n\r\n  ```bash\r\n  npm install\r\n  ```\r\n\r\n- Create a new branch for your changes.\r\n- Make your changes as mentioned below.\r\n\r\n  - Add a new blog post to the `src/content/blog` directory. You can use an existing post as a template. You can learn markdown syntax [here](https://www.markdownguide.org/).\r\n  - Then add your information with the file name the same as your `author` property set in the blog post in the `src/content/author` directory. You can take help from the existing files.\r\n  - Also, don't forget to add your avatar image in the `public/authors/` directory. You can use the existing images as a reference. You can add any image as your avatar, but make sure it's square and not too large.\r\n  - If you want to add a thumbnail image for your blog post, add it to the `public/thumbnails/` directory and use the file name in the `thumbnail` property of your blog post. It is optional but recommended.\r\n  - Also, you can add your social media links like GitHub, Twitter, LinkedIn, etc., in your author file. It is optional but recommended.\r\n  - An additional request is to add your images in the webp format. You can use online tools like [Squoosh](https://squoosh.app/) to convert your images to webp format. It will help improve the performance of the website.\r\n\r\n  For example, if your author property is `aayush-shukla`, then create a file named `aayush-shukla.md` in the `src/content/author` directory.\r\n\r\n  Here, see this:\r\n\r\n  ```markdown\r\n  ---\r\n  title: Some title\r\n  tags: [\"Your\", \"Tags\"]\r\n  date: 2024-11-03\r\n  description: Your post description\r\n  thumbnail: /{your-thumbnail-image-name} (optional, add only the file name, not the full path)\r\n  author: your-name\r\n  ---\r\n\r\n  Your post content goes here.\r\n  ```\r\n\r\n  Then in the `src/content/author` directory, create a file named `your-name.md` and add your information like this:\r\n\r\n  ```markdown\r\n  ---\r\n  name: Your Name\r\n  bio: Your bio\r\n  avatar: /{your-image-name} (add only the file name, not the full path)\r\n  email: your-email (optional)\r\n  github: your-github (optional)\r\n  twitter: your-twitter (optional)\r\n  linkedin: your-linkedin (optional)\r\n  website: your-website (optional)\r\n  ---\r\n  ```\r\n\r\n  Don't forget to add your image in the `public/authors/` directory.\r\n\r\n- Test your changes locally.\r\n\r\n  ```bash\r\n  npm run dev\r\n  ```\r\n\r\n- Commit your changes and push them to your fork.\r\n\r\n  ```bash\r\n  git add .\r\n  git commit -m \"Add a new blog post\"\r\n  git push origin your-branch-name\r\n  ```\r\n\r\n- Create a pull request on GitHub.\r\n- Wait for the maintainers to review your pull request.\r\n- Celebrate your contribution to Savant!\r\n\r\n> Don't make changes to any other files than the blog post and author information. If you want to make any other changes, please create an issue first and discuss it with the maintainers.\r\n\r\n## Additional Tips\r\n\r\nHere are some additional tips to help you contribute to Savant effectively.\r\n\r\n- Be respectful and considerate of others.\r\n- Follow the [Code of Conduct](https://github.com/a2ys/blog/blob/master/CODE_OF_CONDUCT.md) and community guidelines.\r\n- Ask questions if you’re unsure about something.\r\n- Test your changes locally before submitting a pull request.\r\n- Write clear commit messages and pull request descriptions.\r\n- Keep your pull requests small and focused.\r\n- Be patient and open to feedback.\r\n- Have fun and enjoy the process!\r\n\r\n## Final Words\r\n\r\nContributing to open-source projects like Savant is a rewarding experience. It allows you to learn new skills, connect with like-minded people, and make a positive impact on the world. If you’re passionate about writing, sharing knowledge, and helping others, consider contributing to Savant. Your ideas, feedback, and contributions are totally welcome. Together, we can build a better future for everyone. Happy writing!","src/content/blog/contributing.md","2d973ee4975ebdfb",{html:1052,metadata:1053},"<h2 id=\"introduction\">Introduction</h2>\n<p>Savant is an open-source community blog platform built with Astro. It allows anyone to write and publish articles, tutorials, and guides on various topics. If you’re interested in contributing to Savant, this guide will help you get started. You can write blog posts, improve the platform, fix bugs, and suggest new features. Your contributions are valuable and appreciated. Let’s make Savant better together!</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>Before contributing to Savant, you should have the following.</p>\n<ul>\n<li>Basic knowledge of Git and GitHub</li>\n<li>Familiarity with Markdown syntax</li>\n<li>Node.js and npm installed on your machine</li>\n<li>A GitHub account</li>\n<li>A code editor like Visual Studio Code</li>\n<li>A sense of humor (optional but recommended)</li>\n<li>A cup of coffee or tea (highly recommended)</li>\n<li>A cat, dog, or any pet to keep you company (optional but encouraged)</li>\n<li>A love for open-source and community-driven projects</li>\n</ul>\n<p>I think that’s enough for now! 😆</p>\n<h2 id=\"contributing-to-savant\">Contributing to Savant</h2>\n<p>To contribute to Savant, follow these steps:</p>\n<ul>\n<li>\n<p>Fork the Savant repository on GitHub.</p>\n</li>\n<li>\n<p>Clone your forked repository to your local machine.</p>\n</li>\n<li>\n<p>Install the project dependencies using npm.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">npm</span><span style=\"color:#9ECE6A\"> install</span></span></code></pre>\n</li>\n<li>\n<p>Create a new branch for your changes.</p>\n</li>\n<li>\n<p>Make your changes as mentioned below.</p>\n<ul>\n<li>Add a new blog post to the <code>src/content/blog</code> directory. You can use an existing post as a template. You can learn markdown syntax <a href=\"https://www.markdownguide.org/\">here</a>.</li>\n<li>Then add your information with the file name the same as your <code>author</code> property set in the blog post in the <code>src/content/author</code> directory. You can take help from the existing files.</li>\n<li>Also, don’t forget to add your avatar image in the <code>public/authors/</code> directory. You can use the existing images as a reference. You can add any image as your avatar, but make sure it’s square and not too large.</li>\n<li>If you want to add a thumbnail image for your blog post, add it to the <code>public/thumbnails/</code> directory and use the file name in the <code>thumbnail</code> property of your blog post. It is optional but recommended.</li>\n<li>Also, you can add your social media links like GitHub, Twitter, LinkedIn, etc., in your author file. It is optional but recommended.</li>\n<li>An additional request is to add your images in the webp format. You can use online tools like <a href=\"https://squoosh.app/\">Squoosh</a> to convert your images to webp format. It will help improve the performance of the website.</li>\n</ul>\n<p>For example, if your author property is <code>aayush-shukla</code>, then create a file named <code>aayush-shukla.md</code> in the <code>src/content/author</code> directory.</p>\n<p>Here, see this:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\"><code><span class=\"line\"><span style=\"color:#51597D;font-weight:bold\">---</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">title: Some title</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">tags: [\"Your\", \"Tags\"]</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">date: 2024-11-03</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">description: Your post description</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">thumbnail: /{your-thumbnail-image-name} (optional, add only the file name, not the full path)</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">author: your-name</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">---</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">Your post content goes here.</span></span></code></pre>\n<p>Then in the <code>src/content/author</code> directory, create a file named <code>your-name.md</code> and add your information like this:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\"><code><span class=\"line\"><span style=\"color:#51597D;font-weight:bold\">---</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">name: Your Name</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">bio: Your bio</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">avatar: /{your-image-name} (add only the file name, not the full path)</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">email: your-email (optional)</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">github: your-github (optional)</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">twitter: your-twitter (optional)</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">linkedin: your-linkedin (optional)</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">website: your-website (optional)</span></span>\n<span class=\"line\"><span style=\"color:#9AA5CE\">---</span></span></code></pre>\n<p>Don’t forget to add your image in the <code>public/authors/</code> directory.</p>\n</li>\n<li>\n<p>Test your changes locally.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">npm</span><span style=\"color:#9ECE6A\"> run</span><span style=\"color:#9ECE6A\"> dev</span></span></code></pre>\n</li>\n<li>\n<p>Commit your changes and push them to your fork.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> add</span><span style=\"color:#9ECE6A\"> .</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> commit</span><span style=\"color:#E0AF68\"> -m</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">Add a new blog post</span><span style=\"color:#89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">git</span><span style=\"color:#9ECE6A\"> push</span><span style=\"color:#9ECE6A\"> origin</span><span style=\"color:#9ECE6A\"> your-branch-name</span></span></code></pre>\n</li>\n<li>\n<p>Create a pull request on GitHub.</p>\n</li>\n<li>\n<p>Wait for the maintainers to review your pull request.</p>\n</li>\n<li>\n<p>Celebrate your contribution to Savant!</p>\n</li>\n</ul>\n<blockquote>\n<p>Don’t make changes to any other files than the blog post and author information. If you want to make any other changes, please create an issue first and discuss it with the maintainers.</p>\n</blockquote>\n<h2 id=\"additional-tips\">Additional Tips</h2>\n<p>Here are some additional tips to help you contribute to Savant effectively.</p>\n<ul>\n<li>Be respectful and considerate of others.</li>\n<li>Follow the <a href=\"https://github.com/a2ys/blog/blob/master/CODE_OF_CONDUCT.md\">Code of Conduct</a> and community guidelines.</li>\n<li>Ask questions if you’re unsure about something.</li>\n<li>Test your changes locally before submitting a pull request.</li>\n<li>Write clear commit messages and pull request descriptions.</li>\n<li>Keep your pull requests small and focused.</li>\n<li>Be patient and open to feedback.</li>\n<li>Have fun and enjoy the process!</li>\n</ul>\n<h2 id=\"final-words\">Final Words</h2>\n<p>Contributing to open-source projects like Savant is a rewarding experience. It allows you to learn new skills, connect with like-minded people, and make a positive impact on the world. If you’re passionate about writing, sharing knowledge, and helping others, consider contributing to Savant. Your ideas, feedback, and contributions are totally welcome. Together, we can build a better future for everyone. Happy writing!</p>",{headings:1054,localImagePaths:1067,remoteImagePaths:1068,frontmatter:1069,imagePaths:1071},[1055,1056,1059,1061,1064],{depth:34,slug:117,text:118},{depth:34,slug:1057,text:1058},"prerequisites","Prerequisites",{depth:34,slug:1060,text:1043},"contributing-to-savant",{depth:34,slug:1062,text:1063},"additional-tips","Additional Tips",{depth:34,slug:1065,text:1066},"final-words","Final Words",[],[],{title:1043,date:1070,description:1046,author:16,thumbnail:1047,minutesRead:135},["Date","2024-11-04T00:00:00.000Z"],[],"contributing.md","examples-of-system-calls",{id:1073,data:1075,body:1082,filePath:1083,digest:1084,rendered:1085,legacyId:1244},{title:1076,author:1077,draft:18,date:1078,description:1079,featured:18,thumbnail:1080,series:1081,seriesOrder:396},"System Calls in C: Practical Examples",{id:16,collection:17},["Date","2025-05-22T00:00:00.000Z"],"Learn system calls through hands-on C examples, with an in-depth exploration of fork() and process creation patterns.","/thumbnails/system-calls-c-examples.png",{id:147,collection:24},"## Introduction\r\n\r\n> Go through the examples step by step, and don't hesitate to run them on your machine to see the results for yourself. This is a hands-on learning experience. Put on your headphones and get a cup of coffee.\r\n\r\nIn our previous post, we explored the theory behind system calls and their role as the bridge between user space and kernel space. Now it's time to get our hands dirty with actual code. We'll write C programs that make system calls, understand how they work in practice, and dive deep into the fascinating world of process creation with `fork()`.\r\n\r\nBy the end of this post, you'll be able to predict the output of complex fork programs, create specific process hierarchies, and understand the subtle tricks that make system call programming both powerful and tricky.\r\n\r\n## Table of Contents\r\n\r\n- [Setting Up Your Environment](#setting-up-your-environment)\r\n  - [Linux (Native)](#linux-native)\r\n  - [Windows (WSL - Windows Subsystem for Linux)](#windows-wsl---windows-subsystem-for-linux)\r\n  - [Windows (Virtual Machine)](#windows-virtual-machine)\r\n  - [macOS](#macos)\r\n- [Essential Headers and Concepts](#essential-headers-and-concepts)\r\n  - [Important Headers](#important-headers)\r\n  - [Key Data Types](#key-data-types)\r\n  - [Core System Calls We'll Use](#core-system-calls-well-use)\r\n- [Basic I/O System Calls: read() and write()](#basic-io-system-calls-read-and-write)\r\n  - [Example 1: Writing to Screen](#example-1-writing-to-screen)\r\n  - [Example 2: Reading from Keyboard](#example-2-reading-from-keyboard)\r\n- [The fork() System Call](#the-fork-system-call)\r\n  - [Understanding fork(): The Basics](#understanding-fork-the-basics)\r\n  - [Example 3: Basic fork() Usage](#example-3-basic-fork-usage)\r\n  - [Example 4: Process Identification Deep Dive](#example-4-process-identification-deep-dive)\r\n- [The wait() System Call: Process Synchronization](#the-wait-system-call-process-synchronization)\r\n  - [Example 5: Parent Waiting for Child](#example-5-parent-waiting-for-child)\r\n- [Advanced fork() Patterns and Tricks](#advanced-fork-patterns-and-tricks)\r\n  - [Example 6: Creating Multiple Children](#example-6-creating-multiple-children)\r\n  - [Example 7: Creating N Processes from Same Parent](#example-7-creating-n-processes-from-same-parent)\r\n- [The Fork Bomb and Process Count Prediction](#the-fork-bomb-and-process-count-prediction)\r\n  - [Example 8: Predicting Process Count](#example-8-predicting-process-count)\r\n  - [Example 9: Conditional Fork Patterns](#example-9-conditional-fork-patterns)\r\n  - [Example 10: The Tricky && and || Operators](#example-10-the-tricky--and--operators)\r\n    - [Part A: The && Operator](#part-a-the--operator)\r\n    - [Part B: The || Operator](#part-b-the--operator)\r\n    - [Comparison: && vs || with Fork](#comparison--vs--with-fork)\r\n- [Zombie and Orphan Processes](#zombie-and-orphan-processes)\r\n  - [Zombie Processes: The Walking Dead](#zombie-processes-the-walking-dead)\r\n    - [Example 13: Creating a Zombie Process](#example-13-creating-a-zombie-process)\r\n    - [Example 14: Preventing Zombies with Signal Handling (complex example)](#example-14-preventing-zombies-with-signal-handling-complex-example)\r\n  - [Orphan Processes: Lost Children](#orphan-processes-lost-children)\r\n    - [Example 15: Creating an Orphan Process](#example-15-creating-an-orphan-process)\r\n    - [Example 16: Demonstrating the Difference](#example-16-demonstrating-the-difference)\r\n  - [Process States Summary](#process-states-summary)\r\n  - [Best Practices to Avoid Issues](#best-practices-to-avoid-issues)\r\n    - [1. Always Wait for Children](#1-always-wait-for-children)\r\n    - [2. Use Signal Handlers for Multiple Children](#2-use-signal-handlers-for-multiple-children)\r\n    - [3. Check for Errors](#3-check-for-errors)\r\n    - [4. Use Non-blocking Wait for Flexibility](#4-use-non-blocking-wait-for-flexibility)\r\n  - [Example 11: Creating a Specific Process Tree](#example-11-creating-a-specific-process-tree)\r\n- [Process Count Calculation Tricks](#process-count-calculation-tricks)\r\n  - [The Conditional Fork Rule](#the-conditional-fork-rule)\r\n  - [The Short-Circuit Rule](#the-short-circuit-rule)\r\n  - [Practice Problems](#practice-problems)\r\n- [Advanced Topics: Error Handling and Best Practices](#advanced-topics-error-handling-and-best-practices)\r\n  - [Example 12: Robust Fork with Error Handling](#example-12-robust-fork-with-error-handling)\r\n- [Summary: fork() Mastery Checklist](#summary-fork-mastery-checklist)\r\n\r\n## Setting Up Your Environment\r\n\r\nBefore we start coding, let's set up environments where you can run these programs:\r\n\r\n#### Linux (Native)\r\n\r\nIf you're already on Linux, you're all set! Open a terminal and you can compile and run C programs directly:\r\n\r\n```bash\r\ngcc program.c -o program\r\n./program\r\n```\r\n\r\n#### Windows (WSL - Windows Subsystem for Linux)\r\n\r\nWSL provides a complete Linux environment on Windows:\r\n\r\n1. Install WSL2 from Microsoft Store or PowerShell:\r\n\r\n   ```powershell\r\n   wsl --install\r\n   ```\r\n\r\n2. Install a Linux distribution (Ubuntu recommended)\r\n\r\n3. Open the Linux terminal and install build tools:\r\n\r\n   ```bash\r\n   sudo apt update\r\n   sudo apt install build-essential\r\n   ```\r\n\r\n4. Now you can compile and run C programs normally\r\n\r\n#### Windows (Virtual Machine)\r\n\r\nIf you prefer a full Linux VM:\r\n\r\n1. Download VirtualBox or VMware\r\n2. Download Ubuntu ISO\r\n3. Create a new VM and install Ubuntu\r\n4. Install build tools as shown above\r\n\r\n#### macOS\r\n\r\nmacOS is Unix-based, so most examples will work with minor modifications:\r\n\r\n```bash\r\n# Install Xcode command line tools\r\nxcode-select --install\r\n\r\n# Compile and run\r\ngcc program.c -o program\r\n./program\r\n```\r\n\r\n> Some Linux-specific features might not be available or behave differently on macOS.\r\n\r\n## Essential Headers and Concepts\r\n\r\nBefore diving into examples, let's understand the key header files and concepts we'll be using:\r\n\r\n#### Important Headers\r\n\r\n```c\r\n#include <stdio.h>      // Standard I/O functions (printf, scanf)\r\n#include <stdlib.h>     // Standard library (exit, malloc)\r\n#include <unistd.h>     // Unix standard definitions (fork, exec, getpid)\r\n#include <sys/wait.h>   // Wait functions for process synchronization\r\n#include <sys/types.h>  // System data types (pid_t)\r\n#include <string.h>     // String manipulation functions\r\n```\r\n\r\n#### Key Data Types\r\n\r\n```c\r\npid_t    // Process ID type (usually int)\r\nssize_t  // Signed size type for read/write return values\r\n```\r\n\r\n#### Core System Calls We'll Use\r\n\r\n- `fork()` - Create a new process\r\n- `getpid()` - Get current process ID\r\n- `getppid()` - Get parent process ID\r\n- `wait()` - Wait for child process to terminate\r\n- `read()` - Read data from file descriptor\r\n- `write()` - Write data to file descriptor\r\n- `exit()` - Terminate process\r\n\r\n## Basic I/O System Calls: read() and write()\r\n\r\nLet's start with simple examples of reading from keyboard and writing to screen:\r\n\r\n#### Example 1: Writing to Screen\r\n\r\n```c\r\n#include <unistd.h>\r\n#include <string.h>\r\n\r\nint main() {\r\n    char message[] = \"Hello from write() system call!\\n\";\r\n\r\n    // write(file_descriptor, buffer, count)\r\n    // STDOUT_FILENO is file descriptor 1 (standard output)\r\n    write(STDOUT_FILENO, message, strlen(message));\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**Key Points:**\r\n\r\n- `STDOUT_FILENO` (value 1) represents standard output (your terminal)\r\n- `write()` returns the number of bytes written or -1 on error\r\n- Unlike `printf()`, `write()` doesn't format text - it writes raw bytes\r\n\r\n#### Example 2: Reading from Keyboard\r\n\r\n```c\r\n#include <unistd.h>\r\n#include <stdio.h>\r\n\r\nint main() {\r\n    char buffer[100];\r\n    ssize_t bytes_read;\r\n\r\n    write(STDOUT_FILENO, \"Enter some text: \", 17);\r\n\r\n    // read(file_descriptor, buffer, count)\r\n    // STDIN_FILENO is file descriptor 0 (standard input)\r\n    bytes_read = read(STDIN_FILENO, buffer, sizeof(buffer) - 1);\r\n\r\n    if (bytes_read > 0) {\r\n        buffer[bytes_read] = '\\0';  // Null-terminate the string\r\n        write(STDOUT_FILENO, \"You entered: \", 13);\r\n        write(STDOUT_FILENO, buffer, bytes_read);\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**Key Points:**\r\n\r\n- `STDIN_FILENO` (value 0) represents standard input (keyboard)\r\n- `read()` returns the number of bytes read, 0 for EOF, or -1 for error\r\n- Always null-terminate strings when using raw `read()`\r\n\r\n## The fork() System Call\r\n\r\nNow let's explore the most fascinating system call: `fork()`. This is where things get really interesting!\r\n\r\n#### Understanding fork(): The Basics\r\n\r\nThe `fork()` system call creates an exact copy of the current process. After `fork()`:\r\n\r\n- **Parent process**: `fork()` returns the child's process ID (PID)\r\n- **Child process**: `fork()` returns 0\r\n- **Error case**: `fork()` returns -1\r\n\r\n#### Example 3: Basic fork() Usage\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <sys/types.h>\r\n\r\nint main() {\r\n    pid_t pid;\r\n\r\n    printf(\"Before fork: PID = %d\\n\", getpid());\r\n\r\n    pid = fork();  // This is where the magic happens!\r\n\r\n    if (pid == 0) {\r\n        // This code runs in the CHILD process\r\n        printf(\"Child: My PID = %d, Parent PID = %d\\n\",\r\n               getpid(), getppid());\r\n    } else if (pid > 0) {\r\n        // This code runs in the PARENT process\r\n        printf(\"Parent: My PID = %d, Child PID = %d\\n\",\r\n               getpid(), pid);\r\n    } else {\r\n        // fork() failed\r\n        printf(\"Fork failed!\\n\");\r\n        return 1;\r\n    }\r\n\r\n    printf(\"This line executes in BOTH processes!\\n\");\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**Tricky Parts Explained:**\r\n\r\n- After `fork()`, you have TWO processes running the same code\r\n- The `if-else` structure helps differentiate between parent and child\r\n- Both processes execute the final `printf()` - you'll see it twice!\r\n\r\n#### Example 4: Process Identification Deep Dive\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <sys/types.h>\r\n\r\nint main() {\r\n    pid_t pid;\r\n    int x = 100;  // Watch how this variable behaves\r\n\r\n    printf(\"Initial: PID = %d, x = %d\\n\", getpid(), x);\r\n\r\n    pid = fork();\r\n\r\n    if (pid == 0) {\r\n        // Child process\r\n        x = 200;  // Child modifies x\r\n        printf(\"Child: PID = %d, PPID = %d, x = %d\\n\",\r\n               getpid(), getppid(), x);\r\n    } else if (pid > 0) {\r\n        // Parent process\r\n        x = 300;  // Parent modifies x\r\n        printf(\"Parent: PID = %d, Child PID = %d, x = %d\\n\",\r\n               getpid(), pid, x);\r\n    }\r\n\r\n    printf(\"Final: PID = %d, x = %d\\n\", getpid(), x);\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**Key Insight:**\r\n\r\n- Each process has its own memory space\r\n- Modifying `x` in child doesn't affect parent's `x` and vice versa\r\n- This demonstrates process isolation in action\r\n\r\n## The wait() System Call: Process Synchronization\r\n\r\nThe `wait()` system call allows a parent to wait for its child processes to complete.\r\n\r\n#### Example 5: Parent Waiting for Child\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <sys/wait.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    pid_t pid;\r\n    int status;\r\n\r\n    pid = fork();\r\n\r\n    if (pid == 0) {\r\n        // Child process\r\n        printf(\"Child: Starting work...\\n\");\r\n        sleep(3);  // Simulate some work\r\n        printf(\"Child: Work completed!\\n\");\r\n        exit(42);  // Exit with status code 42\r\n    } else if (pid > 0) {\r\n        // Parent process\r\n        printf(\"Parent: Waiting for child to complete...\\n\");\r\n\r\n        wait(&status);  // Wait for ANY child to terminate\r\n\r\n        printf(\"Parent: Child completed with status %d\\n\",\r\n               WEXITSTATUS(status));\r\n    } else {\r\n        printf(\"Fork failed!\\n\");\r\n        return 1;\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**Key Points:**\r\n\r\n- `wait()` blocks the parent until a child terminates\r\n- `WEXITSTATUS(status)` extracts the exit code from the status\r\n- Without `wait()`, child might become a \"zombie\" process\r\n\r\n## Advanced fork() Patterns and Tricks\r\n\r\nNow let's explore complex scenarios that often appear in interviews and exams:\r\n\r\n#### Example 6: Creating Multiple Children\r\n\r\n**Problem:** Create 1 parent and 3 child processes.\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <sys/wait.h>\r\n\r\nint main() {\r\n    pid_t pid;\r\n    int i;\r\n\r\n    printf(\"Parent PID: %d\\n\", getpid());\r\n\r\n    // Create 3 child processes\r\n    for (i = 0; i < 3; i++) {\r\n        pid = fork();\r\n\r\n        if (pid == 0) {\r\n            // Child process\r\n            printf(\"Child %d: PID = %d, PPID = %d\\n\",\r\n                   i + 1, getpid(), getppid());\r\n            return 0;  // CRITICAL: Child must exit here!\r\n        } else if (pid < 0) {\r\n            printf(\"Fork failed for child %d\\n\", i + 1);\r\n            return 1;\r\n        }\r\n        // Parent continues the loop to create next child\r\n    }\r\n\r\n    // Parent waits for all children\r\n    for (i = 0; i < 3; i++) {\r\n        wait(NULL);\r\n    }\r\n\r\n    printf(\"Parent: All children completed\\n\");\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**Tricky Part:** The `return 0` in the child is crucial! Without it, children would also continue the loop and create their own children.\r\n\r\n#### Example 7: Creating N Processes from Same Parent\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <sys/wait.h>\r\n\r\n#define N 4\r\n\r\nint main() {\r\n    pid_t pid;\r\n    int i;\r\n\r\n    printf(\"Master Parent PID: %d creating %d children\\n\", getpid(), N);\r\n\r\n    for (i = 0; i < N; i++) {\r\n        pid = fork();\r\n\r\n        if (pid == 0) {\r\n            // Child process\r\n            printf(\"Child %d: PID = %d, PPID = %d\\n\",\r\n                   i + 1, getpid(), getppid());\r\n            sleep(1);  // Different sleep times to see ordering\r\n            printf(\"Child %d: Exiting\\n\", i + 1);\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // Parent waits for all N children\r\n    for (i = 0; i < N; i++) {\r\n        int status;\r\n        pid_t child_pid = wait(&status);\r\n        printf(\"Parent: Child with PID %d finished\\n\", child_pid);\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n## The Fork Bomb and Process Count Prediction\r\n\r\n#### Example 8: Predicting Process Count\r\n\r\n**Challenge:** How many processes will this create?\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n\r\nint main() {\r\n    fork();\r\n    fork();\r\n    fork();\r\n\r\n    printf(\"Hello from PID: %d\\n\", getpid());\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**Answer:** 8 processes total!\r\n\r\n**Explanation:**\r\n\r\n```txt\r\nInitial:      1 process\r\nAfter fork(): 2 processes  (1 parent + 1 child)\r\nAfter fork(): 4 processes  (each of the 2 processes forks)\r\nAfter fork(): 8 processes  (each of the 4 processes forks)\r\n```\r\n\r\n**Formula:** $n$ `fork()` calls create $2^n$ processes.\r\n\r\n#### Example 9: Conditional Fork Patterns\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n\r\nint main() {\r\n    pid_t pid1, pid2;\r\n\r\n    pid1 = fork();\r\n\r\n    if (pid1 > 0) {  // Only parent creates second child\r\n        pid2 = fork();\r\n    }\r\n\r\n    printf(\"PID: %d, PPID: %d\\n\", getpid(), getppid());\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**How many processes?** 3 processes.\r\n\r\n- Original parent\r\n- First child (doesn't fork again)\r\n- Second child (created only by parent)\r\n\r\n#### Example 10: The Tricky && and || Operators\r\n\r\n###### Part A: The && Operator\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n\r\nint main() {\r\n    printf(\"Before fork() && fork()\\n\");\r\n\r\n    if (fork() && fork()) {\r\n        printf(\"Inside if: PID = %d, PPID = %d\\n\", getpid(), getppid());\r\n    }\r\n\r\n    printf(\"After if: PID = %d, PPID = %d\\n\", getpid(), getppid());\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**Detailed Analysis:**\r\n\r\n1. **Original Process:** Calls first `fork()`\r\n2. **Parent Process:** First `fork()` returns child PID (> 0, true), so evaluates second `fork()`\r\n3. **Child Process:** First `fork()` returns 0 (false), short-circuits - doesn't call second `fork()`\r\n4. **Parent's Second Fork:** Creates another child\r\n\r\n**Execution Flow:**\r\n\r\n```txt\r\nOriginal Process\r\n    |\r\n    fork()\r\n    |     \\\r\nParent    Child (gets 0, stops here)\r\n    |\r\n    fork() (second)\r\n    |     \\\r\nParent    Child2\r\n```\r\n\r\n**Result:** 4 processes total, but only 2 enter the if block (Parent and Child2).\r\n\r\n###### Part B: The || Operator\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n\r\nint main() {\r\n    printf(\"Before fork() || fork()\\n\");\r\n\r\n    if (fork() || fork()) {\r\n        printf(\"Inside if: PID = %d, PPID = %d\\n\", getpid(), getppid());\r\n    }\r\n\r\n    printf(\"After if: PID = %d, PPID = %d\\n\", getpid(), getppid());\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**Detailed Analysis:**\r\n\r\n1. **Original Process:** Calls first `fork()`\r\n2. **Parent Process:** First `fork()` returns child PID (> 0, true), short-circuits - doesn't call second `fork()`\r\n3. **Child Process:** First `fork()` returns 0 (false), so evaluates second `fork()`\r\n\r\n**Execution Flow:**\r\n\r\n```txt\r\nOriginal Process\r\n    |\r\n    fork()\r\n    |     \\\r\nParent    Child\r\n(stops)     |\r\n         fork() (second)\r\n         |     \\\r\n     Child    Child2\r\n```\r\n\r\n**Result:** 4 processes total, but only 3 enter the if block (Parent, Child, Child2).\r\n\r\n###### Comparison: && vs || with Fork\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <sys/wait.h>\r\n\r\nint main() {\r\n    pid_t pid;\r\n    int choice;\r\n\r\n    printf(\"Choose: 1 for &&, 2 for ||\\n\");\r\n    scanf(\"%d\", &choice);\r\n\r\n    printf(\"Process count before: 1\\n\");\r\n\r\n    if (choice == 1) {\r\n        // && version\r\n        if (fork() && fork()) {\r\n            printf(\"&& Inside if: PID = %d\\n\", getpid());\r\n        }\r\n    } else {\r\n        // || version\r\n        if (fork() || fork()) {\r\n            printf(\"|| Inside if: PID = %d\\n\", getpid());\r\n        }\r\n    }\r\n\r\n    printf(\"Final: PID = %d\\n\", getpid());\r\n\r\n    // Wait to see all output clearly\r\n    sleep(1);\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n## Zombie and Orphan Processes\r\n\r\nUnderstanding zombie and orphan processes is crucial for system programming. These are common issues that can affect system performance and resource management.\r\n\r\n#### Zombie Processes: The Walking Dead\r\n\r\nA **zombie process** is a process that has completed execution but still has an entry in the process table. This happens when:\r\n\r\n- Child process terminates\r\n- Parent process hasn't called `wait()` to read the child's exit status\r\n- The child becomes a \"zombie\" - dead but not fully cleaned up\r\n\r\n###### Example 13: Creating a Zombie Process\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    pid_t pid;\r\n\r\n    pid = fork();\r\n\r\n    if (pid == 0) {\r\n        // Child process\r\n        printf(\"Child: PID = %d, PPID = %d\\n\", getpid(), getppid());\r\n        printf(\"Child: Exiting now...\\n\");\r\n        exit(0);  // Child terminates\r\n    } else if (pid > 0) {\r\n        // Parent process\r\n        printf(\"Parent: Child PID = %d\\n\", pid);\r\n        printf(\"Parent: Sleeping for 30 seconds (child becomes zombie)...\\n\");\r\n\r\n        sleep(30);  // Parent doesn't call wait() immediately\r\n\r\n        printf(\"Parent: Now calling wait()...\\n\");\r\n        wait(NULL);  // Finally clean up the zombie\r\n        printf(\"Parent: Zombie cleaned up!\\n\");\r\n    } else {\r\n        printf(\"Fork failed!\\n\");\r\n        return 1;\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**What happens:**\r\n\r\n1. Child terminates immediately\r\n2. Parent sleeps without calling `wait()`\r\n3. Child becomes zombie for 30 seconds\r\n4. During sleep, check with: `ps aux | grep defunct` or `ps aux | grep Z`\r\n5. Parent finally calls `wait()` and cleans up zombie\r\n\r\n**To observe zombie:**\r\n\r\n```bash\r\n# Compile and run the program\r\ngcc zombie_example.c -o zombie_example\r\n./zombie_example &\r\n\r\n# In another terminal, check for zombies\r\nps aux | grep defunct\r\n# or\r\nps aux | grep Z\r\n```\r\n\r\n###### Example 14: Preventing Zombies with Signal Handling (complex example)\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <signal.h>\r\n#include <sys/wait.h>\r\n#include <stdlib.h>\r\n\r\n// Signal handler for SIGCHLD\r\nvoid handle_sigchld(int sig) {\r\n    pid_t pid;\r\n    int status;\r\n\r\n    // Wait for all available children (non-blocking)\r\n    while ((pid = waitpid(-1, &status, WNOHANG)) > 0) {\r\n        printf(\"Signal handler: Child %d terminated\\n\", pid);\r\n    }\r\n}\r\n\r\nint main() {\r\n    pid_t pid;\r\n\r\n    // Install signal handler for SIGCHLD\r\n    signal(SIGCHLD, handle_sigchld);\r\n\r\n    printf(\"Parent: Creating multiple children...\\n\");\r\n\r\n    // Create multiple children\r\n    for (int i = 0; i < 3; i++) {\r\n        pid = fork();\r\n\r\n        if (pid == 0) {\r\n            // Child process\r\n            printf(\"Child %d: PID = %d, sleeping for %d seconds\\n\",\r\n                   i + 1, getpid(), i + 2);\r\n            sleep(i + 2);\r\n            printf(\"Child %d: Exiting\\n\", i + 1);\r\n            exit(i + 1);\r\n        }\r\n    }\r\n\r\n    // Parent does other work while children run\r\n    printf(\"Parent: Doing other work...\\n\");\r\n    for (int i = 0; i < 10; i++) {\r\n        printf(\"Parent: Working... %d\\n\", i);\r\n        sleep(1);\r\n    }\r\n\r\n    printf(\"Parent: Finished work, exiting\\n\");\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**Key Points:**\r\n\r\n- `SIGCHLD` signal is sent when child terminates\r\n- Signal handler automatically cleans up zombies\r\n- `WNOHANG` flag makes `waitpid()` non-blocking\r\n- This prevents zombie accumulation\r\n\r\n#### Orphan Processes: Lost Children\r\n\r\nAn **orphan process** is a child process whose parent has terminated before the child completes. When this happens:\r\n\r\n- The orphan child is \"adopted\" by the init process (PID 1)\r\n- Init process automatically cleans up orphans when they terminate\r\n- Orphans are generally less problematic than zombies\r\n\r\n###### Example 15: Creating an Orphan Process\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    pid_t pid;\r\n\r\n    pid = fork();\r\n\r\n    if (pid == 0) {\r\n        // Child process\r\n        printf(\"Child: PID = %d, PPID = %d\\n\", getpid(), getppid());\r\n        printf(\"Child: Parent will exit soon, I'll become orphan...\\n\");\r\n\r\n        sleep(5);  // Child continues running\r\n\r\n        printf(\"Child: After parent exit - PID = %d, PPID = %d\\n\",\r\n               getpid(), getppid());\r\n        printf(\"Child: Notice PPID changed to 1 (init process)!\\n\");\r\n\r\n        sleep(5);\r\n        printf(\"Child: Exiting now\\n\");\r\n\r\n    } else if (pid > 0) {\r\n        // Parent process\r\n        printf(\"Parent: PID = %d, Child PID = %d\\n\", getpid(), pid);\r\n        printf(\"Parent: Exiting immediately (making child orphan)...\\n\");\r\n\r\n        // Parent exits without waiting for child\r\n        exit(0);\r\n    } else {\r\n        printf(\"Fork failed!\\n\");\r\n        return 1;\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**What happens:**\r\n\r\n1. Parent creates child and exits immediately\r\n2. Child becomes orphan\r\n3. Init process (PID 1) adopts the orphan\r\n4. Child's PPID changes from parent's PID to 1\r\n5. When child exits, init automatically cleans it up\r\n\r\n###### Example 16: Demonstrating the Difference\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <sys/wait.h>\r\n#include <stdlib.h>\r\n\r\nvoid create_zombie() {\r\n    pid_t pid = fork();\r\n\r\n    if (pid == 0) {\r\n        printf(\"Zombie child: PID = %d, exiting...\\n\", getpid());\r\n        exit(0);  // Child exits immediately\r\n    } else {\r\n        printf(\"Zombie parent: Child %d will become zombie\\n\", pid);\r\n        sleep(10);  // Don't wait for child\r\n        printf(\"Zombie parent: Finally cleaning up...\\n\");\r\n        wait(NULL);\r\n    }\r\n}\r\n\r\nvoid create_orphan() {\r\n    pid_t pid = fork();\r\n\r\n    if (pid == 0) {\r\n        printf(\"Orphan child: PID = %d, PPID = %d\\n\", getpid(), getppid());\r\n        sleep(10);  // Child continues after parent exits\r\n        printf(\"Orphan child: PID = %d, PPID = %d (adopted by init)\\n\",\r\n               getpid(), getppid());\r\n    } else {\r\n        printf(\"Orphan parent: PID = %d, exiting immediately\\n\", getpid());\r\n        exit(0);  // Parent exits without waiting\r\n    }\r\n}\r\n\r\nint main() {\r\n    int choice;\r\n\r\n    printf(\"Choose: 1 for Zombie, 2 for Orphan\\n\");\r\n    scanf(\"%d\", &choice);\r\n\r\n    if (choice == 1) {\r\n        create_zombie();\r\n    } else {\r\n        create_orphan();\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n#### Process States Summary\r\n\r\n| Process Type | Parent Status | Child Status | Problem              | Solution                        |\r\n| ------------ | ------------- | ------------ | -------------------- | ------------------------------- |\r\n| **Normal**   | Running       | Running      | None                 | Normal execution                |\r\n| **Zombie**   | Running       | Terminated   | Child not cleaned up | Parent calls `wait()`           |\r\n| **Orphan**   | Terminated    | Running      | Child has no parent  | Init adopts (automatic cleanup) |\r\n\r\n#### Best Practices to Avoid Issues\r\n\r\n###### 1. Always Wait for Children\r\n\r\n```c\r\n// Good practice\r\npid_t pid = fork();\r\nif (pid > 0) {\r\n    wait(NULL);  // or waitpid()\r\n}\r\n```\r\n\r\n###### 2. Use Signal Handlers for Multiple Children\r\n\r\n```c\r\nsignal(SIGCHLD, handle_sigchld);\r\n```\r\n\r\n###### 3. Check for Errors\r\n\r\n```c\r\npid_t pid = fork();\r\nif (pid == -1) {\r\n    perror(\"Fork failed\");\r\n    exit(1);\r\n}\r\n```\r\n\r\n###### 4. Use Non-blocking Wait for Flexibility\r\n\r\n```c\r\npid_t result = waitpid(-1, &status, WNOHANG);\r\nif (result > 0) {\r\n    // Child terminated\r\n} else if (result == 0) {\r\n    // No child ready yet\r\n}\r\n```\r\n\r\n#### Example 11: Creating a Specific Process Tree\r\n\r\n**Problem:** Create this hierarchy:\r\n\r\n```txt\r\nParent\r\n├── Child A\r\n│   ├── Grandchild A1\r\n│   └── Grandchild A2\r\n└── Child B\r\n```\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <sys/wait.h>\r\n\r\nint main() {\r\n    pid_t pid1, pid2;\r\n\r\n    printf(\"Root Parent PID: %d\\n\", getpid());\r\n\r\n    // Create Child A\r\n    pid1 = fork();\r\n    if (pid1 == 0) {\r\n        printf(\"Child A PID: %d, PPID: %d\\n\", getpid(), getppid());\r\n\r\n        // Child A creates Grandchild A1\r\n        pid2 = fork();\r\n        if (pid2 == 0) {\r\n            printf(\"Grandchild A1 PID: %d, PPID: %d\\n\", getpid(), getppid());\r\n            return 0;\r\n        }\r\n\r\n        // Child A creates Grandchild A2\r\n        pid2 = fork();\r\n        if (pid2 == 0) {\r\n            printf(\"Grandchild A2 PID: %d, PPID: %d\\n\", getpid(), getppid());\r\n            return 0;\r\n        }\r\n\r\n        // Child A waits for its children\r\n        wait(NULL);\r\n        wait(NULL);\r\n        return 0;\r\n    }\r\n\r\n    // Parent creates Child B\r\n    pid1 = fork();\r\n    if (pid1 == 0) {\r\n        printf(\"Child B PID: %d, PPID: %d\\n\", getpid(), getppid());\r\n        return 0;\r\n    }\r\n\r\n    // Parent waits for Child A and Child B\r\n    wait(NULL);\r\n    wait(NULL);\r\n\r\n    printf(\"All processes completed\\n\");\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n## Process Count Calculation Tricks\r\n\r\n#### Process Count Calculation Tricks\r\n\r\nFor $n$ consecutive `fork()` calls: **$2^n$` processes**\r\n\r\n#### The Conditional Fork Rule\r\n\r\n```c\r\nif (fork() == 0) {\r\n    fork();  // Only child executes this\r\n}\r\n```\r\n\r\n**Result:** 3 processes (1 parent + 1 child + 1 grandchild)\r\n\r\n#### The Short-Circuit Rule\r\n\r\n```c\r\nfork() && fork();  // If first fork() returns 0 (child), second fork() doesn't execute\r\nfork() || fork();  // If first fork() returns > 0 (parent), second fork() doesn't execute\r\n```\r\n\r\n#### Practice Problems\r\n\r\n**Problem 1:** How many \"Hello\" messages will print?\r\n\r\n```c\r\nfork();\r\nif (fork() == 0) {\r\n    fork();\r\n}\r\nprintf(\"Hello\\n\");\r\n```\r\n\r\n**Answer:** 5 messages\r\n\r\n- Original parent forks → 2 processes\r\n- Both processes check `if (fork() == 0)`\r\n- Parent's fork creates child, parent continues\r\n- Child executes inner fork\r\n- Total: 5 processes, each prints \"Hello\"\r\n\r\n**Problem 2:** Process count for:\r\n\r\n```c\r\nfor (int i = 0; i < 3; i++) {\r\n    fork();\r\n}\r\n```\r\n\r\n**Answer:** $8$ processes ($2^3$)\r\n\r\n## Advanced Topics: Error Handling and Best Practices\r\n\r\n#### Example 12: Robust Fork with Error Handling\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include <sys/wait.h>\r\n#include <errno.h>\r\n#include <string.h>\r\n\r\nint main() {\r\n    pid_t pid;\r\n    int status;\r\n\r\n    pid = fork();\r\n\r\n    if (pid == -1) {\r\n        // Fork failed\r\n        fprintf(stderr, \"Fork failed: %s\\n\", strerror(errno));\r\n        return 1;\r\n    } else if (pid == 0) {\r\n        // Child process\r\n        printf(\"Child: Doing some work...\\n\");\r\n        sleep(2);\r\n        return 42;  // Exit with specific code\r\n    } else {\r\n        // Parent process\r\n        printf(\"Parent: Child PID is %d\\n\", pid);\r\n\r\n        if (waitpid(pid, &status, 0) == -1) {\r\n            fprintf(stderr, \"Wait failed: %s\\n\", strerror(errno));\r\n            return 1;\r\n        }\r\n\r\n        if (WIFEXITED(status)) {\r\n            printf(\"Child exited with status: %d\\n\", WEXITSTATUS(status));\r\n        } else if (WIFSIGNALED(status)) {\r\n            printf(\"Child killed by signal: %d\\n\", WTERMSIG(status));\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n**Key Improvements:**\r\n\r\n- `waitpid()` waits for specific child instead of any child\r\n- Proper error checking with `errno`\r\n- Status analysis with `WIFEXITED()` and `WIFSIGNALED()`\r\n\r\n## Summary: fork() Mastery Checklist\r\n\r\nTo master `fork()`, remember these key points:\r\n\r\n1. **Return Values:**\r\n\r\n   - Parent: gets child PID (> 0)\r\n   - Child: gets 0\r\n   - Error: gets -1\r\n\r\n2. **Process Count Formula:**\r\n\r\n   - $n$ consecutive forks: $2^n$ processes\r\n   - Conditional forks: analyze execution paths\r\n\r\n3. **Common Patterns:**\r\n\r\n   - Always check `fork()` return value\r\n   - Child processes should exit early in loops\r\n   - Parent should `wait()` for children\r\n   - Use `getpid()` and `getppid()` for identification\r\n\r\n4. **Tricky Scenarios:**\r\n\r\n   - Short-circuit operators (`&&` and `||`)\r\n   - Conditional forks\r\n   - Nested forks\r\n\r\n5. **Best Practices:**\r\n\r\n   - Handle `fork()` failures\r\n   - Use `waitpid()` for specific children\r\n   - Check child exit status\r\n   - Avoid fork bombs in production code","src/content/blog/examples-of-system-calls.md","c52bc8044525adc2",{html:1086,metadata:1087},"<h2 id=\"introduction\">Introduction</h2>\n<blockquote>\n<p>Go through the examples step by step, and don’t hesitate to run them on your machine to see the results for yourself. This is a hands-on learning experience. Put on your headphones and get a cup of coffee.</p>\n</blockquote>\n<p>In our previous post, we explored the theory behind system calls and their role as the bridge between user space and kernel space. Now it’s time to get our hands dirty with actual code. We’ll write C programs that make system calls, understand how they work in practice, and dive deep into the fascinating world of process creation with <code>fork()</code>.</p>\n<p>By the end of this post, you’ll be able to predict the output of complex fork programs, create specific process hierarchies, and understand the subtle tricks that make system call programming both powerful and tricky.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#setting-up-your-environment\">Setting Up Your Environment</a>\n<ul>\n<li><a href=\"#linux-native\">Linux (Native)</a></li>\n<li><a href=\"#windows-wsl---windows-subsystem-for-linux\">Windows (WSL - Windows Subsystem for Linux)</a></li>\n<li><a href=\"#windows-virtual-machine\">Windows (Virtual Machine)</a></li>\n<li><a href=\"#macos\">macOS</a></li>\n</ul>\n</li>\n<li><a href=\"#essential-headers-and-concepts\">Essential Headers and Concepts</a>\n<ul>\n<li><a href=\"#important-headers\">Important Headers</a></li>\n<li><a href=\"#key-data-types\">Key Data Types</a></li>\n<li><a href=\"#core-system-calls-well-use\">Core System Calls We’ll Use</a></li>\n</ul>\n</li>\n<li><a href=\"#basic-io-system-calls-read-and-write\">Basic I/O System Calls: read() and write()</a>\n<ul>\n<li><a href=\"#example-1-writing-to-screen\">Example 1: Writing to Screen</a></li>\n<li><a href=\"#example-2-reading-from-keyboard\">Example 2: Reading from Keyboard</a></li>\n</ul>\n</li>\n<li><a href=\"#the-fork-system-call\">The fork() System Call</a>\n<ul>\n<li><a href=\"#understanding-fork-the-basics\">Understanding fork(): The Basics</a></li>\n<li><a href=\"#example-3-basic-fork-usage\">Example 3: Basic fork() Usage</a></li>\n<li><a href=\"#example-4-process-identification-deep-dive\">Example 4: Process Identification Deep Dive</a></li>\n</ul>\n</li>\n<li><a href=\"#the-wait-system-call-process-synchronization\">The wait() System Call: Process Synchronization</a>\n<ul>\n<li><a href=\"#example-5-parent-waiting-for-child\">Example 5: Parent Waiting for Child</a></li>\n</ul>\n</li>\n<li><a href=\"#advanced-fork-patterns-and-tricks\">Advanced fork() Patterns and Tricks</a>\n<ul>\n<li><a href=\"#example-6-creating-multiple-children\">Example 6: Creating Multiple Children</a></li>\n<li><a href=\"#example-7-creating-n-processes-from-same-parent\">Example 7: Creating N Processes from Same Parent</a></li>\n</ul>\n</li>\n<li><a href=\"#the-fork-bomb-and-process-count-prediction\">The Fork Bomb and Process Count Prediction</a>\n<ul>\n<li><a href=\"#example-8-predicting-process-count\">Example 8: Predicting Process Count</a></li>\n<li><a href=\"#example-9-conditional-fork-patterns\">Example 9: Conditional Fork Patterns</a></li>\n<li><a href=\"#example-10-the-tricky--and--operators\">Example 10: The Tricky &#x26;&#x26; and || Operators</a>\n<ul>\n<li><a href=\"#part-a-the--operator\">Part A: The &#x26;&#x26; Operator</a></li>\n<li><a href=\"#part-b-the--operator\">Part B: The || Operator</a></li>\n<li><a href=\"#comparison--vs--with-fork\">Comparison: &#x26;&#x26; vs || with Fork</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#zombie-and-orphan-processes\">Zombie and Orphan Processes</a>\n<ul>\n<li><a href=\"#zombie-processes-the-walking-dead\">Zombie Processes: The Walking Dead</a>\n<ul>\n<li><a href=\"#example-13-creating-a-zombie-process\">Example 13: Creating a Zombie Process</a></li>\n<li><a href=\"#example-14-preventing-zombies-with-signal-handling-complex-example\">Example 14: Preventing Zombies with Signal Handling (complex example)</a></li>\n</ul>\n</li>\n<li><a href=\"#orphan-processes-lost-children\">Orphan Processes: Lost Children</a>\n<ul>\n<li><a href=\"#example-15-creating-an-orphan-process\">Example 15: Creating an Orphan Process</a></li>\n<li><a href=\"#example-16-demonstrating-the-difference\">Example 16: Demonstrating the Difference</a></li>\n</ul>\n</li>\n<li><a href=\"#process-states-summary\">Process States Summary</a></li>\n<li><a href=\"#best-practices-to-avoid-issues\">Best Practices to Avoid Issues</a>\n<ul>\n<li><a href=\"#1-always-wait-for-children\">1. Always Wait for Children</a></li>\n<li><a href=\"#2-use-signal-handlers-for-multiple-children\">2. Use Signal Handlers for Multiple Children</a></li>\n<li><a href=\"#3-check-for-errors\">3. Check for Errors</a></li>\n<li><a href=\"#4-use-non-blocking-wait-for-flexibility\">4. Use Non-blocking Wait for Flexibility</a></li>\n</ul>\n</li>\n<li><a href=\"#example-11-creating-a-specific-process-tree\">Example 11: Creating a Specific Process Tree</a></li>\n</ul>\n</li>\n<li><a href=\"#process-count-calculation-tricks\">Process Count Calculation Tricks</a>\n<ul>\n<li><a href=\"#the-conditional-fork-rule\">The Conditional Fork Rule</a></li>\n<li><a href=\"#the-short-circuit-rule\">The Short-Circuit Rule</a></li>\n<li><a href=\"#practice-problems\">Practice Problems</a></li>\n</ul>\n</li>\n<li><a href=\"#advanced-topics-error-handling-and-best-practices\">Advanced Topics: Error Handling and Best Practices</a>\n<ul>\n<li><a href=\"#example-12-robust-fork-with-error-handling\">Example 12: Robust Fork with Error Handling</a></li>\n</ul>\n</li>\n<li><a href=\"#summary-fork-mastery-checklist\">Summary: fork() Mastery Checklist</a></li>\n</ul>\n<h2 id=\"setting-up-your-environment\">Setting Up Your Environment</h2>\n<p>Before we start coding, let’s set up environments where you can run these programs:</p>\n<h4 id=\"linux-native\">Linux (Native)</h4>\n<p>If you’re already on Linux, you’re all set! Open a terminal and you can compile and run C programs directly:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">gcc</span><span style=\"color:#9ECE6A\"> program.c</span><span style=\"color:#E0AF68\"> -o</span><span style=\"color:#9ECE6A\"> program</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">./program</span></span></code></pre>\n<h4 id=\"windows-wsl---windows-subsystem-for-linux\">Windows (WSL - Windows Subsystem for Linux)</h4>\n<p>WSL provides a complete Linux environment on Windows:</p>\n<ol>\n<li>\n<p>Install WSL2 from Microsoft Store or PowerShell:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"powershell\"><code><span class=\"line\"><span style=\"color:#A9B1D6\">wsl </span><span style=\"color:#89DDFF\">--</span><span style=\"color:#A9B1D6\">install</span></span></code></pre>\n</li>\n<li>\n<p>Install a Linux distribution (Ubuntu recommended)</p>\n</li>\n<li>\n<p>Open the Linux terminal and install build tools:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">sudo</span><span style=\"color:#9ECE6A\"> apt</span><span style=\"color:#9ECE6A\"> update</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">sudo</span><span style=\"color:#9ECE6A\"> apt</span><span style=\"color:#9ECE6A\"> install</span><span style=\"color:#9ECE6A\"> build-essential</span></span></code></pre>\n</li>\n<li>\n<p>Now you can compile and run C programs normally</p>\n</li>\n</ol>\n<h4 id=\"windows-virtual-machine\">Windows (Virtual Machine)</h4>\n<p>If you prefer a full Linux VM:</p>\n<ol>\n<li>Download VirtualBox or VMware</li>\n<li>Download Ubuntu ISO</li>\n<li>Create a new VM and install Ubuntu</li>\n<li>Install build tools as shown above</li>\n</ol>\n<h4 id=\"macos\">macOS</h4>\n<p>macOS is Unix-based, so most examples will work with minor modifications:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># Install Xcode command line tools</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">xcode-select</span><span style=\"color:#E0AF68\"> --install</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># Compile and run</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">gcc</span><span style=\"color:#9ECE6A\"> program.c</span><span style=\"color:#E0AF68\"> -o</span><span style=\"color:#9ECE6A\"> program</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">./program</span></span></code></pre>\n<blockquote>\n<p>Some Linux-specific features might not be available or behave differently on macOS.</p>\n</blockquote>\n<h2 id=\"essential-headers-and-concepts\">Essential Headers and Concepts</h2>\n<p>Before diving into examples, let’s understand the key header files and concepts we’ll be using:</p>\n<h4 id=\"important-headers\">Important Headers</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span><span style=\"color:#51597D;font-style:italic\">      // Standard I/O functions (printf, scanf)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdlib.h</span><span style=\"color:#89DDFF\">></span><span style=\"color:#51597D;font-style:italic\">     // Standard library (exit, malloc)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span><span style=\"color:#51597D;font-style:italic\">     // Unix standard definitions (fork, exec, getpid)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">sys/wait.h</span><span style=\"color:#89DDFF\">></span><span style=\"color:#51597D;font-style:italic\">   // Wait functions for process synchronization</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">sys/types.h</span><span style=\"color:#89DDFF\">></span><span style=\"color:#51597D;font-style:italic\">  // System data types (pid_t)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">string.h</span><span style=\"color:#89DDFF\">></span><span style=\"color:#51597D;font-style:italic\">     // String manipulation functions</span></span></code></pre>\n<h4 id=\"key-data-types\">Key Data Types</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">pid_t</span><span style=\"color:#51597D;font-style:italic\">    // Process ID type (usually int)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">ssize_t</span><span style=\"color:#51597D;font-style:italic\">  // Signed size type for read/write return values</span></span></code></pre>\n<h4 id=\"core-system-calls-well-use\">Core System Calls We’ll Use</h4>\n<ul>\n<li><code>fork()</code> - Create a new process</li>\n<li><code>getpid()</code> - Get current process ID</li>\n<li><code>getppid()</code> - Get parent process ID</li>\n<li><code>wait()</code> - Wait for child process to terminate</li>\n<li><code>read()</code> - Read data from file descriptor</li>\n<li><code>write()</code> - Write data to file descriptor</li>\n<li><code>exit()</code> - Terminate process</li>\n</ul>\n<h2 id=\"basic-io-system-calls-read-and-write\">Basic I/O System Calls: read() and write()</h2>\n<p>Let’s start with simple examples of reading from keyboard and writing to screen:</p>\n<h4 id=\"example-1-writing-to-screen\">Example 1: Writing to Screen</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">string.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    char</span><span style=\"color:#9ABDF5\"> message</span><span style=\"color:#9D7CD8;font-style:italic\">[]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">Hello from write() system call!</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // write(file_descriptor, buffer, count)</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // STDOUT_FILENO is file descriptor 1 (standard output)</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    write</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">STDOUT_FILENO</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> message</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> strlen</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">message</span><span style=\"color:#9ABDF5\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Key Points:</strong></p>\n<ul>\n<li><code>STDOUT_FILENO</code> (value 1) represents standard output (your terminal)</li>\n<li><code>write()</code> returns the number of bytes written or -1 on error</li>\n<li>Unlike <code>printf()</code>, <code>write()</code> doesn’t format text - it writes raw bytes</li>\n</ul>\n<h4 id=\"example-2-reading-from-keyboard\">Example 2: Reading from Keyboard</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    char</span><span style=\"color:#C0CAF5\"> buffer</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">100</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    ssize_t</span><span style=\"color:#9ABDF5\"> bytes_read</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    write</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">STDOUT_FILENO</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">Enter some text: </span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 17</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // read(file_descriptor, buffer, count)</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // STDIN_FILENO is file descriptor 0 (standard input)</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    bytes_read </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> read</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">STDIN_FILENO</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> buffer</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> sizeof</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">buffer</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> -</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (bytes_read </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">        buffer</span><span style=\"color:#9ABDF5\">[bytes_read] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> '\\0'</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Null-terminate the string</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        write</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">STDOUT_FILENO</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">You entered: </span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 13</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        write</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">STDOUT_FILENO</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> buffer</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> bytes_read</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Key Points:</strong></p>\n<ul>\n<li><code>STDIN_FILENO</code> (value 0) represents standard input (keyboard)</li>\n<li><code>read()</code> returns the number of bytes read, 0 for EOF, or -1 for error</li>\n<li>Always null-terminate strings when using raw <code>read()</code></li>\n</ul>\n<h2 id=\"the-fork-system-call\">The fork() System Call</h2>\n<p>Now let’s explore the most fascinating system call: <code>fork()</code>. This is where things get really interesting!</p>\n<h4 id=\"understanding-fork-the-basics\">Understanding fork(): The Basics</h4>\n<p>The <code>fork()</code> system call creates an exact copy of the current process. After <code>fork()</code>:</p>\n<ul>\n<li><strong>Parent process</strong>: <code>fork()</code> returns the child’s process ID (PID)</li>\n<li><strong>Child process</strong>: <code>fork()</code> returns 0</li>\n<li><strong>Error case</strong>: <code>fork()</code> returns -1</li>\n</ul>\n<h4 id=\"example-3-basic-fork-usage\">Example 3: Basic fork() Usage</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">sys/types.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Before fork: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // This is where the magic happens!</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // This code runs in the CHILD process</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child: My PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, Parent PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">               getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#BB9AF7\"> if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // This code runs in the PARENT process</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: My PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, Child PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">               getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> pid</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // fork() failed</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Fork failed!</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">This line executes in BOTH processes!</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Tricky Parts Explained:</strong></p>\n<ul>\n<li>After <code>fork()</code>, you have TWO processes running the same code</li>\n<li>The <code>if-else</code> structure helps differentiate between parent and child</li>\n<li>Both processes execute the final <code>printf()</code> - you’ll see it twice!</li>\n</ul>\n<h4 id=\"example-4-process-identification-deep-dive\">Example 4: Process Identification Deep Dive</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">sys/types.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> x </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 100</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Watch how this variable behaves</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Initial: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, x = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> x</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Child process</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        x </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 200</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Child modifies x</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, x = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">               getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> x</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#BB9AF7\"> if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Parent process</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        x </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 300</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Parent modifies x</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, Child PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, x = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">               getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> pid</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> x</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Final: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, x = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> x</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Key Insight:</strong></p>\n<ul>\n<li>Each process has its own memory space</li>\n<li>Modifying <code>x</code> in child doesn’t affect parent’s <code>x</code> and vice versa</li>\n<li>This demonstrates process isolation in action</li>\n</ul>\n<h2 id=\"the-wait-system-call-process-synchronization\">The wait() System Call: Process Synchronization</h2>\n<p>The <code>wait()</code> system call allows a parent to wait for its child processes to complete.</p>\n<h4 id=\"example-5-parent-waiting-for-child\">Example 5: Parent Waiting for Child</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">sys/wait.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdlib.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> status</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Child process</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child: Starting work...</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        sleep</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">3</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Simulate some work</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child: Work completed!</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        exit</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">42</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Exit with status code 42</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#BB9AF7\"> if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Parent process</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: Waiting for child to complete...</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        wait</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">&#x26;</span><span style=\"color:#7AA2F7\">status</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Wait for ANY child to terminate</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: Child completed with status </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">               WEXITSTATUS</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">status</span><span style=\"color:#9ABDF5\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Fork failed!</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Key Points:</strong></p>\n<ul>\n<li><code>wait()</code> blocks the parent until a child terminates</li>\n<li><code>WEXITSTATUS(status)</code> extracts the exit code from the status</li>\n<li>Without <code>wait()</code>, child might become a “zombie” process</li>\n</ul>\n<h2 id=\"advanced-fork-patterns-and-tricks\">Advanced fork() Patterns and Tricks</h2>\n<p>Now let’s explore complex scenarios that often appear in interviews and exams:</p>\n<h4 id=\"example-6-creating-multiple-children\">Example 6: Creating Multiple Children</h4>\n<p><strong>Problem:</strong> Create 1 parent and 3 child processes.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">sys/wait.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent PID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // Create 3 child processes</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#FF9E64\"> 3</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">            // Child process</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">                   i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // CRITICAL: Child must exit here!</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#BB9AF7\"> if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Fork failed for child </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            return</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Parent continues the loop to create next child</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // Parent waits for all children</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#FF9E64\"> 3</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        wait</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">NULL</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: All children completed</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Tricky Part:</strong> The <code>return 0</code> in the child is crucial! Without it, children would also continue the loop and create their own children.</p>\n<h4 id=\"example-7-creating-n-processes-from-same-parent\">Example 7: Creating N Processes from Same Parent</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">sys/wait.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">define</span><span style=\"color:#7AA2F7\"> N</span><span style=\"color:#FF9E64\"> 4</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Master Parent PID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\"> creating </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\"> children</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> N</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> N</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">            // Child process</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">                   i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            sleep</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Different sleep times to see ordering</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">: Exiting</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // Parent waits for all N children</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#9ABDF5\"> N</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        int</span><span style=\"color:#9ABDF5\"> status</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        pid_t</span><span style=\"color:#9ABDF5\"> child_pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> wait</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">&#x26;</span><span style=\"color:#7AA2F7\">status</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: Child with PID </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\"> finished</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> child_pid</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<h2 id=\"the-fork-bomb-and-process-count-prediction\">The Fork Bomb and Process Count Prediction</h2>\n<h4 id=\"example-8-predicting-process-count\">Example 8: Predicting Process Count</h4>\n<p><strong>Challenge:</strong> How many processes will this create?</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Hello from PID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Answer:</strong> 8 processes total!</p>\n<p><strong>Explanation:</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>Initial:      1 process</span></span>\n<span class=\"line\"><span>After fork(): 2 processes  (1 parent + 1 child)</span></span>\n<span class=\"line\"><span>After fork(): 4 processes  (each of the 2 processes forks)</span></span>\n<span class=\"line\"><span>After fork(): 8 processes  (each of the 4 processes forks)</span></span></code></pre>\n<p><strong>Formula:</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> <code>fork()</code> calls create <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> processes.</p>\n<h4 id=\"example-9-conditional-fork-patterns\">Example 9: Conditional Fork Patterns</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#9ABDF5\"> pid2</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    pid1 </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (pid1 </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span><span style=\"color:#51597D;font-style:italic\">  // Only parent creates second child</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        pid2 </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">PID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>How many processes?</strong> 3 processes.</p>\n<ul>\n<li>Original parent</li>\n<li>First child (doesn’t fork again)</li>\n<li>Second child (created only by parent)</li>\n</ul>\n<h4 id=\"example-10-the-tricky--and--operators\">Example 10: The Tricky &#x26;&#x26; and || Operators</h4>\n<h6 id=\"part-a-the--operator\">Part A: The &#x26;&#x26; Operator</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Before fork() &#x26;&#x26; fork()</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#7AA2F7\">fork</span><span style=\"color:#9ABDF5\">() </span><span style=\"color:#BB9AF7\">&#x26;&#x26;</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Inside if: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">After if: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Detailed Analysis:</strong></p>\n<ol>\n<li><strong>Original Process:</strong> Calls first <code>fork()</code></li>\n<li><strong>Parent Process:</strong> First <code>fork()</code> returns child PID (> 0, true), so evaluates second <code>fork()</code></li>\n<li><strong>Child Process:</strong> First <code>fork()</code> returns 0 (false), short-circuits - doesn’t call second <code>fork()</code></li>\n<li><strong>Parent’s Second Fork:</strong> Creates another child</li>\n</ol>\n<p><strong>Execution Flow:</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>Original Process</span></span>\n<span class=\"line\"><span>    |</span></span>\n<span class=\"line\"><span>    fork()</span></span>\n<span class=\"line\"><span>    |     \\</span></span>\n<span class=\"line\"><span>Parent    Child (gets 0, stops here)</span></span>\n<span class=\"line\"><span>    |</span></span>\n<span class=\"line\"><span>    fork() (second)</span></span>\n<span class=\"line\"><span>    |     \\</span></span>\n<span class=\"line\"><span>Parent    Child2</span></span></code></pre>\n<p><strong>Result:</strong> 4 processes total, but only 2 enter the if block (Parent and Child2).</p>\n<h6 id=\"part-b-the--operator\">Part B: The || Operator</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Before fork() || fork()</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#7AA2F7\">fork</span><span style=\"color:#9ABDF5\">() </span><span style=\"color:#BB9AF7\">||</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Inside if: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">After if: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Detailed Analysis:</strong></p>\n<ol>\n<li><strong>Original Process:</strong> Calls first <code>fork()</code></li>\n<li><strong>Parent Process:</strong> First <code>fork()</code> returns child PID (> 0, true), short-circuits - doesn’t call second <code>fork()</code></li>\n<li><strong>Child Process:</strong> First <code>fork()</code> returns 0 (false), so evaluates second <code>fork()</code></li>\n</ol>\n<p><strong>Execution Flow:</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>Original Process</span></span>\n<span class=\"line\"><span>    |</span></span>\n<span class=\"line\"><span>    fork()</span></span>\n<span class=\"line\"><span>    |     \\</span></span>\n<span class=\"line\"><span>Parent    Child</span></span>\n<span class=\"line\"><span>(stops)     |</span></span>\n<span class=\"line\"><span>         fork() (second)</span></span>\n<span class=\"line\"><span>         |     \\</span></span>\n<span class=\"line\"><span>     Child    Child2</span></span></code></pre>\n<p><strong>Result:</strong> 4 processes total, but only 3 enter the if block (Parent, Child, Child2).</p>\n<h6 id=\"comparison--vs--with-fork\">Comparison: &#x26;&#x26; vs || with Fork</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">sys/wait.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> choice</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Choose: 1 for &#x26;&#x26;, 2 for ||</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    scanf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> &#x26;</span><span style=\"color:#7AA2F7\">choice</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Process count before: 1</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (choice </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // &#x26;&#x26; version</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#7AA2F7\">fork</span><span style=\"color:#9ABDF5\">() </span><span style=\"color:#BB9AF7\">&#x26;&#x26;</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">&#x26;&#x26; Inside if: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // || version</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#7AA2F7\">fork</span><span style=\"color:#9ABDF5\">() </span><span style=\"color:#BB9AF7\">||</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">|| Inside if: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Final: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // Wait to see all output clearly</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    sleep</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<h2 id=\"zombie-and-orphan-processes\">Zombie and Orphan Processes</h2>\n<p>Understanding zombie and orphan processes is crucial for system programming. These are common issues that can affect system performance and resource management.</p>\n<h4 id=\"zombie-processes-the-walking-dead\">Zombie Processes: The Walking Dead</h4>\n<p>A <strong>zombie process</strong> is a process that has completed execution but still has an entry in the process table. This happens when:</p>\n<ul>\n<li>Child process terminates</li>\n<li>Parent process hasn’t called <code>wait()</code> to read the child’s exit status</li>\n<li>The child becomes a “zombie” - dead but not fully cleaned up</li>\n</ul>\n<h6 id=\"example-13-creating-a-zombie-process\">Example 13: Creating a Zombie Process</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdlib.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Child process</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child: Exiting now...</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        exit</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Child terminates</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#BB9AF7\"> if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Parent process</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: Child PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> pid</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: Sleeping for 30 seconds (child becomes zombie)...</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        sleep</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">30</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Parent doesn't call wait() immediately</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: Now calling wait()...</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        wait</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">NULL</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Finally clean up the zombie</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: Zombie cleaned up!</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Fork failed!</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>What happens:</strong></p>\n<ol>\n<li>Child terminates immediately</li>\n<li>Parent sleeps without calling <code>wait()</code></li>\n<li>Child becomes zombie for 30 seconds</li>\n<li>During sleep, check with: <code>ps aux | grep defunct</code> or <code>ps aux | grep Z</code></li>\n<li>Parent finally calls <code>wait()</code> and cleans up zombie</li>\n</ol>\n<p><strong>To observe zombie:</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># Compile and run the program</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">gcc</span><span style=\"color:#9ECE6A\"> zombie_example.c</span><span style=\"color:#E0AF68\"> -o</span><span style=\"color:#9ECE6A\"> zombie_example</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">./zombie_example</span><span style=\"color:#89DDFF\"> &#x26;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># In another terminal, check for zombies</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">ps</span><span style=\"color:#9ECE6A\"> aux</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#C0CAF5\"> grep</span><span style=\"color:#9ECE6A\"> defunct</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># or</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">ps</span><span style=\"color:#9ECE6A\"> aux</span><span style=\"color:#89DDFF\"> |</span><span style=\"color:#C0CAF5\"> grep</span><span style=\"color:#9ECE6A\"> Z</span></span></code></pre>\n<h6 id=\"example-14-preventing-zombies-with-signal-handling-complex-example\">Example 14: Preventing Zombies with Signal Handling (complex example)</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">signal.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">sys/wait.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdlib.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">// Signal handler for SIGCHLD</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">void</span><span style=\"color:#7AA2F7\"> handle_sigchld</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#E0AF68\"> sig</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> status</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // Wait for all available children (non-blocking)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    while</span><span style=\"color:#9ABDF5\"> ((pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> waitpid</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> &#x26;</span><span style=\"color:#7AA2F7\">status</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> WNOHANG</span><span style=\"color:#9ABDF5\">)) </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Signal handler: Child </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\"> terminated</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> pid</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // Install signal handler for SIGCHLD</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    signal</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">SIGCHLD</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> handle_sigchld</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: Creating multiple children...</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // Create multiple children</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#FF9E64\"> 3</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">            // Child process</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, sleeping for </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\"> seconds</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">                   i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            sleep</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">: Exiting</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            exit</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">i </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // Parent does other work while children run</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: Doing other work...</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#FF9E64\"> 10</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#9ABDF5\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: Working... </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> i</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        sleep</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: Finished work, exiting</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Key Points:</strong></p>\n<ul>\n<li><code>SIGCHLD</code> signal is sent when child terminates</li>\n<li>Signal handler automatically cleans up zombies</li>\n<li><code>WNOHANG</code> flag makes <code>waitpid()</code> non-blocking</li>\n<li>This prevents zombie accumulation</li>\n</ul>\n<h4 id=\"orphan-processes-lost-children\">Orphan Processes: Lost Children</h4>\n<p>An <strong>orphan process</strong> is a child process whose parent has terminated before the child completes. When this happens:</p>\n<ul>\n<li>The orphan child is “adopted” by the init process (PID 1)</li>\n<li>Init process automatically cleans up orphans when they terminate</li>\n<li>Orphans are generally less problematic than zombies</li>\n</ul>\n<h6 id=\"example-15-creating-an-orphan-process\">Example 15: Creating an Orphan Process</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdlib.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Child process</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child: Parent will exit soon, I'll become orphan...</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        sleep</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">5</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Child continues running</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child: After parent exit - PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">               getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child: Notice PPID changed to 1 (init process)!</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        sleep</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">5</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child: Exiting now</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#BB9AF7\"> if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Parent process</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, Child PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> pid</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: Exiting immediately (making child orphan)...</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Parent exits without waiting for child</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        exit</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Fork failed!</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>What happens:</strong></p>\n<ol>\n<li>Parent creates child and exits immediately</li>\n<li>Child becomes orphan</li>\n<li>Init process (PID 1) adopts the orphan</li>\n<li>Child’s PPID changes from parent’s PID to 1</li>\n<li>When child exits, init automatically cleans it up</li>\n</ol>\n<h6 id=\"example-16-demonstrating-the-difference\">Example 16: Demonstrating the Difference</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">sys/wait.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdlib.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">void</span><span style=\"color:#7AA2F7\"> create_zombie</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Zombie child: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, exiting...</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        exit</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Child exits immediately</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Zombie parent: Child </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\"> will become zombie</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> pid</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        sleep</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">10</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Don't wait for child</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Zombie parent: Finally cleaning up...</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        wait</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">NULL</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">void</span><span style=\"color:#7AA2F7\"> create_orphan</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Orphan child: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        sleep</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">10</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Child continues after parent exits</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Orphan child: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\"> (adopted by init)</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">               getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Orphan parent: PID = </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, exiting immediately</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        exit</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Parent exits without waiting</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> choice</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Choose: 1 for Zombie, 2 for Orphan</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    scanf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> &#x26;</span><span style=\"color:#7AA2F7\">choice</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (choice </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        create_zombie</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        create_orphan</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<h4 id=\"process-states-summary\">Process States Summary</h4>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Process Type</th><th>Parent Status</th><th>Child Status</th><th>Problem</th><th>Solution</th></tr></thead><tbody><tr><td><strong>Normal</strong></td><td>Running</td><td>Running</td><td>None</td><td>Normal execution</td></tr><tr><td><strong>Zombie</strong></td><td>Running</td><td>Terminated</td><td>Child not cleaned up</td><td>Parent calls <code>wait()</code></td></tr><tr><td><strong>Orphan</strong></td><td>Terminated</td><td>Running</td><td>Child has no parent</td><td>Init adopts (automatic cleanup)</td></tr></tbody></table>\n<h4 id=\"best-practices-to-avoid-issues\">Best Practices to Avoid Issues</h4>\n<h6 id=\"1-always-wait-for-children\">1. Always Wait for Children</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">// Good practice</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">pid_t</span><span style=\"color:#A9B1D6\"> pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#A9B1D6\">pid </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    wait</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">NULL</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // or waitpid()</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<h6 id=\"2-use-signal-handlers-for-multiple-children\">2. Use Signal Handlers for Multiple Children</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#7AA2F7\">signal</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">SIGCHLD</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> handle_sigchld</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span></code></pre>\n<h6 id=\"3-check-for-errors\">3. Check for Errors</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">pid_t</span><span style=\"color:#A9B1D6\"> pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#A9B1D6\">pid </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#89DDFF\"> -</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    perror</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Fork failed</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    exit</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<h6 id=\"4-use-non-blocking-wait-for-flexibility\">4. Use Non-blocking Wait for Flexibility</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">pid_t</span><span style=\"color:#A9B1D6\"> result </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> waitpid</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> &#x26;</span><span style=\"color:#E0AF68\">status</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> WNOHANG</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#A9B1D6\">result </span><span style=\"color:#BB9AF7\">></span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // Child terminated</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span><span style=\"color:#BB9AF7\"> else</span><span style=\"color:#BB9AF7\"> if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#A9B1D6\">result </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // No child ready yet</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<h4 id=\"example-11-creating-a-specific-process-tree\">Example 11: Creating a Specific Process Tree</h4>\n<p><strong>Problem:</strong> Create this hierarchy:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>Parent</span></span>\n<span class=\"line\"><span>├── Child A</span></span>\n<span class=\"line\"><span>│   ├── Grandchild A1</span></span>\n<span class=\"line\"><span>│   └── Grandchild A2</span></span>\n<span class=\"line\"><span>└── Child B</span></span></code></pre>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">sys/wait.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#9ABDF5\"> pid2</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Root Parent PID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // Create Child A</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    pid1 </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (pid1 </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child A PID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Child A creates Grandchild A1</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        pid2 </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#9ABDF5\"> (pid2 </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Grandchild A1 PID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Child A creates Grandchild A2</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        pid2 </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#9ABDF5\"> (pid2 </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Grandchild A2 PID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Child A waits for its children</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        wait</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">NULL</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        wait</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">NULL</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // Parent creates Child B</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    pid1 </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (pid1 </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child B PID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#9ECE6A\">, PPID: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getpid</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> getppid</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    // Parent waits for Child A and Child B</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    wait</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">NULL</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    wait</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">NULL</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">All processes completed</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<h2 id=\"process-count-calculation-tricks\">Process Count Calculation Tricks</h2>\n<h4 id=\"process-count-calculation-tricks-1\">Process Count Calculation Tricks</h4>\n<p>For <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> consecutive <code>fork()</code> calls: <strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>` processes</strong></p>\n<h4 id=\"the-conditional-fork-rule\">The Conditional Fork Rule</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#7AA2F7\">fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#BB9AF7\"> ==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Only child executes this</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Result:</strong> 3 processes (1 parent + 1 child + 1 grandchild)</p>\n<h4 id=\"the-short-circuit-rule\">The Short-Circuit Rule</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#7AA2F7\">fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#BB9AF7\"> &#x26;&#x26;</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // If first fork() returns 0 (child), second fork() doesn't execute</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#BB9AF7\"> ||</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // If first fork() returns > 0 (parent), second fork() doesn't execute</span></span></code></pre>\n<h4 id=\"practice-problems\">Practice Problems</h4>\n<p><strong>Problem 1:</strong> How many “Hello” messages will print?</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#7AA2F7\">fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#7AA2F7\">fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#BB9AF7\"> ==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Hello</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span></code></pre>\n<p><strong>Answer:</strong> 5 messages</p>\n<ul>\n<li>Original parent forks → 2 processes</li>\n<li>Both processes check <code>if (fork() == 0)</code></li>\n<li>Parent’s fork creates child, parent continues</li>\n<li>Child executes inner fork</li>\n<li>Total: 5 processes, each prints “Hello”</li>\n</ul>\n<p><strong>Problem 2:</strong> Process count for:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">for</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#FF9E64\"> 3</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> i</span><span style=\"color:#89DDFF\">++</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Answer:</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span></span></span></span> processes (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>)</p>\n<h2 id=\"advanced-topics-error-handling-and-best-practices\">Advanced Topics: Error Handling and Best Practices</h2>\n<h4 id=\"example-12-robust-fork-with-error-handling\">Example 12: Robust Fork with Error Handling</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\"><code><span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">stdio.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">unistd.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">sys/wait.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">errno.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">#</span><span style=\"color:#BB9AF7\">include</span><span style=\"color:#89DDFF\"> &#x3C;</span><span style=\"color:#9ECE6A\">string.h</span><span style=\"color:#89DDFF\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    pid_t</span><span style=\"color:#9ABDF5\"> pid</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#9ABDF5\"> status</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    pid </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> fork</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#89DDFF\"> -</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Fork failed</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        fprintf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">stderr</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">Fork failed: </span><span style=\"color:#C0CAF5\">%s</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> strerror</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">errno</span><span style=\"color:#9ABDF5\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#BB9AF7\"> if</span><span style=\"color:#9ABDF5\"> (pid </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Child process</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child: Doing some work...</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        sleep</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">2</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#FF9E64\"> 42</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\">  // Exit with specific code</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        // Parent process</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Parent: Child PID is </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> pid</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#7AA2F7\">waitpid</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">pid</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> &#x26;</span><span style=\"color:#7AA2F7\">status</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#9ABDF5\">) </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#89DDFF\"> -</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            fprintf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">stderr</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">Wait failed: </span><span style=\"color:#C0CAF5\">%s</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> strerror</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">errno</span><span style=\"color:#9ABDF5\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            return</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#7AA2F7\">WIFEXITED</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">status</span><span style=\"color:#9ABDF5\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child exited with status: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> WEXITSTATUS</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">status</span><span style=\"color:#9ABDF5\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#BB9AF7\"> if</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#7AA2F7\">WIFSIGNALED</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">status</span><span style=\"color:#9ABDF5\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            printf</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Child killed by signal: </span><span style=\"color:#C0CAF5\">%d</span><span style=\"color:#89DDFF\">\\n\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> WTERMSIG</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">status</span><span style=\"color:#9ABDF5\">))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Key Improvements:</strong></p>\n<ul>\n<li><code>waitpid()</code> waits for specific child instead of any child</li>\n<li>Proper error checking with <code>errno</code></li>\n<li>Status analysis with <code>WIFEXITED()</code> and <code>WIFSIGNALED()</code></li>\n</ul>\n<h2 id=\"summary-fork-mastery-checklist\">Summary: fork() Mastery Checklist</h2>\n<p>To master <code>fork()</code>, remember these key points:</p>\n<ol>\n<li>\n<p><strong>Return Values:</strong></p>\n<ul>\n<li>Parent: gets child PID (> 0)</li>\n<li>Child: gets 0</li>\n<li>Error: gets -1</li>\n</ul>\n</li>\n<li>\n<p><strong>Process Count Formula:</strong></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> consecutive forks: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> processes</li>\n<li>Conditional forks: analyze execution paths</li>\n</ul>\n</li>\n<li>\n<p><strong>Common Patterns:</strong></p>\n<ul>\n<li>Always check <code>fork()</code> return value</li>\n<li>Child processes should exit early in loops</li>\n<li>Parent should <code>wait()</code> for children</li>\n<li>Use <code>getpid()</code> and <code>getppid()</code> for identification</li>\n</ul>\n</li>\n<li>\n<p><strong>Tricky Scenarios:</strong></p>\n<ul>\n<li>Short-circuit operators (<code>&#x26;&#x26;</code> and <code>||</code>)</li>\n<li>Conditional forks</li>\n<li>Nested forks</li>\n</ul>\n</li>\n<li>\n<p><strong>Best Practices:</strong></p>\n<ul>\n<li>Handle <code>fork()</code> failures</li>\n<li>Use <code>waitpid()</code> for specific children</li>\n<li>Check child exit status</li>\n<li>Avoid fork bombs in production code</li>\n</ul>\n</li>\n</ol>",{headings:1088,localImagePaths:1238,remoteImagePaths:1239,frontmatter:1240,imagePaths:1243},[1089,1090,1091,1094,1097,1100,1103,1106,1109,1112,1115,1118,1121,1124,1127,1130,1133,1136,1139,1142,1145,1148,1151,1154,1157,1160,1163,1166,1169,1172,1175,1178,1181,1184,1187,1190,1193,1196,1199,1202,1205,1208,1211,1214,1217,1220,1222,1225,1228,1229,1232,1235],{depth:34,slug:117,text:118},{depth:34,slug:45,text:46},{depth:34,slug:1092,text:1093},"setting-up-your-environment","Setting Up Your Environment",{depth:38,slug:1095,text:1096},"linux-native","Linux (Native)",{depth:38,slug:1098,text:1099},"windows-wsl---windows-subsystem-for-linux","Windows (WSL - Windows Subsystem for Linux)",{depth:38,slug:1101,text:1102},"windows-virtual-machine","Windows (Virtual Machine)",{depth:38,slug:1104,text:1105},"macos","macOS",{depth:34,slug:1107,text:1108},"essential-headers-and-concepts","Essential Headers and Concepts",{depth:38,slug:1110,text:1111},"important-headers","Important Headers",{depth:38,slug:1113,text:1114},"key-data-types","Key Data Types",{depth:38,slug:1116,text:1117},"core-system-calls-well-use","Core System Calls We’ll Use",{depth:34,slug:1119,text:1120},"basic-io-system-calls-read-and-write","Basic I/O System Calls: read() and write()",{depth:38,slug:1122,text:1123},"example-1-writing-to-screen","Example 1: Writing to Screen",{depth:38,slug:1125,text:1126},"example-2-reading-from-keyboard","Example 2: Reading from Keyboard",{depth:34,slug:1128,text:1129},"the-fork-system-call","The fork() System Call",{depth:38,slug:1131,text:1132},"understanding-fork-the-basics","Understanding fork(): The Basics",{depth:38,slug:1134,text:1135},"example-3-basic-fork-usage","Example 3: Basic fork() Usage",{depth:38,slug:1137,text:1138},"example-4-process-identification-deep-dive","Example 4: Process Identification Deep Dive",{depth:34,slug:1140,text:1141},"the-wait-system-call-process-synchronization","The wait() System Call: Process Synchronization",{depth:38,slug:1143,text:1144},"example-5-parent-waiting-for-child","Example 5: Parent Waiting for Child",{depth:34,slug:1146,text:1147},"advanced-fork-patterns-and-tricks","Advanced fork() Patterns and Tricks",{depth:38,slug:1149,text:1150},"example-6-creating-multiple-children","Example 6: Creating Multiple Children",{depth:38,slug:1152,text:1153},"example-7-creating-n-processes-from-same-parent","Example 7: Creating N Processes from Same Parent",{depth:34,slug:1155,text:1156},"the-fork-bomb-and-process-count-prediction","The Fork Bomb and Process Count Prediction",{depth:38,slug:1158,text:1159},"example-8-predicting-process-count","Example 8: Predicting Process Count",{depth:38,slug:1161,text:1162},"example-9-conditional-fork-patterns","Example 9: Conditional Fork Patterns",{depth:38,slug:1164,text:1165},"example-10-the-tricky--and--operators","Example 10: The Tricky && and || Operators",{depth:396,slug:1167,text:1168},"part-a-the--operator","Part A: The && Operator",{depth:396,slug:1170,text:1171},"part-b-the--operator","Part B: The || Operator",{depth:396,slug:1173,text:1174},"comparison--vs--with-fork","Comparison: && vs || with Fork",{depth:34,slug:1176,text:1177},"zombie-and-orphan-processes","Zombie and Orphan Processes",{depth:38,slug:1179,text:1180},"zombie-processes-the-walking-dead","Zombie Processes: The Walking Dead",{depth:396,slug:1182,text:1183},"example-13-creating-a-zombie-process","Example 13: Creating a Zombie Process",{depth:396,slug:1185,text:1186},"example-14-preventing-zombies-with-signal-handling-complex-example","Example 14: Preventing Zombies with Signal Handling (complex example)",{depth:38,slug:1188,text:1189},"orphan-processes-lost-children","Orphan Processes: Lost Children",{depth:396,slug:1191,text:1192},"example-15-creating-an-orphan-process","Example 15: Creating an Orphan Process",{depth:396,slug:1194,text:1195},"example-16-demonstrating-the-difference","Example 16: Demonstrating the Difference",{depth:38,slug:1197,text:1198},"process-states-summary","Process States Summary",{depth:38,slug:1200,text:1201},"best-practices-to-avoid-issues","Best Practices to Avoid Issues",{depth:396,slug:1203,text:1204},"1-always-wait-for-children","1. Always Wait for Children",{depth:396,slug:1206,text:1207},"2-use-signal-handlers-for-multiple-children","2. Use Signal Handlers for Multiple Children",{depth:396,slug:1209,text:1210},"3-check-for-errors","3. Check for Errors",{depth:396,slug:1212,text:1213},"4-use-non-blocking-wait-for-flexibility","4. Use Non-blocking Wait for Flexibility",{depth:38,slug:1215,text:1216},"example-11-creating-a-specific-process-tree","Example 11: Creating a Specific Process Tree",{depth:34,slug:1218,text:1219},"process-count-calculation-tricks","Process Count Calculation Tricks",{depth:38,slug:1221,text:1219},"process-count-calculation-tricks-1",{depth:38,slug:1223,text:1224},"the-conditional-fork-rule","The Conditional Fork Rule",{depth:38,slug:1226,text:1227},"the-short-circuit-rule","The Short-Circuit Rule",{depth:38,slug:538,text:539},{depth:34,slug:1230,text:1231},"advanced-topics-error-handling-and-best-practices","Advanced Topics: Error Handling and Best Practices",{depth:38,slug:1233,text:1234},"example-12-robust-fork-with-error-handling","Example 12: Robust Fork with Error Handling",{depth:34,slug:1236,text:1237},"summary-fork-mastery-checklist","Summary: fork() Mastery Checklist",[],[],{title:1076,date:1241,description:1079,author:16,thumbnail:1080,series:147,seriesOrder:396,minutesRead:1242},["Date","2025-05-22T00:00:00.000Z"],"17 min read",[],"examples-of-system-calls.md","os-interrupts",{id:1245,data:1247,body:1255,filePath:1256,digest:1257,rendered:1258,legacyId:1297},{title:1248,author:1249,draft:18,date:1250,description:1251,featured:18,thumbnail:1252,series:1253,seriesOrder:1254},"Interrupts: Small Signals, Big Impact",{id:16,collection:17},["Date","2025-05-22T00:00:00.000Z"],"Diving into interrupts in operating systems, their types, and how they enable efficient multitasking.","/thumbnails/os-interrupts.png",{id:147,collection:24},7,"## Introduction\r\n\r\n> This post is more focused on the architecture of computer systems and how they handle events rather than the operating system itself. It is a continuation of our previous posts on operating systems, where we discussed processes, system calls, and the role of the OS in managing resources. This is more lower-level than the previous posts, but it is still relevant to understanding how operating systems work.\r\n\r\nIn our previous posts, we've explored how the operating system manages processes and how applications request services through system calls. But there's another critical aspect of operating systems we haven't covered yet: how does your OS respond to external events that happen at unpredictable times?\r\n\r\nWhen you press a key, click your mouse, or receive a network packet, your computer can't predict exactly when these events will occur. Yet it responds to them almost instantly. This responsiveness is made possible by interrupts — mechanisms that allow hardware devices to signal the CPU and temporarily pause whatever it's doing to handle urgent events.\r\n\r\n## Table of Contents\r\n\r\n- [What Exactly Is an Interrupt?](#what-exactly-is-an-interrupt)\r\n- [The Three Types of Interrupts](#the-three-types-of-interrupts)\r\n  - [Hardware Interrupts](#hardware-interrupts)\r\n  - [Software Interrupts (Traps)](#software-interrupts-traps)\r\n  - [Inter-processor Interrupts (IPIs)](#inter-processor-interrupts-ipis)\r\n- [The Anatomy of an Interrupt](#the-anatomy-of-an-interrupt)\r\n- [Interrupt Priority and Masking](#interrupt-priority-and-masking)\r\n- [The Unsung Hero: Timer Interrupts](#the-unsung-hero-timer-interrupts)\r\n- [Interrupt Handlers: Designed for Speed](#interrupt-handlers-designed-for-speed)\r\n- [Coming Up Next](#coming-up-next)\r\n\r\n## What Exactly Is an Interrupt?\r\n\r\nAn interrupt is essentially an electronic signal sent to the CPU that causes it to pause its current execution, save its state, and jump to a special piece of code called an interrupt handler that deals with the event that triggered the interrupt. Once the handler finishes, the CPU returns to whatever it was doing before.\r\n\r\nThink of interrupts like a doorbell. You might be in the middle of cooking dinner when the doorbell rings. You save your place in the recipe, answer the door, deal with the visitor, and then return to cooking exactly where you left off.\r\n\r\n## The Three Types of Interrupts\r\n\r\nNot all interrupts are created equal. They come in several varieties, each serving different purposes:\r\n\r\n#### Hardware Interrupts\r\n\r\nThese originate from physical devices connected to your computer:\r\n\r\n- **Keyboard interrupts**: When you press or release a key\r\n- **Mouse interrupts**: When you move or click your mouse\r\n- **Disk controller interrupts**: When a read/write operation completes\r\n- **Network card interrupts**: When a packet arrives\r\n- **Timer interrupts**: When a predefined time interval elapses\r\n- **Power management interrupts**: When battery status changes or power buttons are pressed\r\n\r\n#### Software Interrupts (Traps)\r\n\r\nThese are generated by software when it needs kernel assistance:\r\n\r\n- **System calls**: As we discussed in our previous post, applications trigger these to request OS services\r\n- **Exceptions**: Like division by zero or accessing invalid memory\r\n- **Breakpoints**: Used by debuggers to pause program execution\r\n\r\n#### Inter-processor Interrupts (IPIs)\r\n\r\nThese occur in multi-processor systems when one CPU core needs to signal another:\r\n\r\n- **Cache coherency notifications**: To maintain memory consistency across cores\r\n- **Scheduling requests**: When the OS wants to balance load across cores\r\n- **TLB shootdowns**: When page tables change and cached address translations need to be invalidated\r\n\r\n## The Anatomy of an Interrupt\r\n\r\nLet's break down what happens when an interrupt occurs:\r\n\r\n1. **Detection**: A device triggers an interrupt signal on the system bus\r\n2. **Acknowledgment**: The CPU acknowledges the interrupt\r\n3. **State saving**: The current program's state (program counter, registers, etc.) is saved\r\n4. **Handler location**: The CPU uses the interrupt number to find the appropriate handler address in the interrupt vector table\r\n5. **Handler execution**: The CPU jumps to the handler code, which runs in kernel mode\r\n6. **Device servicing**: The handler communicates with the device and processes the event\r\n7. **State restoration**: The original program's state is restored\r\n8. **Resumption**: The interrupted program continues executing\r\n\r\nThis process is often referred to as \"context switching,\" and it's a fundamental part of how modern operating systems achieve multitasking. This entire process happens so quickly that you never notice the interruption.\r\n\r\n## Interrupt Priority and Masking\r\n\r\nNot all interrupts are equally important. A timer interrupt ensuring fair CPU sharing might be less urgent than a power failure notification. To handle this, CPUs implement:\r\n\r\n- **Interrupt priority levels**: Determining which interrupts can interrupt others\r\n- **Interrupt masking**: Temporarily disabling specific types of interrupts\r\n- **Critical sections**: Code sequences during which interrupts may be disabled\r\n\r\nThese mechanisms ensure that the most critical interrupts get serviced first while preventing less important interrupts from causing chaos in sensitive operations.\r\n\r\n## The Unsung Hero: Timer Interrupts\r\n\r\nOf all the interrupt types, one deserves special attention: the timer interrupt.\r\nTimer interrupts occur at regular intervals (typically hundreds or thousands of times per second) and serve several critical functions:\r\n\r\n1. **Enabling preemptive multitasking**: They allow the OS to regain control from running processes, essential for the time-sharing we discussed in earlier posts\r\n2. **Maintaining system time**: They help track the passage of time\r\n3. **Monitoring timeouts**: They help detect when operations take too long\r\n4. **Scheduling periodic tasks**: Many system housekeeping activities happen on timer interrupts\r\n\r\nWithout timer interrupts, a misbehaving program could monopolize the CPU indefinitely. They're the heartbeat of your operating system, ensuring regular opportunities to make scheduling decisions.\r\n\r\n## Interrupt Handlers: Designed for Speed\r\n\r\nInterrupt handlers are special pieces of code with unique characteristics:\r\n\r\n1. **They run in kernel mode**: With full privileges\r\n2. **They must be fast**: Long-running handlers delay other interrupts and the system's return to normal operation\r\n3. **They cannot block**: They can't wait for resources or sleep\r\n4. **They have limited context**: They can't assume which process was running when they were triggered\r\n\r\nTo accommodate these constraints, modern operating systems often split interrupt handling into two parts:\r\n\r\n- **Top half (Immediate handler)**: Runs in interrupt context, acknowledges the interrupt, gets essential data, and queues the rest of the work\r\n- **Bottom half (Deferred handler)**: Runs later in a more permissive context, performing the bulk of the processing\r\n\r\nThis division helps keep the system responsive while allowing for complex interrupt processing.\r\n\r\n## Coming Up Next\r\n\r\nNow that we understand how the outside world gets the kernel's attention through interrupts, our next post will examine what happens when the CPU switches between different processes. We'll dive into the fascinating world of **Context Switching** and explore the hidden costs of multitasking that impact your system's performance.","src/content/blog/os-interrupts.md","32200b73f45eedc4",{html:1259,metadata:1260},"<h2 id=\"introduction\">Introduction</h2>\n<blockquote>\n<p>This post is more focused on the architecture of computer systems and how they handle events rather than the operating system itself. It is a continuation of our previous posts on operating systems, where we discussed processes, system calls, and the role of the OS in managing resources. This is more lower-level than the previous posts, but it is still relevant to understanding how operating systems work.</p>\n</blockquote>\n<p>In our previous posts, we’ve explored how the operating system manages processes and how applications request services through system calls. But there’s another critical aspect of operating systems we haven’t covered yet: how does your OS respond to external events that happen at unpredictable times?</p>\n<p>When you press a key, click your mouse, or receive a network packet, your computer can’t predict exactly when these events will occur. Yet it responds to them almost instantly. This responsiveness is made possible by interrupts — mechanisms that allow hardware devices to signal the CPU and temporarily pause whatever it’s doing to handle urgent events.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#what-exactly-is-an-interrupt\">What Exactly Is an Interrupt?</a></li>\n<li><a href=\"#the-three-types-of-interrupts\">The Three Types of Interrupts</a>\n<ul>\n<li><a href=\"#hardware-interrupts\">Hardware Interrupts</a></li>\n<li><a href=\"#software-interrupts-traps\">Software Interrupts (Traps)</a></li>\n<li><a href=\"#inter-processor-interrupts-ipis\">Inter-processor Interrupts (IPIs)</a></li>\n</ul>\n</li>\n<li><a href=\"#the-anatomy-of-an-interrupt\">The Anatomy of an Interrupt</a></li>\n<li><a href=\"#interrupt-priority-and-masking\">Interrupt Priority and Masking</a></li>\n<li><a href=\"#the-unsung-hero-timer-interrupts\">The Unsung Hero: Timer Interrupts</a></li>\n<li><a href=\"#interrupt-handlers-designed-for-speed\">Interrupt Handlers: Designed for Speed</a></li>\n<li><a href=\"#coming-up-next\">Coming Up Next</a></li>\n</ul>\n<h2 id=\"what-exactly-is-an-interrupt\">What Exactly Is an Interrupt?</h2>\n<p>An interrupt is essentially an electronic signal sent to the CPU that causes it to pause its current execution, save its state, and jump to a special piece of code called an interrupt handler that deals with the event that triggered the interrupt. Once the handler finishes, the CPU returns to whatever it was doing before.</p>\n<p>Think of interrupts like a doorbell. You might be in the middle of cooking dinner when the doorbell rings. You save your place in the recipe, answer the door, deal with the visitor, and then return to cooking exactly where you left off.</p>\n<h2 id=\"the-three-types-of-interrupts\">The Three Types of Interrupts</h2>\n<p>Not all interrupts are created equal. They come in several varieties, each serving different purposes:</p>\n<h4 id=\"hardware-interrupts\">Hardware Interrupts</h4>\n<p>These originate from physical devices connected to your computer:</p>\n<ul>\n<li><strong>Keyboard interrupts</strong>: When you press or release a key</li>\n<li><strong>Mouse interrupts</strong>: When you move or click your mouse</li>\n<li><strong>Disk controller interrupts</strong>: When a read/write operation completes</li>\n<li><strong>Network card interrupts</strong>: When a packet arrives</li>\n<li><strong>Timer interrupts</strong>: When a predefined time interval elapses</li>\n<li><strong>Power management interrupts</strong>: When battery status changes or power buttons are pressed</li>\n</ul>\n<h4 id=\"software-interrupts-traps\">Software Interrupts (Traps)</h4>\n<p>These are generated by software when it needs kernel assistance:</p>\n<ul>\n<li><strong>System calls</strong>: As we discussed in our previous post, applications trigger these to request OS services</li>\n<li><strong>Exceptions</strong>: Like division by zero or accessing invalid memory</li>\n<li><strong>Breakpoints</strong>: Used by debuggers to pause program execution</li>\n</ul>\n<h4 id=\"inter-processor-interrupts-ipis\">Inter-processor Interrupts (IPIs)</h4>\n<p>These occur in multi-processor systems when one CPU core needs to signal another:</p>\n<ul>\n<li><strong>Cache coherency notifications</strong>: To maintain memory consistency across cores</li>\n<li><strong>Scheduling requests</strong>: When the OS wants to balance load across cores</li>\n<li><strong>TLB shootdowns</strong>: When page tables change and cached address translations need to be invalidated</li>\n</ul>\n<h2 id=\"the-anatomy-of-an-interrupt\">The Anatomy of an Interrupt</h2>\n<p>Let’s break down what happens when an interrupt occurs:</p>\n<ol>\n<li><strong>Detection</strong>: A device triggers an interrupt signal on the system bus</li>\n<li><strong>Acknowledgment</strong>: The CPU acknowledges the interrupt</li>\n<li><strong>State saving</strong>: The current program’s state (program counter, registers, etc.) is saved</li>\n<li><strong>Handler location</strong>: The CPU uses the interrupt number to find the appropriate handler address in the interrupt vector table</li>\n<li><strong>Handler execution</strong>: The CPU jumps to the handler code, which runs in kernel mode</li>\n<li><strong>Device servicing</strong>: The handler communicates with the device and processes the event</li>\n<li><strong>State restoration</strong>: The original program’s state is restored</li>\n<li><strong>Resumption</strong>: The interrupted program continues executing</li>\n</ol>\n<p>This process is often referred to as “context switching,” and it’s a fundamental part of how modern operating systems achieve multitasking. This entire process happens so quickly that you never notice the interruption.</p>\n<h2 id=\"interrupt-priority-and-masking\">Interrupt Priority and Masking</h2>\n<p>Not all interrupts are equally important. A timer interrupt ensuring fair CPU sharing might be less urgent than a power failure notification. To handle this, CPUs implement:</p>\n<ul>\n<li><strong>Interrupt priority levels</strong>: Determining which interrupts can interrupt others</li>\n<li><strong>Interrupt masking</strong>: Temporarily disabling specific types of interrupts</li>\n<li><strong>Critical sections</strong>: Code sequences during which interrupts may be disabled</li>\n</ul>\n<p>These mechanisms ensure that the most critical interrupts get serviced first while preventing less important interrupts from causing chaos in sensitive operations.</p>\n<h2 id=\"the-unsung-hero-timer-interrupts\">The Unsung Hero: Timer Interrupts</h2>\n<p>Of all the interrupt types, one deserves special attention: the timer interrupt.\r\nTimer interrupts occur at regular intervals (typically hundreds or thousands of times per second) and serve several critical functions:</p>\n<ol>\n<li><strong>Enabling preemptive multitasking</strong>: They allow the OS to regain control from running processes, essential for the time-sharing we discussed in earlier posts</li>\n<li><strong>Maintaining system time</strong>: They help track the passage of time</li>\n<li><strong>Monitoring timeouts</strong>: They help detect when operations take too long</li>\n<li><strong>Scheduling periodic tasks</strong>: Many system housekeeping activities happen on timer interrupts</li>\n</ol>\n<p>Without timer interrupts, a misbehaving program could monopolize the CPU indefinitely. They’re the heartbeat of your operating system, ensuring regular opportunities to make scheduling decisions.</p>\n<h2 id=\"interrupt-handlers-designed-for-speed\">Interrupt Handlers: Designed for Speed</h2>\n<p>Interrupt handlers are special pieces of code with unique characteristics:</p>\n<ol>\n<li><strong>They run in kernel mode</strong>: With full privileges</li>\n<li><strong>They must be fast</strong>: Long-running handlers delay other interrupts and the system’s return to normal operation</li>\n<li><strong>They cannot block</strong>: They can’t wait for resources or sleep</li>\n<li><strong>They have limited context</strong>: They can’t assume which process was running when they were triggered</li>\n</ol>\n<p>To accommodate these constraints, modern operating systems often split interrupt handling into two parts:</p>\n<ul>\n<li><strong>Top half (Immediate handler)</strong>: Runs in interrupt context, acknowledges the interrupt, gets essential data, and queues the rest of the work</li>\n<li><strong>Bottom half (Deferred handler)</strong>: Runs later in a more permissive context, performing the bulk of the processing</li>\n</ul>\n<p>This division helps keep the system responsive while allowing for complex interrupt processing.</p>\n<h2 id=\"coming-up-next\">Coming Up Next</h2>\n<p>Now that we understand how the outside world gets the kernel’s attention through interrupts, our next post will examine what happens when the CPU switches between different processes. We’ll dive into the fascinating world of <strong>Context Switching</strong> and explore the hidden costs of multitasking that impact your system’s performance.</p>",{headings:1261,localImagePaths:1292,remoteImagePaths:1293,frontmatter:1294,imagePaths:1296},[1262,1263,1264,1267,1270,1273,1276,1279,1282,1285,1288,1291],{depth:34,slug:117,text:118},{depth:34,slug:45,text:46},{depth:34,slug:1265,text:1266},"what-exactly-is-an-interrupt","What Exactly Is an Interrupt?",{depth:34,slug:1268,text:1269},"the-three-types-of-interrupts","The Three Types of Interrupts",{depth:38,slug:1271,text:1272},"hardware-interrupts","Hardware Interrupts",{depth:38,slug:1274,text:1275},"software-interrupts-traps","Software Interrupts (Traps)",{depth:38,slug:1277,text:1278},"inter-processor-interrupts-ipis","Inter-processor Interrupts (IPIs)",{depth:34,slug:1280,text:1281},"the-anatomy-of-an-interrupt","The Anatomy of an Interrupt",{depth:34,slug:1283,text:1284},"interrupt-priority-and-masking","Interrupt Priority and Masking",{depth:34,slug:1286,text:1287},"the-unsung-hero-timer-interrupts","The Unsung Hero: Timer Interrupts",{depth:34,slug:1289,text:1290},"interrupt-handlers-designed-for-speed","Interrupt Handlers: Designed for Speed",{depth:34,slug:183,text:184},[],[],{title:1248,date:1295,description:1251,author:16,thumbnail:1252,series:147,seriesOrder:1254,minutesRead:798},["Date","2025-05-22T00:00:00.000Z"],[],"os-interrupts.md","os-scheduling",{id:1298,data:1300,body:1308,filePath:1309,digest:1310,rendered:1311,legacyId:1387},{title:1301,author:1302,draft:18,date:1303,description:1304,featured:18,thumbnail:1305,series:1306,seriesOrder:1307},"Why is Multitasking Not Magic? - Process Scheduling",{id:16,collection:17},["Date","2025-05-25T00:00:00.000Z"],"Understanding how operating systems juggle multiple processes and the algorithms that make multitasking possible.","/thumbnails/os-scheduling.png",{id:147,collection:24},10,"## Introduction\r\n\r\nEver wondered how your computer manages to run your music player, web browser, code editor, and chat application all at the same time? It might seem like magic, but there's actually a lot of careful planning happening behind the scenes. Your operating system is constantly making decisions about which process gets to use the CPU next, and for how long.\r\n\r\nToday, we'll explore the world of process scheduling - the algorithms and strategies that make multitasking possible. We'll see why some applications feel snappy while others seem sluggish, and understand the trade-offs operating systems make to keep everything running smoothly.\r\n\r\n> The execution timeline of a process might not be understandable at times for complex algorithms, so I highly recommend you to have the [visualizer](https://process-scheduling-solver.boonsuen.com/) open in a separate tab while reading this post. It will help you visualize the execution of processes and understand the scheduling algorithms better. Also, keep a pen and paper handy to jot down calculations as we go along!\r\n\r\n## Table of Contents\r\n\r\n- [The Scheduling Problem](#the-scheduling-problem)\r\n- [Understanding Process States and Schedulers](#understanding-process-states-and-schedulers)\r\n- [Key Performance Metrics](#key-performance-metrics)\r\n- [Preemptive vs Non-Preemptive Scheduling](#preemptive-vs-non-preemptive-scheduling)\r\n- [Scheduling Algorithms](#scheduling-algorithms)\r\n  - [First Come First Serve (FCFS)](#first-come-first-serve-fcfs)\r\n  - [Shortest Job First (SJF)](#shortest-job-first-sjf)\r\n  - [Priority Scheduling](#priority-scheduling)\r\n  - [Round Robin (RR)](#round-robin-rr)\r\n  - [Multilevel Queue Scheduling](#multilevel-queue-scheduling)\r\n  - [Multilevel Feedback Queue Scheduling](#multilevel-feedback-queue-scheduling)\r\n- [Multiprocessor Scheduling](#multiprocessor-scheduling)\r\n- [Coming Up Next](#coming-up-next)\r\n\r\n## The Scheduling Problem\r\n\r\nImagine you're a manager at a busy restaurant. You have multiple orders coming in, different dishes that take varying amounts of time to prepare, and a limited number of chefs. How do you decide which order to prepare first? Do you go in the order they arrived? Focus on the quickest dishes first? Or maybe prioritize VIP customers?\r\n\r\nThis is exactly the problem your operating system faces, except instead of food orders, it's managing processes (running programs), and instead of chefs, it has CPU cores. The goal is to keep everyone happy - users want their applications to be responsive, and the system wants to make efficient use of its resources.\r\n\r\n## Understanding Process States and Schedulers\r\n\r\nBefore diving into scheduling algorithms, let's understand how processes move through different states:\r\n\r\n- **New**: Process is being created\r\n- **Ready**: Process is loaded in memory and waiting for CPU time\r\n- **Running**: Process is currently executing on the CPU\r\n- **Waiting**: Process is blocked, waiting for some event (like I/O completion)\r\n- **Terminated**: Process has finished execution\r\n\r\nThe operating system uses different types of schedulers to manage these transitions:\r\n\r\n> You can see all the process states in this [diagram](https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/images/Chapter3/3_02_ProcessState.jpg) from the University of Illinois at Chicago.\r\n\r\n#### Long-term Scheduler (Job Scheduler)\r\n\r\nThink of this as the bouncer at a club. It decides which processes get admitted into the system and loaded into memory. It controls the degree of multiprogramming - how many processes are active at once.\r\n\r\n#### Short-term Scheduler (CPU Scheduler)\r\n\r\nThis is like a traffic controller at a busy intersection. It decides which process from the ready queue gets to use the CPU next. This happens very frequently - potentially thousands of times per second.\r\n\r\n#### Medium-term Scheduler\r\n\r\nActs like a parking valet, moving processes in and out of memory as needed to manage system resources effectively.\r\n\r\n## Key Performance Metrics\r\n\r\nWhen evaluating scheduling algorithms, we use several important metrics:\r\n\r\n- **Arrival Time (AT)**: When the process enters the ready queue\r\n- **Burst Time (BT)**: How long the process needs the CPU\r\n- **Completion Time (CT)**: When the process finishes execution\r\n- **Turnaround Time (TAT)**: Total time from arrival to completion\r\n  $$\r\n  TAT = CT - AT\r\n  $$\r\n- **Waiting Time (WT)**: Time spent waiting in the ready queue\r\n  $$\r\n  WT = TAT - BT\r\n  $$\r\n- **Response Time (RT)**: Time from arrival until first CPU allocation\r\n- **Throughput**: Number of processes completed per time unit\r\n\r\nOur goal is to maximize CPU utilization and throughput while minimizing turnaround time, waiting time, and response time.\r\n\r\n## Preemptive vs Non-Preemptive Scheduling\r\n\r\n#### Non-Preemptive Scheduling\r\n\r\nOnce a process starts running, it keeps the CPU until it voluntarily gives it up (by finishing or requesting I/O). It's like letting someone finish their entire presentation without interruption.\r\n\r\n**Pros:**\r\n\r\n- Simple to implement\r\n- No overhead from context switching\r\n- Predictable behavior\r\n\r\n**Cons:**\r\n\r\n- One long process can hold up everything else\r\n- Poor responsiveness for interactive applications\r\n\r\n#### Preemptive Scheduling\r\n\r\nThe operating system can forcibly take the CPU away from a running process. It's like having a timer that ensures everyone gets a fair chance to speak.\r\n\r\n**Pros:**\r\n\r\n- Better responsiveness\r\n- Fairer resource sharing\r\n- Can prioritize urgent tasks\r\n\r\n**Cons:**\r\n\r\n- More complex to implement\r\n- Overhead from frequent context switches\r\n- Potential for process starvation\r\n\r\n## Scheduling Algorithms\r\n\r\n> Visualize all the scheduling algorithms using the [visualizer](https://process-scheduling-solver.boonsuen.com/) as we go along! You will get the Gantt charts as well.\r\n\r\nLet's explore the main scheduling algorithms with practical examples.\r\n\r\n#### First Come First Serve (FCFS)\r\n\r\nFCFS is the simplest scheduling algorithm - processes are executed in the order they arrive, just like a queue at the grocery store.\r\n\r\n**Example:**\r\n\r\nLet's say we have three processes:\r\n\r\n| Process | Arrival Time | Burst Time |\r\n|---------|--------------|------------|\r\n| P1      | 0           | 6          |\r\n| P2      | 1           | 2          |\r\n| P3      | 2           | 8          |\r\n\r\n**Execution Timeline:**\r\n\r\n```txt\r\n0----------6----8----------16\r\n|----P1----|-P2-|----P3----|\r\n```\r\n\r\n**Calculations:**\r\n\r\n- P1: $$TAT = 6-0 = 6$$, $$WT = 6-6 = 0$$\r\n- P2: $$TAT = 8-1 = 7$$, $$WT = 7-2 = 5$$\r\n- P3: $$TAT = 16-2 = 14$$, $$WT = 14-8 = 6$$\r\n\r\n$$\r\n\\text{Average TAT} = \\frac{6+7+14}{3} = 9\r\n$$\r\n$$\r\n\\text{Average WT} = \\frac{0+5+6}{3} = 3.67\r\n$$\r\n\r\n**The Convoy Effect Problem:** Imagine you're at a fast-food restaurant behind someone ordering for their entire office. Even though you just want a simple burger, you have to wait for their massive order to complete. Similarly, if a long process arrives first, all shorter processes must wait, leading to poor average waiting times.\r\n\r\n#### Shortest Job First (SJF)\r\n\r\nSJF prioritizes processes with the shortest burst time, like serving the quickest orders first at a restaurant.\r\n\r\n**Non-Preemptive SJF Example:**\r\n\r\nUsing the same processes but scheduling shortest jobs first:\r\n\r\n| Process | Arrival Time | Burst Time |\r\n|---------|--------------|------------|\r\n| P2      | 1           | 2          |\r\n| P1      | 0           | 6          |\r\n| P3      | 2           | 8          |\r\n\r\n**Execution Timeline:**\r\n\r\n```txt\r\n0----------6----8----------16\r\n|----P1----|-P2-|----P3----|\r\n```\r\n\r\nWait, this looks the same! That's because P1 arrived first and was already running when P2 arrived. In non-preemptive SJF, we can't interrupt P1.\r\n\r\n**Preemptive SJF (Shortest Remaining Time First):**\r\n\r\nNow we can interrupt processes when a shorter job arrives:\r\n\r\n```txt\r\n0--1--3------9------17\r\n|P1|P2|--P1--|--P3--|\r\n```\r\n\r\n**Calculations for Preemptive SJF:**\r\n\r\n- P1: $$TAT = 9-0 = 9$$, $$WT = 9-6 = 3$$\r\n- P2: $$TAT = 3-1 = 2$$, $$WT = 2-2 = 0$$\r\n- P3: $$TAT = 17-2 = 15$$, $$WT = 15-8 = 7$$\r\n\r\n$$\r\n\\text{Average TAT} = 8.67\\text{, Average WT} = 3.33\r\n$$\r\n\r\nSJF gives optimal average waiting time, but it's hard to predict burst times in practice.\r\n\r\n#### Priority Scheduling\r\n\r\nEach process gets a priority value, and the CPU goes to the highest priority process. It's like having VIP lanes at airports.\r\n\r\n**Example with Preemptive Priority:**\r\n\r\n| Process | Arrival | Burst | Priority |\r\n|---------|---------|-------|----------|\r\n| P1      | 0       | 4     | 2        |\r\n| P2      | 1       | 3     | 1        |\r\n| P3      | 2       | 1     | 4        |\r\n| P4      | 3       | 5     | 3        |\r\n\r\n(Lower priority number = higher priority)\r\n\r\n**Execution Timeline:**\r\n\r\n```txt\r\n0--1------4--5---------9\r\n|P1|--P2--|P3|--P1+P4--|\r\n```\r\n\r\nP2 preempts P1 when it arrives (higher priority), then P1 resumes after P2 completes.\r\n\r\n**The Starvation Problem:** Low-priority processes might never get CPU time if high-priority processes keep arriving.\r\n\r\nSolution: **Aging** - gradually increase the priority of waiting processes over time.\r\n\r\n#### Round Robin (RR)\r\n\r\nRound Robin gives each process a fixed time slice (quantum), then moves to the next process in a circular fashion. It's like taking turns on a playground swing with a timer.\r\n\r\n**Example with Time Quantum = 2:**\r\n\r\n| Process | Arrival | Burst |\r\n|---------|---------|-------|\r\n| P1      | 0       | 4     |\r\n| P2      | 0       | 3     |\r\n| P3      | 0       | 1     |\r\n\r\n**Execution Timeline:**\r\n\r\n```txt\r\n0--2--4--5----6--8\r\n|P1|P2|P3|-P1-|P2|\r\n```\r\n\r\n**Process Flow:**\r\n\r\n1. P1 runs for 2 units (quantum), then goes to back of queue\r\n2. P2 runs for 2 units, then goes to back of queue\r\n3. P3 runs for 1 unit (completes), removed from queue\r\n4. P1 runs for remaining 2 units (completes)\r\n5. P2 runs for remaining 1 unit (completes)\r\n\r\n**Choosing Time Quantum:**\r\n\r\n- **Too small**: High context switch overhead, system spends more time switching than working\r\n- **Too large**: Becomes like FCFS, poor responsiveness\r\n- **Sweet spot**: Usually 10-100 milliseconds\r\n\r\n#### Multilevel Queue Scheduling\r\n\r\nProcesses are permanently assigned to different queues based on their characteristics. Each queue can have its own scheduling algorithm.\r\n\r\n**Example Setup:**\r\n\r\n- **Queue 1 (Foreground/Interactive)**: Uses Round Robin with quantum = 2\r\n- **Queue 2 (Background/Batch)**: Uses FCFS\r\n- **Priority**: Queue 1 always executes before Queue 2\r\n\r\n| Process | Queue | Arrival | Burst |\r\n|---------|-------|---------|-------|\r\n| P1      | 1     | 0       | 4     |\r\n| P2      | 1     | 0       | 3     |\r\n| P3      | 2     | 0       | 6     |\r\n| P4      | 2     | 0       | 8     |\r\n\r\n**Execution:**\r\n\r\nQueue 1 processes (P1, P2) execute first using Round Robin, then Queue 2 processes (P3, P4) execute using FCFS.\r\n\r\n#### Multilevel Feedback Queue Scheduling\r\n\r\nUnlike multilevel queue, processes can move between queues based on their behavior. It's like a smart system that learns from how processes behave.\r\n\r\n**Typical Setup:**\r\n\r\n- **Queue 0**: Round Robin with quantum = 4\r\n- **Queue 1**: Round Robin with quantum = 8\r\n- **Queue 2**: FCFS\r\n\r\n**Rules:**\r\n\r\n1. New processes start in Queue 0\r\n2. If a process uses its full time quantum, it moves to the next lower queue\r\n3. If a process doesn't use its full quantum (I/O bound), it stays in the same queue\r\n4. Higher queues have priority over lower queues\r\n\r\nThis naturally separates:\r\n\r\n- **I/O-bound processes** (interactive): Stay in high-priority queues\r\n- **CPU-bound processes** (batch): Move to lower-priority queues\r\n\r\n## Multiprocessor Scheduling\r\n\r\nModern systems have multiple CPU cores, adding complexity to scheduling decisions.\r\n\r\n#### Asymmetric Multiprocessing\r\n\r\nOne \"master\" processor handles all scheduling decisions and system activities. Other processors only execute user processes.\r\n\r\n**Pros:**\r\n\r\n- Simple to implement\r\n- No data sharing conflicts\r\n\r\n**Cons:**\r\n\r\n- Master processor can become a bottleneck\r\n- Doesn't scale well with many processors\r\n\r\n#### Symmetric Multiprocessing (SMP)\r\n\r\nAll processors are equal and can make scheduling decisions.\r\n\r\n#### Global Queue Approach\r\n\r\nAll processors share a single ready queue.\r\n\r\n**Pros:**\r\n\r\n- Automatic load balancing\r\n- Simple conceptually\r\n\r\n**Cons:**\r\n\r\n- Queue access requires locking (performance bottleneck)\r\n- Poor cache locality as processes can run on different processors\r\n\r\n#### Per-CPU Queue Approach\r\n\r\nEach processor has its own ready queue.\r\n\r\n**Pros:**\r\n\r\n- No locking overhead\r\n- Better cache locality\r\n- Scales well\r\n\r\n**Cons:**\r\n\r\n- Load imbalancing issues\r\n- More complex load balancing required\r\n\r\n**Load Balancing Techniques:**\r\n\r\n- **Push migration**: Periodically check for imbalanced queues and move processes\r\n- **Pull migration**: Idle processors \"steal\" work from busy processors\r\n\r\n**Processor Affinity:** Processes tend to run better on the same processor due to cache warmth. The scheduler tries to keep processes on the same processor when possible.\r\n\r\n## Real-World Examples\r\n\r\n**Windows**: Uses a multilevel feedback queue with 32 priority levels. Interactive processes get priority boosts to improve responsiveness.\r\n\r\n**Linux**: Uses the Completely Fair Scheduler (CFS), which tries to give each process an equal share of CPU time using a red-black tree data structure.\r\n\r\n**macOS**: Uses a multilevel feedback queue system similar to traditional Unix, with priority adjustments for interactive processes.\r\n\r\n## Coming Up Next\r\n\r\nProcess scheduling is crucial for system performance, but what happens when processes need to share resources and end up waiting for each other indefinitely? In our next post, we'll explore \"Deadlocks: When Your OS is in a Toxic Relationship\" - understanding how systems can get stuck and the strategies operating systems use to prevent, avoid, detect, and recover from these problematic situations.","src/content/blog/os-scheduling.md","ff0d46728df6f651",{html:1312,metadata:1313},"<h2 id=\"introduction\">Introduction</h2>\n<p>Ever wondered how your computer manages to run your music player, web browser, code editor, and chat application all at the same time? It might seem like magic, but there’s actually a lot of careful planning happening behind the scenes. Your operating system is constantly making decisions about which process gets to use the CPU next, and for how long.</p>\n<p>Today, we’ll explore the world of process scheduling - the algorithms and strategies that make multitasking possible. We’ll see why some applications feel snappy while others seem sluggish, and understand the trade-offs operating systems make to keep everything running smoothly.</p>\n<blockquote>\n<p>The execution timeline of a process might not be understandable at times for complex algorithms, so I highly recommend you to have the <a href=\"https://process-scheduling-solver.boonsuen.com/\">visualizer</a> open in a separate tab while reading this post. It will help you visualize the execution of processes and understand the scheduling algorithms better. Also, keep a pen and paper handy to jot down calculations as we go along!</p>\n</blockquote>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#the-scheduling-problem\">The Scheduling Problem</a></li>\n<li><a href=\"#understanding-process-states-and-schedulers\">Understanding Process States and Schedulers</a></li>\n<li><a href=\"#key-performance-metrics\">Key Performance Metrics</a></li>\n<li><a href=\"#preemptive-vs-non-preemptive-scheduling\">Preemptive vs Non-Preemptive Scheduling</a></li>\n<li><a href=\"#scheduling-algorithms\">Scheduling Algorithms</a>\n<ul>\n<li><a href=\"#first-come-first-serve-fcfs\">First Come First Serve (FCFS)</a></li>\n<li><a href=\"#shortest-job-first-sjf\">Shortest Job First (SJF)</a></li>\n<li><a href=\"#priority-scheduling\">Priority Scheduling</a></li>\n<li><a href=\"#round-robin-rr\">Round Robin (RR)</a></li>\n<li><a href=\"#multilevel-queue-scheduling\">Multilevel Queue Scheduling</a></li>\n<li><a href=\"#multilevel-feedback-queue-scheduling\">Multilevel Feedback Queue Scheduling</a></li>\n</ul>\n</li>\n<li><a href=\"#multiprocessor-scheduling\">Multiprocessor Scheduling</a></li>\n<li><a href=\"#coming-up-next\">Coming Up Next</a></li>\n</ul>\n<h2 id=\"the-scheduling-problem\">The Scheduling Problem</h2>\n<p>Imagine you’re a manager at a busy restaurant. You have multiple orders coming in, different dishes that take varying amounts of time to prepare, and a limited number of chefs. How do you decide which order to prepare first? Do you go in the order they arrived? Focus on the quickest dishes first? Or maybe prioritize VIP customers?</p>\n<p>This is exactly the problem your operating system faces, except instead of food orders, it’s managing processes (running programs), and instead of chefs, it has CPU cores. The goal is to keep everyone happy - users want their applications to be responsive, and the system wants to make efficient use of its resources.</p>\n<h2 id=\"understanding-process-states-and-schedulers\">Understanding Process States and Schedulers</h2>\n<p>Before diving into scheduling algorithms, let’s understand how processes move through different states:</p>\n<ul>\n<li><strong>New</strong>: Process is being created</li>\n<li><strong>Ready</strong>: Process is loaded in memory and waiting for CPU time</li>\n<li><strong>Running</strong>: Process is currently executing on the CPU</li>\n<li><strong>Waiting</strong>: Process is blocked, waiting for some event (like I/O completion)</li>\n<li><strong>Terminated</strong>: Process has finished execution</li>\n</ul>\n<p>The operating system uses different types of schedulers to manage these transitions:</p>\n<blockquote>\n<p>You can see all the process states in this <a href=\"https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/images/Chapter3/3_02_ProcessState.jpg\">diagram</a> from the University of Illinois at Chicago.</p>\n</blockquote>\n<h4 id=\"long-term-scheduler-job-scheduler\">Long-term Scheduler (Job Scheduler)</h4>\n<p>Think of this as the bouncer at a club. It decides which processes get admitted into the system and loaded into memory. It controls the degree of multiprogramming - how many processes are active at once.</p>\n<h4 id=\"short-term-scheduler-cpu-scheduler\">Short-term Scheduler (CPU Scheduler)</h4>\n<p>This is like a traffic controller at a busy intersection. It decides which process from the ready queue gets to use the CPU next. This happens very frequently - potentially thousands of times per second.</p>\n<h4 id=\"medium-term-scheduler\">Medium-term Scheduler</h4>\n<p>Acts like a parking valet, moving processes in and out of memory as needed to manage system resources effectively.</p>\n<h2 id=\"key-performance-metrics\">Key Performance Metrics</h2>\n<p>When evaluating scheduling algorithms, we use several important metrics:</p>\n<ul>\n<li><strong>Arrival Time (AT)</strong>: When the process enters the ready queue</li>\n<li><strong>Burst Time (BT)</strong>: How long the process needs the CPU</li>\n<li><strong>Completion Time (CT)</strong>: When the process finishes execution</li>\n<li><strong>Turnaround Time (TAT)</strong>: Total time from arrival to completion\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>T</mi><mi>A</mi><mi>T</mi><mo>=</mo><mi>C</mi><mi>T</mi><mo>−</mo><mi>A</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">TAT = CT - AT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">CT</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span>\n</li>\n<li><strong>Waiting Time (WT)</strong>: Time spent waiting in the ready queue\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>W</mi><mi>T</mi><mo>=</mo><mi>T</mi><mi>A</mi><mi>T</mi><mo>−</mo><mi>B</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">WT = TAT - BT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BT</span></span></span></span></span>\n</li>\n<li><strong>Response Time (RT)</strong>: Time from arrival until first CPU allocation</li>\n<li><strong>Throughput</strong>: Number of processes completed per time unit</li>\n</ul>\n<p>Our goal is to maximize CPU utilization and throughput while minimizing turnaround time, waiting time, and response time.</p>\n<h2 id=\"preemptive-vs-non-preemptive-scheduling\">Preemptive vs Non-Preemptive Scheduling</h2>\n<h4 id=\"non-preemptive-scheduling\">Non-Preemptive Scheduling</h4>\n<p>Once a process starts running, it keeps the CPU until it voluntarily gives it up (by finishing or requesting I/O). It’s like letting someone finish their entire presentation without interruption.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Simple to implement</li>\n<li>No overhead from context switching</li>\n<li>Predictable behavior</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>One long process can hold up everything else</li>\n<li>Poor responsiveness for interactive applications</li>\n</ul>\n<h4 id=\"preemptive-scheduling\">Preemptive Scheduling</h4>\n<p>The operating system can forcibly take the CPU away from a running process. It’s like having a timer that ensures everyone gets a fair chance to speak.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Better responsiveness</li>\n<li>Fairer resource sharing</li>\n<li>Can prioritize urgent tasks</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>More complex to implement</li>\n<li>Overhead from frequent context switches</li>\n<li>Potential for process starvation</li>\n</ul>\n<h2 id=\"scheduling-algorithms\">Scheduling Algorithms</h2>\n<blockquote>\n<p>Visualize all the scheduling algorithms using the <a href=\"https://process-scheduling-solver.boonsuen.com/\">visualizer</a> as we go along! You will get the Gantt charts as well.</p>\n</blockquote>\n<p>Let’s explore the main scheduling algorithms with practical examples.</p>\n<h4 id=\"first-come-first-serve-fcfs\">First Come First Serve (FCFS)</h4>\n<p>FCFS is the simplest scheduling algorithm - processes are executed in the order they arrive, just like a queue at the grocery store.</p>\n<p><strong>Example:</strong></p>\n<p>Let’s say we have three processes:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Process</th><th>Arrival Time</th><th>Burst Time</th></tr></thead><tbody><tr><td>P1</td><td>0</td><td>6</td></tr><tr><td>P2</td><td>1</td><td>2</td></tr><tr><td>P3</td><td>2</td><td>8</td></tr></tbody></table>\n<p><strong>Execution Timeline:</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>0----------6----8----------16</span></span>\n<span class=\"line\"><span>|----P1----|-P2-|----P3----|</span></span></code></pre>\n<p><strong>Calculations:</strong></p>\n<ul>\n<li>P1: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>A</mi><mi>T</mi><mo>=</mo><mn>6</mn><mo>−</mo><mn>0</mn><mo>=</mo><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">TAT = 6-0 = 6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">6</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mi>T</mi><mo>=</mo><mn>6</mn><mo>−</mo><mn>6</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">WT = 6-6 = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></li>\n<li>P2: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>A</mi><mi>T</mi><mo>=</mo><mn>8</mn><mo>−</mo><mn>1</mn><mo>=</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">TAT = 8-1 = 7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mi>T</mi><mo>=</mo><mn>7</mn><mo>−</mo><mn>2</mn><mo>=</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">WT = 7-2 = 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span></li>\n<li>P3: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>A</mi><mi>T</mi><mo>=</mo><mn>16</mn><mo>−</mo><mn>2</mn><mo>=</mo><mn>14</mn></mrow><annotation encoding=\"application/x-tex\">TAT = 16-2 = 14</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">16</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">14</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mi>T</mi><mo>=</mo><mn>14</mn><mo>−</mo><mn>8</mn><mo>=</mo><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">WT = 14-8 = 6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">14</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">6</span></span></span></span></li>\n</ul>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>Average TAT</mtext><mo>=</mo><mfrac><mrow><mn>6</mn><mo>+</mo><mn>7</mn><mo>+</mo><mn>14</mn></mrow><mn>3</mn></mfrac><mo>=</mo><mn>9</mn></mrow><annotation encoding=\"application/x-tex\">\\text{Average TAT} = \\frac{6+7+14}{3} = 9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord\">Average TAT</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0074em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">14</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">9</span></span></span></span></span>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>Average WT</mtext><mo>=</mo><mfrac><mrow><mn>0</mn><mo>+</mo><mn>5</mn><mo>+</mo><mn>6</mn></mrow><mn>3</mn></mfrac><mo>=</mo><mn>3.67</mn></mrow><annotation encoding=\"application/x-tex\">\\text{Average WT} = \\frac{0+5+6}{3} = 3.67</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord\">Average WT</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0074em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3.67</span></span></span></span></span>\n<p><strong>The Convoy Effect Problem:</strong> Imagine you’re at a fast-food restaurant behind someone ordering for their entire office. Even though you just want a simple burger, you have to wait for their massive order to complete. Similarly, if a long process arrives first, all shorter processes must wait, leading to poor average waiting times.</p>\n<h4 id=\"shortest-job-first-sjf\">Shortest Job First (SJF)</h4>\n<p>SJF prioritizes processes with the shortest burst time, like serving the quickest orders first at a restaurant.</p>\n<p><strong>Non-Preemptive SJF Example:</strong></p>\n<p>Using the same processes but scheduling shortest jobs first:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Process</th><th>Arrival Time</th><th>Burst Time</th></tr></thead><tbody><tr><td>P2</td><td>1</td><td>2</td></tr><tr><td>P1</td><td>0</td><td>6</td></tr><tr><td>P3</td><td>2</td><td>8</td></tr></tbody></table>\n<p><strong>Execution Timeline:</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>0----------6----8----------16</span></span>\n<span class=\"line\"><span>|----P1----|-P2-|----P3----|</span></span></code></pre>\n<p>Wait, this looks the same! That’s because P1 arrived first and was already running when P2 arrived. In non-preemptive SJF, we can’t interrupt P1.</p>\n<p><strong>Preemptive SJF (Shortest Remaining Time First):</strong></p>\n<p>Now we can interrupt processes when a shorter job arrives:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>0--1--3------9------17</span></span>\n<span class=\"line\"><span>|P1|P2|--P1--|--P3--|</span></span></code></pre>\n<p><strong>Calculations for Preemptive SJF:</strong></p>\n<ul>\n<li>P1: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>A</mi><mi>T</mi><mo>=</mo><mn>9</mn><mo>−</mo><mn>0</mn><mo>=</mo><mn>9</mn></mrow><annotation encoding=\"application/x-tex\">TAT = 9-0 = 9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">9</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">9</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mi>T</mi><mo>=</mo><mn>9</mn><mo>−</mo><mn>6</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">WT = 9-6 = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">9</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span></li>\n<li>P2: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>A</mi><mi>T</mi><mo>=</mo><mn>3</mn><mo>−</mo><mn>1</mn><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">TAT = 3-1 = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mi>T</mi><mo>=</mo><mn>2</mn><mo>−</mo><mn>2</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">WT = 2-2 = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></li>\n<li>P3: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>A</mi><mi>T</mi><mo>=</mo><mn>17</mn><mo>−</mo><mn>2</mn><mo>=</mo><mn>15</mn></mrow><annotation encoding=\"application/x-tex\">TAT = 17-2 = 15</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">17</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">15</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mi>T</mi><mo>=</mo><mn>15</mn><mo>−</mo><mn>8</mn><mo>=</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">WT = 15-8 = 7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">15</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span></li>\n</ul>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>Average TAT</mtext><mo>=</mo><mn>8.67</mn><mtext>, Average WT</mtext><mo>=</mo><mn>3.33</mn></mrow><annotation encoding=\"application/x-tex\">\\text{Average TAT} = 8.67\\text{, Average WT} = 3.33</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord\">Average TAT</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\">8.67</span><span class=\"mord text\"><span class=\"mord\">, Average WT</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3.33</span></span></span></span></span>\n<p>SJF gives optimal average waiting time, but it’s hard to predict burst times in practice.</p>\n<h4 id=\"priority-scheduling\">Priority Scheduling</h4>\n<p>Each process gets a priority value, and the CPU goes to the highest priority process. It’s like having VIP lanes at airports.</p>\n<p><strong>Example with Preemptive Priority:</strong></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Process</th><th>Arrival</th><th>Burst</th><th>Priority</th></tr></thead><tbody><tr><td>P1</td><td>0</td><td>4</td><td>2</td></tr><tr><td>P2</td><td>1</td><td>3</td><td>1</td></tr><tr><td>P3</td><td>2</td><td>1</td><td>4</td></tr><tr><td>P4</td><td>3</td><td>5</td><td>3</td></tr></tbody></table>\n<p>(Lower priority number = higher priority)</p>\n<p><strong>Execution Timeline:</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>0--1------4--5---------9</span></span>\n<span class=\"line\"><span>|P1|--P2--|P3|--P1+P4--|</span></span></code></pre>\n<p>P2 preempts P1 when it arrives (higher priority), then P1 resumes after P2 completes.</p>\n<p><strong>The Starvation Problem:</strong> Low-priority processes might never get CPU time if high-priority processes keep arriving.</p>\n<p>Solution: <strong>Aging</strong> - gradually increase the priority of waiting processes over time.</p>\n<h4 id=\"round-robin-rr\">Round Robin (RR)</h4>\n<p>Round Robin gives each process a fixed time slice (quantum), then moves to the next process in a circular fashion. It’s like taking turns on a playground swing with a timer.</p>\n<p><strong>Example with Time Quantum = 2:</strong></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Process</th><th>Arrival</th><th>Burst</th></tr></thead><tbody><tr><td>P1</td><td>0</td><td>4</td></tr><tr><td>P2</td><td>0</td><td>3</td></tr><tr><td>P3</td><td>0</td><td>1</td></tr></tbody></table>\n<p><strong>Execution Timeline:</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>0--2--4--5----6--8</span></span>\n<span class=\"line\"><span>|P1|P2|P3|-P1-|P2|</span></span></code></pre>\n<p><strong>Process Flow:</strong></p>\n<ol>\n<li>P1 runs for 2 units (quantum), then goes to back of queue</li>\n<li>P2 runs for 2 units, then goes to back of queue</li>\n<li>P3 runs for 1 unit (completes), removed from queue</li>\n<li>P1 runs for remaining 2 units (completes)</li>\n<li>P2 runs for remaining 1 unit (completes)</li>\n</ol>\n<p><strong>Choosing Time Quantum:</strong></p>\n<ul>\n<li><strong>Too small</strong>: High context switch overhead, system spends more time switching than working</li>\n<li><strong>Too large</strong>: Becomes like FCFS, poor responsiveness</li>\n<li><strong>Sweet spot</strong>: Usually 10-100 milliseconds</li>\n</ul>\n<h4 id=\"multilevel-queue-scheduling\">Multilevel Queue Scheduling</h4>\n<p>Processes are permanently assigned to different queues based on their characteristics. Each queue can have its own scheduling algorithm.</p>\n<p><strong>Example Setup:</strong></p>\n<ul>\n<li><strong>Queue 1 (Foreground/Interactive)</strong>: Uses Round Robin with quantum = 2</li>\n<li><strong>Queue 2 (Background/Batch)</strong>: Uses FCFS</li>\n<li><strong>Priority</strong>: Queue 1 always executes before Queue 2</li>\n</ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Process</th><th>Queue</th><th>Arrival</th><th>Burst</th></tr></thead><tbody><tr><td>P1</td><td>1</td><td>0</td><td>4</td></tr><tr><td>P2</td><td>1</td><td>0</td><td>3</td></tr><tr><td>P3</td><td>2</td><td>0</td><td>6</td></tr><tr><td>P4</td><td>2</td><td>0</td><td>8</td></tr></tbody></table>\n<p><strong>Execution:</strong></p>\n<p>Queue 1 processes (P1, P2) execute first using Round Robin, then Queue 2 processes (P3, P4) execute using FCFS.</p>\n<h4 id=\"multilevel-feedback-queue-scheduling\">Multilevel Feedback Queue Scheduling</h4>\n<p>Unlike multilevel queue, processes can move between queues based on their behavior. It’s like a smart system that learns from how processes behave.</p>\n<p><strong>Typical Setup:</strong></p>\n<ul>\n<li><strong>Queue 0</strong>: Round Robin with quantum = 4</li>\n<li><strong>Queue 1</strong>: Round Robin with quantum = 8</li>\n<li><strong>Queue 2</strong>: FCFS</li>\n</ul>\n<p><strong>Rules:</strong></p>\n<ol>\n<li>New processes start in Queue 0</li>\n<li>If a process uses its full time quantum, it moves to the next lower queue</li>\n<li>If a process doesn’t use its full quantum (I/O bound), it stays in the same queue</li>\n<li>Higher queues have priority over lower queues</li>\n</ol>\n<p>This naturally separates:</p>\n<ul>\n<li><strong>I/O-bound processes</strong> (interactive): Stay in high-priority queues</li>\n<li><strong>CPU-bound processes</strong> (batch): Move to lower-priority queues</li>\n</ul>\n<h2 id=\"multiprocessor-scheduling\">Multiprocessor Scheduling</h2>\n<p>Modern systems have multiple CPU cores, adding complexity to scheduling decisions.</p>\n<h4 id=\"asymmetric-multiprocessing\">Asymmetric Multiprocessing</h4>\n<p>One “master” processor handles all scheduling decisions and system activities. Other processors only execute user processes.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Simple to implement</li>\n<li>No data sharing conflicts</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Master processor can become a bottleneck</li>\n<li>Doesn’t scale well with many processors</li>\n</ul>\n<h4 id=\"symmetric-multiprocessing-smp\">Symmetric Multiprocessing (SMP)</h4>\n<p>All processors are equal and can make scheduling decisions.</p>\n<h4 id=\"global-queue-approach\">Global Queue Approach</h4>\n<p>All processors share a single ready queue.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Automatic load balancing</li>\n<li>Simple conceptually</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Queue access requires locking (performance bottleneck)</li>\n<li>Poor cache locality as processes can run on different processors</li>\n</ul>\n<h4 id=\"per-cpu-queue-approach\">Per-CPU Queue Approach</h4>\n<p>Each processor has its own ready queue.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>No locking overhead</li>\n<li>Better cache locality</li>\n<li>Scales well</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Load imbalancing issues</li>\n<li>More complex load balancing required</li>\n</ul>\n<p><strong>Load Balancing Techniques:</strong></p>\n<ul>\n<li><strong>Push migration</strong>: Periodically check for imbalanced queues and move processes</li>\n<li><strong>Pull migration</strong>: Idle processors “steal” work from busy processors</li>\n</ul>\n<p><strong>Processor Affinity:</strong> Processes tend to run better on the same processor due to cache warmth. The scheduler tries to keep processes on the same processor when possible.</p>\n<h2 id=\"real-world-examples\">Real-World Examples</h2>\n<p><strong>Windows</strong>: Uses a multilevel feedback queue with 32 priority levels. Interactive processes get priority boosts to improve responsiveness.</p>\n<p><strong>Linux</strong>: Uses the Completely Fair Scheduler (CFS), which tries to give each process an equal share of CPU time using a red-black tree data structure.</p>\n<p><strong>macOS</strong>: Uses a multilevel feedback queue system similar to traditional Unix, with priority adjustments for interactive processes.</p>\n<h2 id=\"coming-up-next\">Coming Up Next</h2>\n<p>Process scheduling is crucial for system performance, but what happens when processes need to share resources and end up waiting for each other indefinitely? In our next post, we’ll explore “Deadlocks: When Your OS is in a Toxic Relationship” - understanding how systems can get stuck and the strategies operating systems use to prevent, avoid, detect, and recover from these problematic situations.</p>",{headings:1314,localImagePaths:1382,remoteImagePaths:1383,frontmatter:1384,imagePaths:1386},[1315,1316,1317,1320,1323,1326,1329,1332,1335,1338,1341,1344,1347,1350,1353,1356,1359,1362,1365,1368,1371,1374,1377,1380,1381],{depth:34,slug:117,text:118},{depth:34,slug:45,text:46},{depth:34,slug:1318,text:1319},"the-scheduling-problem","The Scheduling Problem",{depth:34,slug:1321,text:1322},"understanding-process-states-and-schedulers","Understanding Process States and Schedulers",{depth:38,slug:1324,text:1325},"long-term-scheduler-job-scheduler","Long-term Scheduler (Job Scheduler)",{depth:38,slug:1327,text:1328},"short-term-scheduler-cpu-scheduler","Short-term Scheduler (CPU Scheduler)",{depth:38,slug:1330,text:1331},"medium-term-scheduler","Medium-term Scheduler",{depth:34,slug:1333,text:1334},"key-performance-metrics","Key Performance Metrics",{depth:34,slug:1336,text:1337},"preemptive-vs-non-preemptive-scheduling","Preemptive vs Non-Preemptive Scheduling",{depth:38,slug:1339,text:1340},"non-preemptive-scheduling","Non-Preemptive Scheduling",{depth:38,slug:1342,text:1343},"preemptive-scheduling","Preemptive Scheduling",{depth:34,slug:1345,text:1346},"scheduling-algorithms","Scheduling Algorithms",{depth:38,slug:1348,text:1349},"first-come-first-serve-fcfs","First Come First Serve (FCFS)",{depth:38,slug:1351,text:1352},"shortest-job-first-sjf","Shortest Job First (SJF)",{depth:38,slug:1354,text:1355},"priority-scheduling","Priority Scheduling",{depth:38,slug:1357,text:1358},"round-robin-rr","Round Robin (RR)",{depth:38,slug:1360,text:1361},"multilevel-queue-scheduling","Multilevel Queue Scheduling",{depth:38,slug:1363,text:1364},"multilevel-feedback-queue-scheduling","Multilevel Feedback Queue Scheduling",{depth:34,slug:1366,text:1367},"multiprocessor-scheduling","Multiprocessor Scheduling",{depth:38,slug:1369,text:1370},"asymmetric-multiprocessing","Asymmetric Multiprocessing",{depth:38,slug:1372,text:1373},"symmetric-multiprocessing-smp","Symmetric Multiprocessing (SMP)",{depth:38,slug:1375,text:1376},"global-queue-approach","Global Queue Approach",{depth:38,slug:1378,text:1379},"per-cpu-queue-approach","Per-CPU Queue Approach",{depth:34,slug:281,text:282},{depth:34,slug:183,text:184},[],[],{title:1301,date:1385,description:1304,author:16,thumbnail:1305,series:147,seriesOrder:1307,minutesRead:699},["Date","2025-05-25T00:00:00.000Z"],[],"os-scheduling.md","process-vs-program",{id:1388,data:1390,body:1397,filePath:1398,digest:1399,rendered:1400,legacyId:1434},{title:1391,author:1392,draft:18,date:1393,description:1394,featured:18,thumbnail:1395,series:1396,seriesOrder:25},"Process vs. Program: Why the Difference Matters",{id:16,collection:17},["Date","2025-05-21T00:00:00.000Z"],"A deep dive into the difference between a process and a program, and why it matters in the world of computing.","/thumbnails/process-vs-programs.png",{id:147,collection:24},"## Introduction\r\n\r\nMost people use the terms \"program\" and \"process\" interchangeably, but in the world of operating systems, they're distinctly different concepts. Understanding this difference is crucial to grasping how your computer manages resources and creates that multitasking magic we discussed in our previous post.\r\n\r\n## Table of Contents\r\n\r\n- [The Key Difference: Static vs. Dynamic](#the-key-difference-static-vs-dynamic)\r\n- [What Makes a Process?](#what-makes-a-process)\r\n  - [Memory Space](#memory-space)\r\n  - [Process Control Block (PCB): The Process's ID Card](#process-control-block-pcb-the-processs-id-card)\r\n- [The Process Lifecycle](#the-process-lifecycle)\r\n- [Process Hierarchy: Parents and Children](#process-hierarchy-parents-and-children)\r\n- [Why This Matters to You](#why-this-matters-to-you)\r\n- [See It For Yourself](#see-it-for-yourself)\r\n- [Coming Up Next](#coming-up-next)\r\n\r\n## The Key Difference: Static vs. Dynamic\r\n\r\nImagine a recipe book sitting on your kitchen shelf. That's your **program** – a set of instructions waiting to be used. When you actually cook the recipe, using specific ingredients and kitchenware, that's a **process** – the dynamic execution of those instructions.\r\n\r\nLet's make this concrete:\r\n\r\n- **Program**: The Firefox executable file sitting in your Applications folder\r\n- **Process**: Firefox running on your computer right now, with specific memory allocated, tabs open, and a unique process ID\r\n\r\nOne program can spawn multiple processes. Open Chrome twice and you'll have two distinct Chrome processes running simultaneously – same instructions, different execution environments.\r\n\r\n## What Makes a Process?\r\n\r\nA process is much more than just running code. Each process has its own:\r\n\r\n#### Memory Space\r\n\r\nEvery process gets its own private memory divided into segments:\r\n\r\n- **Code (Text) Segment**: The program instructions\r\n- **Data Segment**: Global and static variables\r\n- **Stack**: Local variables and function call information\r\n- **Heap**: Dynamically allocated memory\r\n\r\nThis separation ensures that one misbehaving process can't easily corrupt another's memory.\r\n\r\n#### Process Control Block (PCB): The Process's ID Card\r\n\r\nThe operating system keeps track of every process using a data structure called the Process Control Block (PCB). Think of it as the process's ID card, containing:\r\n\r\n- **Process ID (PID)**: A unique identifier\r\n- **Process State**: Running, ready, blocked, etc.\r\n- **Program Counter**: Address of the next instruction to execute\r\n- **CPU Register Information**: The values in CPU registers when the process last ran\r\n- **CPU Scheduling Information**: Priority level, scheduling queue pointers\r\n- **Memory Management Information**: Base and limit registers, page tables\r\n- **Accounting Information**: CPU time used, time limits\r\n- **I/O Status Information**: List of open files, pending I/O requests\r\n\r\nWhen the OS switches between processes, it uses the PCB to save and restore each process's execution context.\r\n\r\n## The Process Lifecycle\r\n\r\nUnlike programs, processes have a lifecycle:\r\n\r\n1. **Creation**: When you double-click an application icon\r\n2. **Ready**: Waiting for CPU time\r\n3. **Running**: Currently executing on the CPU\r\n4. **Blocked/Waiting**: Waiting for some event (like disk I/O)\r\n5. **Termination**: Process completes execution or is killed\r\n\r\nThis state information is constantly updated in the process's PCB.\r\n\r\n## Process Hierarchy: Parents and Children\r\n\r\nIn most operating systems, processes exist in a parent-child relationship:\r\n\r\n- Each process (except the first one) is created by another process\r\n- The creating process is called the parent\r\n- The new process is the child\r\n- This forms a process tree with the initial process (often called \"init\" in Unix/Linux) at the root\r\n\r\nYou can observe this hierarchy on Linux with the `pstree` command or on Windows in the Task Manager's \"Details\" tab by enabling the \"Parent Process ID\" column.\r\n\r\n## Why This Matters to You\r\n\r\nUnderstanding the difference between programs and processes helps explain:\r\n\r\n1. Why restarting an application clears up problems (you're creating a fresh process)\r\n2. How your OS protects applications from each other\r\n3. Why some applications can have multiple windows (each might be a separate process)\r\n4. How force-quitting works (terminating a specific process)\r\n\r\n## See It For Yourself\r\n\r\nWant to see processes in action? Try this:\r\n\r\n1. Open your Task Manager (Windows), Activity Monitor (Mac), or System Monitor (Linux)\r\n2. Launch your favorite browser\r\n3. Open several tabs\r\n4. Watch how each tab might create its own process with its own memory usage\r\n5. Close tabs and watch processes disappear\r\n\r\n## Coming Up Next\r\n\r\nNow that we understand what processes are, our next post will explore how your operating system decides which process gets to run next. We'll dive into the fascinating world of CPU scheduling algorithms and how they balance responsiveness, fairness, and efficiency.","src/content/blog/process-vs-program.md","cab916a353d5b5cf",{html:1401,metadata:1402},"<h2 id=\"introduction\">Introduction</h2>\n<p>Most people use the terms “program” and “process” interchangeably, but in the world of operating systems, they’re distinctly different concepts. Understanding this difference is crucial to grasping how your computer manages resources and creates that multitasking magic we discussed in our previous post.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#the-key-difference-static-vs-dynamic\">The Key Difference: Static vs. Dynamic</a></li>\n<li><a href=\"#what-makes-a-process\">What Makes a Process?</a>\n<ul>\n<li><a href=\"#memory-space\">Memory Space</a></li>\n<li><a href=\"#process-control-block-pcb-the-processs-id-card\">Process Control Block (PCB): The Process’s ID Card</a></li>\n</ul>\n</li>\n<li><a href=\"#the-process-lifecycle\">The Process Lifecycle</a></li>\n<li><a href=\"#process-hierarchy-parents-and-children\">Process Hierarchy: Parents and Children</a></li>\n<li><a href=\"#why-this-matters-to-you\">Why This Matters to You</a></li>\n<li><a href=\"#see-it-for-yourself\">See It For Yourself</a></li>\n<li><a href=\"#coming-up-next\">Coming Up Next</a></li>\n</ul>\n<h2 id=\"the-key-difference-static-vs-dynamic\">The Key Difference: Static vs. Dynamic</h2>\n<p>Imagine a recipe book sitting on your kitchen shelf. That’s your <strong>program</strong> – a set of instructions waiting to be used. When you actually cook the recipe, using specific ingredients and kitchenware, that’s a <strong>process</strong> – the dynamic execution of those instructions.</p>\n<p>Let’s make this concrete:</p>\n<ul>\n<li><strong>Program</strong>: The Firefox executable file sitting in your Applications folder</li>\n<li><strong>Process</strong>: Firefox running on your computer right now, with specific memory allocated, tabs open, and a unique process ID</li>\n</ul>\n<p>One program can spawn multiple processes. Open Chrome twice and you’ll have two distinct Chrome processes running simultaneously – same instructions, different execution environments.</p>\n<h2 id=\"what-makes-a-process\">What Makes a Process?</h2>\n<p>A process is much more than just running code. Each process has its own:</p>\n<h4 id=\"memory-space\">Memory Space</h4>\n<p>Every process gets its own private memory divided into segments:</p>\n<ul>\n<li><strong>Code (Text) Segment</strong>: The program instructions</li>\n<li><strong>Data Segment</strong>: Global and static variables</li>\n<li><strong>Stack</strong>: Local variables and function call information</li>\n<li><strong>Heap</strong>: Dynamically allocated memory</li>\n</ul>\n<p>This separation ensures that one misbehaving process can’t easily corrupt another’s memory.</p>\n<h4 id=\"process-control-block-pcb-the-processs-id-card\">Process Control Block (PCB): The Process’s ID Card</h4>\n<p>The operating system keeps track of every process using a data structure called the Process Control Block (PCB). Think of it as the process’s ID card, containing:</p>\n<ul>\n<li><strong>Process ID (PID)</strong>: A unique identifier</li>\n<li><strong>Process State</strong>: Running, ready, blocked, etc.</li>\n<li><strong>Program Counter</strong>: Address of the next instruction to execute</li>\n<li><strong>CPU Register Information</strong>: The values in CPU registers when the process last ran</li>\n<li><strong>CPU Scheduling Information</strong>: Priority level, scheduling queue pointers</li>\n<li><strong>Memory Management Information</strong>: Base and limit registers, page tables</li>\n<li><strong>Accounting Information</strong>: CPU time used, time limits</li>\n<li><strong>I/O Status Information</strong>: List of open files, pending I/O requests</li>\n</ul>\n<p>When the OS switches between processes, it uses the PCB to save and restore each process’s execution context.</p>\n<h2 id=\"the-process-lifecycle\">The Process Lifecycle</h2>\n<p>Unlike programs, processes have a lifecycle:</p>\n<ol>\n<li><strong>Creation</strong>: When you double-click an application icon</li>\n<li><strong>Ready</strong>: Waiting for CPU time</li>\n<li><strong>Running</strong>: Currently executing on the CPU</li>\n<li><strong>Blocked/Waiting</strong>: Waiting for some event (like disk I/O)</li>\n<li><strong>Termination</strong>: Process completes execution or is killed</li>\n</ol>\n<p>This state information is constantly updated in the process’s PCB.</p>\n<h2 id=\"process-hierarchy-parents-and-children\">Process Hierarchy: Parents and Children</h2>\n<p>In most operating systems, processes exist in a parent-child relationship:</p>\n<ul>\n<li>Each process (except the first one) is created by another process</li>\n<li>The creating process is called the parent</li>\n<li>The new process is the child</li>\n<li>This forms a process tree with the initial process (often called “init” in Unix/Linux) at the root</li>\n</ul>\n<p>You can observe this hierarchy on Linux with the <code>pstree</code> command or on Windows in the Task Manager’s “Details” tab by enabling the “Parent Process ID” column.</p>\n<h2 id=\"why-this-matters-to-you\">Why This Matters to You</h2>\n<p>Understanding the difference between programs and processes helps explain:</p>\n<ol>\n<li>Why restarting an application clears up problems (you’re creating a fresh process)</li>\n<li>How your OS protects applications from each other</li>\n<li>Why some applications can have multiple windows (each might be a separate process)</li>\n<li>How force-quitting works (terminating a specific process)</li>\n</ol>\n<h2 id=\"see-it-for-yourself\">See It For Yourself</h2>\n<p>Want to see processes in action? Try this:</p>\n<ol>\n<li>Open your Task Manager (Windows), Activity Monitor (Mac), or System Monitor (Linux)</li>\n<li>Launch your favorite browser</li>\n<li>Open several tabs</li>\n<li>Watch how each tab might create its own process with its own memory usage</li>\n<li>Close tabs and watch processes disappear</li>\n</ol>\n<h2 id=\"coming-up-next\">Coming Up Next</h2>\n<p>Now that we understand what processes are, our next post will explore how your operating system decides which process gets to run next. We’ll dive into the fascinating world of CPU scheduling algorithms and how they balance responsiveness, fairness, and efficiency.</p>",{headings:1403,localImagePaths:1429,remoteImagePaths:1430,frontmatter:1431,imagePaths:1433},[1404,1405,1406,1409,1412,1415,1418,1421,1424,1425,1428],{depth:34,slug:117,text:118},{depth:34,slug:45,text:46},{depth:34,slug:1407,text:1408},"the-key-difference-static-vs-dynamic","The Key Difference: Static vs. Dynamic",{depth:34,slug:1410,text:1411},"what-makes-a-process","What Makes a Process?",{depth:38,slug:1413,text:1414},"memory-space","Memory Space",{depth:38,slug:1416,text:1417},"process-control-block-pcb-the-processs-id-card","Process Control Block (PCB): The Process’s ID Card",{depth:34,slug:1419,text:1420},"the-process-lifecycle","The Process Lifecycle",{depth:34,slug:1422,text:1423},"process-hierarchy-parents-and-children","Process Hierarchy: Parents and Children",{depth:34,slug:999,text:1000},{depth:34,slug:1426,text:1427},"see-it-for-yourself","See It For Yourself",{depth:34,slug:183,text:184},[],[],{title:1391,date:1432,description:1394,author:16,thumbnail:1395,series:147,seriesOrder:25,minutesRead:243},["Date","2025-05-21T00:00:00.000Z"],[],"process-vs-program.md","shannon-information-theory",{id:1435,data:1437,body:1443,filePath:1444,digest:1445,rendered:1446,legacyId:1468},{title:1438,author:1439,draft:18,date:1440,description:1441,featured:18,thumbnail:106,series:1442,seriesOrder:396},"Season 1, Act VI: Shannon’s Secret Sauce",{id:16,collection:17},["Date","2025-08-27T00:00:00.000Z"],"Information Theory & Why Bits Matter",{id:108,collection:24},"## Introduction\r\n\r\nSo far, our journey has been in the abstract realm of pure logic. Gödel, Church, and Turing explored the absolute limits of what could be computed. But their work didn't address a critical, real-world problem: once you have a computation, how do you **send its result** from one place to another reliably?\r\n\r\nThis was the world of engineers, of crackly telephone lines, static-filled radio waves, and garbled telegraph signals. The prevailing wisdom was that noise was an unavoidable enemy that would always corrupt a message. The more you transmitted, the more errors you'd get.\r\n\r\nThen, in 1948, a brilliant and playful engineer at Bell Labs named **Claude Shannon** published a paper that changed everything. This was a man who not only laid the foundations for the digital age but also spent his spare time building juggling machines and estimating the game-tree complexity of chess (a figure now known as the **Shannon number**, roughly $10^{120}$). His landmark paper was called \"A Mathematical Theory of Communication,\" and it single-handedly created the field of **information theory**.\r\n\r\n## The Big Idea: Separating Information from Meaning\r\n\r\nShannon's first stroke of genius was to completely ignore the _meaning_ of a message. To him, it didn't matter if you were sending a Shakespearean sonnet, a stock market quote, or complete gibberish. He wanted to quantify the information itself.\r\n\r\nHe proposed a radical new unit of measure: the **bit**.\r\n\r\nA **bit** (a portmanteau of \"binary digit\") is the most fundamental unit of information. It represents the answer to a single yes/no question, reducing uncertainty by exactly half.\r\n\r\n- Is the light on or off?\r\n- Is the coin heads or tails?\r\n- Is the voltage high or low?\r\n\r\nBy encoding any message into a long string of these binary digits (0s and 1s), Shannon could treat all information the same, regardless of its content.\r\n\r\n## Entropy: The Measure of Surprise\r\n\r\nShannon then asked, \"How much information is in a message?\" His answer was profound: the amount of information is the measure of its **surprise**.\r\n\r\nIf I tell you \"the sun will rise tomorrow,\" you're not surprised. It's a predictable event. The information content is very low. But if I tell you \"a blizzard will hit Miami tomorrow,\" you are very surprised. That message contains a lot of information.\r\n\r\nShannon gave this concept a precise mathematical form and called it **Entropy**, denoted by $H$. For a source of information $X$ that can produce several symbols, the entropy is the average amount of information (in bits) per symbol.\r\n\r\nThe formula for entropy is:\r\n\r\n$$\r\nH(X) = -\\sum_{i} p(x_i) \\log_2 p(x_i)\r\n$$\r\n\r\nLet's break that down:\r\n\r\n- $X$ is the source of information (e.g., a coin flip).\r\n\r\n- $x_i$ is one of the possible outcomes (e.g., \"heads\").\r\n\r\n- $p(x_i)$ is the probability of that outcome happening.\r\n\r\n- $\\log_2 p(x_i)$ is the magic part. It quantifies the \"surprise\" of that outcome in bits. The logarithm base 2 is used because we are measuring in bits.\r\n\r\n- The $\\sum$ (sigma) means we sum this value up for all possible outcomes.\r\n\r\n#### Example: A Fair Coin vs. A Rigged Coin\r\n\r\n- **Fair Coin**: Heads ($p = 0.5$) and Tails ($p = 0.5$). The entropy is $H = -(0.5 \\log_2 0.5 + 0.5 \\log_2 0.5) = 1$ bit. Each flip gives you exactly one bit of information because the outcome is maximally uncertain.\r\n\r\n- **Rigged Coin**: Heads ($p = 0.9$) and Tails ($p = 0.1$). The entropy is $H = -(0.9 \\log_2 0.9 + 0.1 \\log_2 0.1) \\approx 0.47$ bits. The outcome is more predictable, so on average, each flip gives you less than half a bit of new information.\r\n\r\n## The Channel Capacity Theorem\r\n\r\nThis was all leading to Shannon's masterpiece. He modeled a communication system: a **source** sends a message through a **noisy channel** to a **receiver**.\r\n\r\nHe defined a property of the channel itself, called its **Channel Capacity ($C$)**. This is the maximum rate, in bits per second, at which information can be sent through the channel with an arbitrarily small probability of error.\r\n\r\nHe then gave the world the stunning **Shannon-Hartley Theorem**, which calculates this capacity:\r\n\r\n$$\r\nC = B \\log_2(1 + \\frac{S}{N})\r\n$$\r\n\r\n- $C$: The channel capacity in bits per second.\r\n- $B$: The **bandwidth** of the channel (e.g., the range of frequencies a radio can use), measured in Hertz.\r\n- $S$: The average power of the signal you are sending.\r\n- $N$: The average power of the noise in the channel.\r\n- $S/N$: The famous **Signal-to-Noise Ratio (SNR)**.\r\n\r\nThis elegant formula connected the physical properties of a wire or an antenna ($B$, $S$, $N$) to the abstract, logical concept of information ($C$).\r\n\r\nShannon's theorem made a shocking promise: It doesn't matter how noisy your channel is. As long as your transmission rate is **below** the channel capacity $C$, you can invent an encoding scheme that allows you to transmit information with **zero errors**.\r\n\r\nThis was revolutionary. Noise was no longer an insurmountable barrier; it was just a variable in an equation. It defined a speed limit, not a hard wall. This insight is the theoretical foundation for every piece of modern digital communication, from Wi-Fi and 4G to data compression (like .zip files) and the error-correcting codes that allow spacecraft to send clear images from billions of miles away.\r\n\r\nWith the theory of information laid out, the stage was set. The world now understood the limits of computation and the rules of communication. All that was needed was a blueprint for a machine that could actually do it all. That blueprint would come from John von Neumann.","src/content/blog/shannon-information-theory.md","fb87180f0aabcbe5",{html:1447,metadata:1448},"<h2 id=\"introduction\">Introduction</h2>\n<p>So far, our journey has been in the abstract realm of pure logic. Gödel, Church, and Turing explored the absolute limits of what could be computed. But their work didn’t address a critical, real-world problem: once you have a computation, how do you <strong>send its result</strong> from one place to another reliably?</p>\n<p>This was the world of engineers, of crackly telephone lines, static-filled radio waves, and garbled telegraph signals. The prevailing wisdom was that noise was an unavoidable enemy that would always corrupt a message. The more you transmitted, the more errors you’d get.</p>\n<p>Then, in 1948, a brilliant and playful engineer at Bell Labs named <strong>Claude Shannon</strong> published a paper that changed everything. This was a man who not only laid the foundations for the digital age but also spent his spare time building juggling machines and estimating the game-tree complexity of chess (a figure now known as the <strong>Shannon number</strong>, roughly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>10</mn><mn>120</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^{120}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">120</span></span></span></span></span></span></span></span></span></span></span></span>). His landmark paper was called “A Mathematical Theory of Communication,” and it single-handedly created the field of <strong>information theory</strong>.</p>\n<h2 id=\"the-big-idea-separating-information-from-meaning\">The Big Idea: Separating Information from Meaning</h2>\n<p>Shannon’s first stroke of genius was to completely ignore the <em>meaning</em> of a message. To him, it didn’t matter if you were sending a Shakespearean sonnet, a stock market quote, or complete gibberish. He wanted to quantify the information itself.</p>\n<p>He proposed a radical new unit of measure: the <strong>bit</strong>.</p>\n<p>A <strong>bit</strong> (a portmanteau of “binary digit”) is the most fundamental unit of information. It represents the answer to a single yes/no question, reducing uncertainty by exactly half.</p>\n<ul>\n<li>Is the light on or off?</li>\n<li>Is the coin heads or tails?</li>\n<li>Is the voltage high or low?</li>\n</ul>\n<p>By encoding any message into a long string of these binary digits (0s and 1s), Shannon could treat all information the same, regardless of its content.</p>\n<h2 id=\"entropy-the-measure-of-surprise\">Entropy: The Measure of Surprise</h2>\n<p>Shannon then asked, “How much information is in a message?” His answer was profound: the amount of information is the measure of its <strong>surprise</strong>.</p>\n<p>If I tell you “the sun will rise tomorrow,” you’re not surprised. It’s a predictable event. The information content is very low. But if I tell you “a blizzard will hit Miami tomorrow,” you are very surprised. That message contains a lot of information.</p>\n<p>Shannon gave this concept a precise mathematical form and called it <strong>Entropy</strong>, denoted by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span>. For a source of information <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> that can produce several symbols, the entropy is the average amount of information (in bits) per symbol.</p>\n<p>The formula for entropy is:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mi>i</mi></munder><mi>p</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>p</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H(X) = -\\sum_{i} p(x_i) \\log_2 p(x_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3277em;vertical-align:-1.2777em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>\n<p>Let’s break that down:</p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is the source of information (e.g., a coin flip).</p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is one of the possible outcomes (e.g., “heads”).</p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p(x_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is the probability of that outcome happening.</p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>p</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\log_2 p(x_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is the magic part. It quantifies the “surprise” of that outcome in bits. The logarithm base 2 is used because we are measuring in bits.</p>\n</li>\n<li>\n<p>The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span></span></span></span> (sigma) means we sum this value up for all possible outcomes.</p>\n</li>\n</ul>\n<h4 id=\"example-a-fair-coin-vs-a-rigged-coin\">Example: A Fair Coin vs. A Rigged Coin</h4>\n<ul>\n<li>\n<p><strong>Fair Coin</strong>: Heads (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>=</mo><mn>0.5</mn></mrow><annotation encoding=\"application/x-tex\">p = 0.5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0.5</span></span></span></span>) and Tails (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>=</mo><mn>0.5</mn></mrow><annotation encoding=\"application/x-tex\">p = 0.5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0.5</span></span></span></span>). The entropy is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo>=</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mn>0.5</mn><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mn>0.5</mn><mo>+</mo><mn>0.5</mn><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mn>0.5</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">H = -(0.5 \\log_2 0.5 + 0.5 \\log_2 0.5) = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">(</span><span class=\"mord\">0.5</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0.5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0.5</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0.5</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> bit. Each flip gives you exactly one bit of information because the outcome is maximally uncertain.</p>\n</li>\n<li>\n<p><strong>Rigged Coin</strong>: Heads (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>=</mo><mn>0.9</mn></mrow><annotation encoding=\"application/x-tex\">p = 0.9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0.9</span></span></span></span>) and Tails (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>=</mo><mn>0.1</mn></mrow><annotation encoding=\"application/x-tex\">p = 0.1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0.1</span></span></span></span>). The entropy is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo>=</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mn>0.9</mn><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mn>0.9</mn><mo>+</mo><mn>0.1</mn><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mn>0.1</mn><mo stretchy=\"false\">)</mo><mo>≈</mo><mn>0.47</mn></mrow><annotation encoding=\"application/x-tex\">H = -(0.9 \\log_2 0.9 + 0.1 \\log_2 0.1) \\approx 0.47</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">(</span><span class=\"mord\">0.9</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0.9</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0.1</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0.1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0.47</span></span></span></span> bits. The outcome is more predictable, so on average, each flip gives you less than half a bit of new information.</p>\n</li>\n</ul>\n<h2 id=\"the-channel-capacity-theorem\">The Channel Capacity Theorem</h2>\n<p>This was all leading to Shannon’s masterpiece. He modeled a communication system: a <strong>source</strong> sends a message through a <strong>noisy channel</strong> to a <strong>receiver</strong>.</p>\n<p>He defined a property of the channel itself, called its <strong>Channel Capacity (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>)</strong>. This is the maximum rate, in bits per second, at which information can be sent through the channel with an arbitrarily small probability of error.</p>\n<p>He then gave the world the stunning <strong>Shannon-Hartley Theorem</strong>, which calculates this capacity:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>C</mi><mo>=</mo><mi>B</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mfrac><mi>S</mi><mi>N</mi></mfrac><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C = B \\log_2(1 + \\frac{S}{N})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0463em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3603em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span></span>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>: The channel capacity in bits per second.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>: The <strong>bandwidth</strong> of the channel (e.g., the range of frequencies a radio can use), measured in Hertz.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>: The average power of the signal you are sending.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>: The average power of the noise in the channel.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">S/N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>: The famous <strong>Signal-to-Noise Ratio (SNR)</strong>.</li>\n</ul>\n<p>This elegant formula connected the physical properties of a wire or an antenna (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>) to the abstract, logical concept of information (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>).</p>\n<p>Shannon’s theorem made a shocking promise: It doesn’t matter how noisy your channel is. As long as your transmission rate is <strong>below</strong> the channel capacity <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, you can invent an encoding scheme that allows you to transmit information with <strong>zero errors</strong>.</p>\n<p>This was revolutionary. Noise was no longer an insurmountable barrier; it was just a variable in an equation. It defined a speed limit, not a hard wall. This insight is the theoretical foundation for every piece of modern digital communication, from Wi-Fi and 4G to data compression (like .zip files) and the error-correcting codes that allow spacecraft to send clear images from billions of miles away.</p>\n<p>With the theory of information laid out, the stage was set. The world now understood the limits of computation and the rules of communication. All that was needed was a blueprint for a machine that could actually do it all. That blueprint would come from John von Neumann.</p>",{headings:1449,localImagePaths:1463,remoteImagePaths:1464,frontmatter:1465,imagePaths:1467},[1450,1451,1454,1457,1460],{depth:34,slug:117,text:118},{depth:34,slug:1452,text:1453},"the-big-idea-separating-information-from-meaning","The Big Idea: Separating Information from Meaning",{depth:34,slug:1455,text:1456},"entropy-the-measure-of-surprise","Entropy: The Measure of Surprise",{depth:38,slug:1458,text:1459},"example-a-fair-coin-vs-a-rigged-coin","Example: A Fair Coin vs. A Rigged Coin",{depth:34,slug:1461,text:1462},"the-channel-capacity-theorem","The Channel Capacity Theorem",[],[],{title:1438,date:1466,description:1441,author:16,series:108,thumbnail:106,seriesOrder:396,minutesRead:798},["Date","2025-08-27T00:00:00.000Z"],[],"shannon-information-theory.md","system-calls",{id:1469,data:1471,body:1478,filePath:1479,digest:1480,rendered:1481,legacyId:1569},{title:1472,author:1473,draft:18,date:1474,description:1475,featured:18,thumbnail:1476,series:1477,seriesOrder:1019},"System Calls: The Bridge Between User Space and Kernel Space",{id:16,collection:17},["Date","2025-05-21T00:00:00.000Z"],"A deep dive into system calls, the essential interface between user applications and the operating system kernel.","/thumbnails/system-calls.png",{id:147,collection:24},"## Introduction\r\n\r\n> This post lays a foundation for a lot of future content. Understanding system calls is crucial for grasping how operating systems work. Read this to get a solid grasp of how your applications interact with the kernel. I've tried to keep it simple and straightforward, so you can focus on the core concepts without getting lost in technical jargon, while keeping it interesting and engaging.\r\n\r\nIn our previous posts, we've explored how your operating system manages multiple processes and decides which one gets CPU time next. But there's something fundamental we haven't addressed yet: How do these processes actually request services from the operating system? How does your web browser ask for a network connection, or your word processor save a file to disk?\r\n\r\nThe answer lies in system calls — the essential interface between your applications and the powerful, privileged world of the operating system kernel.\r\n\r\n## Table of Contents\r\n\r\n- [The Boundary Between Two Worlds](#the-boundary-between-two-worlds)\r\n- [Why This Border Exists: The Protection Problem](#why-this-border-exists-the-protection-problem)\r\n- [System Calls: What They Actually Do](#system-calls-what-they-actually-do)\r\n  - [Process Control](#1-process-control)\r\n  - [File Management](#2-file-management)\r\n  - [Device Management](#3-device-management)\r\n  - [Information Maintenance](#4-information-maintenance)\r\n  - [Communication](#5-communication)\r\n  - [Protection](#6-protection)\r\n- [The Journey of a System Call](#the-journey-of-a-system-call)\r\n- [System Calls in the Wild](#system-calls-in-the-wild)\r\n  - [Web Browsing](#web-browsing)\r\n  - [Taking a Screenshot](#taking-a-screenshot)\r\n  - [Playing Music](#playing-music)\r\n- [See It For Yourself: System Call Tracing](#see-it-for-yourself-system-call-tracing)\r\n- [System Call Overhead: The Hidden Cost](#system-call-overhead-the-hidden-cost)\r\n- [Modern Trends in System Call Design](#modern-trends-in-system-call-design)\r\n  - [System Call Batching](#1-system-call-batching)\r\n  - [Asynchronous System Calls](#2-asynchronous-system-calls)\r\n  - [Extended APIs](#3-extended-apis)\r\n  - [Containerization Extensions](#4-containerization-extensions)\r\n- [Coming Up Next](#coming-up-next)\r\n\r\n## The Boundary Between Two Worlds\r\n\r\n> There is a very cool video on this whole concept by [Core Dumped](https://www.youtube.com/watch?v=H4SDPLiUnv4). I highly recommend watching it for a more visual explanation of the concepts discussed in this post. It also covers some advanced topics that we will discuss in future posts.\r\n\r\nModern operating systems maintain a strict separation between two operational modes:\r\n\r\n- **User Mode**: Where your everyday applications run, with limited privileges and restricted access to hardware\r\n- **Kernel Mode**: Where the operating system core operates, with full access to hardware, memory, and system settings\r\n\r\nThis separation isn't just a theoretical construct — it's enforced by your CPU hardware with a special mode bit that determines whether code can execute privileged instructions.\r\n\r\nSystem calls are the formal, controlled crossing points between these two worlds. They're like border checkpoints where applications can request specific, pre-approved services from the kernel without getting full access to its privileged domain.\r\n\r\n## Why This Border Exists: The Protection Problem\r\n\r\nYou might wonder: why not just let applications directly access whatever they need? The answer becomes obvious when you consider what would happen:\r\n\r\n- Your music player could accidentally overwrite your tax documents in memory\r\n- A buggy game could crash your entire system by writing bad values to hardware registers\r\n- A malicious application could read sensitive data from other applications\r\n- Any program could monopolize your CPU, network, or disk\r\n\r\nThe user/kernel boundary is one of the most important security and stability mechanisms in your computer. Without it, one misbehaving program could bring down your entire system or compromise all your data.\r\n\r\n## System Calls: What They Actually Do\r\n\r\n> These system calls are for the Unix/Linux operating system. The Windows operating system has its own set of system calls, which are different from the Unix/Linux ones. However, the concepts are similar.\r\n\r\nSystem calls provide a way for processes to request specific kernel services without giving them unrestricted access. Common categories include:\r\n\r\n#### 1. Process Control\r\n\r\n- Create/terminate processes (`fork`, `exit`)\r\n- Load/execute programs (`exec`)\r\n- Get/set process attributes (`getpid`, `nice`)\r\n- Wait for events (`wait`, `sleep`)\r\n- Allocate/free memory (`malloc`, `free`)\r\n\r\n#### 2. File Management\r\n\r\n- Create/delete files (`open`, `close`)\r\n- Open/close files (`open`, `close`)\r\n- Read/write files (`read`, `write`)\r\n- Change file attributes (`chmod`, `chown`)\r\n\r\n#### 3. Device Management\r\n\r\n- Request/release devices (`ioctl`)\r\n- Read/write to devices (`read`, `write`)\r\n- Get/set device attributes (`ioctl`)\r\n\r\n#### 4. Information Maintenance\r\n\r\n- Get/set time (`time`, `settime`)\r\n- Get/set system data (`gethostname`, `sethostname`)\r\n- Get/set process, file, or device attributes\r\n\r\n#### 5. Communication\r\n\r\n- Create/delete communication connections (`socket`, `close`)\r\n- Send/receive messages (`send`, `recv`)\r\n- Transfer status information (`stat`, `fcntl`)\r\n\r\n#### 6. Protection\r\n\r\n- Get/set file permissions (`chmod`, `umask`)\r\n- Get/set user IDs (`getuid`, `setuid`)\r\n\r\n## The Journey of a System Call\r\n\r\nLet's trace what happens during a typical system call, using the example of a program saving a file:\r\n\r\n1. **Your Application Makes the Call**: Your word processor calls `write(file_descriptor, buffer, bytes_to_write)`\r\n\r\n2. **Library Wrapper Prepares Parameters**: The C library function packages your parameters and places them in the right registers or on the stack\r\n\r\n3. **Trap Instruction Executed**: A special CPU instruction (like `syscall` on x86-64, `svc` on ARM) triggers the mode switch from user to kernel mode\r\n\r\n4. **Kernel Mode Transition**: The CPU switches the mode bit and jumps to a predefined handler address in the kernel\r\n\r\n5. **System Call Handler Activates**: The kernel's system call dispatcher checks the system call number and verifies the parameters\r\n\r\n6. **Kernel Service Execution**: The appropriate kernel function is called to perform the actual work (writing data to disk)\r\n\r\n7. **Return Preparation**: Results and any error codes are prepared for return to user mode\r\n\r\n8. **Mode Switch Back**: The kernel executes a special instruction to return to user mode\r\n\r\n9. **Application Continues**: Your word processor receives the result (number of bytes written or an error code)\r\n\r\nAll of this happens in microseconds, but it's a critical boundary crossing with significant security implications.\r\n\r\n## System Calls in the Wild\r\n\r\n> We will have a separate post on how to make system calls in C, but for now, let's focus on the concept of system calls and how they work. In the separate post, we will cover the `fork()`, `exec()`, and `wait()` system calls in detail, along with examples of how to use them in C. We will also cover the `read()` and `write()` system calls, which are used for file I/O.\r\n\r\nLet's observe some common system calls you're using right now without realizing it:\r\n\r\n#### Web Browsing\r\n\r\nWhen you open a web page, your browser makes system calls to:\r\n\r\n- `socket()` to create a network connection\r\n- `connect()` to connect to the web server\r\n- `read()` and `write()` to exchange data\r\n- `close()` to end the connection\r\n\r\n#### Taking a Screenshot\r\n\r\nWhen you capture your screen, the process involves:\r\n\r\n- `ioctl()` to communicate with the display driver\r\n- `read()` to get the pixel data\r\n- `open()` and `write()` to save the image\r\n\r\n#### Playing Music\r\n\r\nYour music player uses:\r\n\r\n- `open()` to access the audio file\r\n- `read()` to get audio data\r\n- `ioctl()` to configure audio hardware\r\n- `write()` to send audio data to the sound system\r\n\r\n## See It For Yourself: System Call Tracing\r\n\r\nWant to witness these system calls in action? Most operating systems provide tools to trace them:\r\n\r\n#### On Linux: `strace`\r\n\r\nOpen a terminal and type:\r\n\r\n```bash\r\nstrace -c firefox\r\n```\r\n\r\nThis will launch Firefox and count all the system calls it makes.\r\n\r\n#### On macOS: `dtruss` (requires disabling System Integrity Protection)\r\n\r\n```bash\r\nsudo dtruss -c safari\r\n```\r\n\r\n#### On Windows: Process Monitor from Sysinternals\r\n\r\nThis graphical tool can filter and display system calls made by any process.\r\n\r\n## System Call Overhead: The Hidden Cost\r\n\r\nEvery system call involves a context switch between user and kernel mode, which isn't free:\r\n\r\n1. **Mode switching**: CPU must flush pipelines and caches\r\n2. **Parameter validation**: Kernel must verify all parameters for security\r\n3. **Memory copying**: Data often must be copied between user and kernel space\r\n4. **Scheduling impacts**: System calls can trigger scheduling decisions\r\n\r\nThis is why high-performance applications try to minimize system calls by:\r\n\r\n- Batching operations when possible\r\n- Using memory-mapped files instead of read/write calls\r\n- Employing larger buffers to reduce call frequency\r\n\r\n## Modern Trends in System Call Design\r\n\r\nSystem call interfaces continue to evolve:\r\n\r\n#### 1. System Call Batching\r\n\r\nModern operating systems allow batching multiple system calls to reduce mode-switching overhead (like Linux's `io_submit` and Windows' I/O completion ports).\r\n\r\n#### 2. Asynchronous System Calls\r\n\r\nRather than blocking until an operation completes, asynchronous calls let applications continue running while the kernel processes the request.\r\n\r\n#### 3. Extended APIs\r\n\r\nMore sophisticated interfaces like Linux's epoll and Windows' IOCP provide efficient ways to monitor multiple I/O sources.\r\n\r\n#### 4. Containerization Extensions\r\n\r\nSystem calls related to containerization and isolation (like Linux's namespaces) enable new patterns of application deployment.\r\n\r\n## Security Implications: System Call Filtering\r\n\r\nSystem calls are increasingly recognized as a security boundary. Modern approaches include:\r\n\r\n- **Seccomp-BPF on Linux**: Allows filtering which system calls a process can make\r\n- **Pledge and Unveil on OpenBSD**: Lets processes voluntarily restrict their system call capabilities\r\n- **System Call Disable Policy on macOS**: Limits the system calls available to applications\r\n\r\nThis \"least privilege\" approach means processes can only use the system calls they genuinely need, reducing the potential damage from security breaches.\r\n\r\n## Coming Up Next\r\n\r\nNow that we understand how applications communicate with the kernel, our next post will explore how the outside world gets the kernel's attention through **Interrupts**. We'll see why your keyboard input gets priority over background tasks, and how hardware events trigger immediate responses in the operating system.","src/content/blog/system-calls.md","0aed1b859c8b903b",{html:1482,metadata:1483},"<h2 id=\"introduction\">Introduction</h2>\n<blockquote>\n<p>This post lays a foundation for a lot of future content. Understanding system calls is crucial for grasping how operating systems work. Read this to get a solid grasp of how your applications interact with the kernel. I’ve tried to keep it simple and straightforward, so you can focus on the core concepts without getting lost in technical jargon, while keeping it interesting and engaging.</p>\n</blockquote>\n<p>In our previous posts, we’ve explored how your operating system manages multiple processes and decides which one gets CPU time next. But there’s something fundamental we haven’t addressed yet: How do these processes actually request services from the operating system? How does your web browser ask for a network connection, or your word processor save a file to disk?</p>\n<p>The answer lies in system calls — the essential interface between your applications and the powerful, privileged world of the operating system kernel.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#the-boundary-between-two-worlds\">The Boundary Between Two Worlds</a></li>\n<li><a href=\"#why-this-border-exists-the-protection-problem\">Why This Border Exists: The Protection Problem</a></li>\n<li><a href=\"#system-calls-what-they-actually-do\">System Calls: What They Actually Do</a>\n<ul>\n<li><a href=\"#1-process-control\">Process Control</a></li>\n<li><a href=\"#2-file-management\">File Management</a></li>\n<li><a href=\"#3-device-management\">Device Management</a></li>\n<li><a href=\"#4-information-maintenance\">Information Maintenance</a></li>\n<li><a href=\"#5-communication\">Communication</a></li>\n<li><a href=\"#6-protection\">Protection</a></li>\n</ul>\n</li>\n<li><a href=\"#the-journey-of-a-system-call\">The Journey of a System Call</a></li>\n<li><a href=\"#system-calls-in-the-wild\">System Calls in the Wild</a>\n<ul>\n<li><a href=\"#web-browsing\">Web Browsing</a></li>\n<li><a href=\"#taking-a-screenshot\">Taking a Screenshot</a></li>\n<li><a href=\"#playing-music\">Playing Music</a></li>\n</ul>\n</li>\n<li><a href=\"#see-it-for-yourself-system-call-tracing\">See It For Yourself: System Call Tracing</a></li>\n<li><a href=\"#system-call-overhead-the-hidden-cost\">System Call Overhead: The Hidden Cost</a></li>\n<li><a href=\"#modern-trends-in-system-call-design\">Modern Trends in System Call Design</a>\n<ul>\n<li><a href=\"#1-system-call-batching\">System Call Batching</a></li>\n<li><a href=\"#2-asynchronous-system-calls\">Asynchronous System Calls</a></li>\n<li><a href=\"#3-extended-apis\">Extended APIs</a></li>\n<li><a href=\"#4-containerization-extensions\">Containerization Extensions</a></li>\n</ul>\n</li>\n<li><a href=\"#coming-up-next\">Coming Up Next</a></li>\n</ul>\n<h2 id=\"the-boundary-between-two-worlds\">The Boundary Between Two Worlds</h2>\n<blockquote>\n<p>There is a very cool video on this whole concept by <a href=\"https://www.youtube.com/watch?v=H4SDPLiUnv4\">Core Dumped</a>. I highly recommend watching it for a more visual explanation of the concepts discussed in this post. It also covers some advanced topics that we will discuss in future posts.</p>\n</blockquote>\n<p>Modern operating systems maintain a strict separation between two operational modes:</p>\n<ul>\n<li><strong>User Mode</strong>: Where your everyday applications run, with limited privileges and restricted access to hardware</li>\n<li><strong>Kernel Mode</strong>: Where the operating system core operates, with full access to hardware, memory, and system settings</li>\n</ul>\n<p>This separation isn’t just a theoretical construct — it’s enforced by your CPU hardware with a special mode bit that determines whether code can execute privileged instructions.</p>\n<p>System calls are the formal, controlled crossing points between these two worlds. They’re like border checkpoints where applications can request specific, pre-approved services from the kernel without getting full access to its privileged domain.</p>\n<h2 id=\"why-this-border-exists-the-protection-problem\">Why This Border Exists: The Protection Problem</h2>\n<p>You might wonder: why not just let applications directly access whatever they need? The answer becomes obvious when you consider what would happen:</p>\n<ul>\n<li>Your music player could accidentally overwrite your tax documents in memory</li>\n<li>A buggy game could crash your entire system by writing bad values to hardware registers</li>\n<li>A malicious application could read sensitive data from other applications</li>\n<li>Any program could monopolize your CPU, network, or disk</li>\n</ul>\n<p>The user/kernel boundary is one of the most important security and stability mechanisms in your computer. Without it, one misbehaving program could bring down your entire system or compromise all your data.</p>\n<h2 id=\"system-calls-what-they-actually-do\">System Calls: What They Actually Do</h2>\n<blockquote>\n<p>These system calls are for the Unix/Linux operating system. The Windows operating system has its own set of system calls, which are different from the Unix/Linux ones. However, the concepts are similar.</p>\n</blockquote>\n<p>System calls provide a way for processes to request specific kernel services without giving them unrestricted access. Common categories include:</p>\n<h4 id=\"1-process-control\">1. Process Control</h4>\n<ul>\n<li>Create/terminate processes (<code>fork</code>, <code>exit</code>)</li>\n<li>Load/execute programs (<code>exec</code>)</li>\n<li>Get/set process attributes (<code>getpid</code>, <code>nice</code>)</li>\n<li>Wait for events (<code>wait</code>, <code>sleep</code>)</li>\n<li>Allocate/free memory (<code>malloc</code>, <code>free</code>)</li>\n</ul>\n<h4 id=\"2-file-management\">2. File Management</h4>\n<ul>\n<li>Create/delete files (<code>open</code>, <code>close</code>)</li>\n<li>Open/close files (<code>open</code>, <code>close</code>)</li>\n<li>Read/write files (<code>read</code>, <code>write</code>)</li>\n<li>Change file attributes (<code>chmod</code>, <code>chown</code>)</li>\n</ul>\n<h4 id=\"3-device-management\">3. Device Management</h4>\n<ul>\n<li>Request/release devices (<code>ioctl</code>)</li>\n<li>Read/write to devices (<code>read</code>, <code>write</code>)</li>\n<li>Get/set device attributes (<code>ioctl</code>)</li>\n</ul>\n<h4 id=\"4-information-maintenance\">4. Information Maintenance</h4>\n<ul>\n<li>Get/set time (<code>time</code>, <code>settime</code>)</li>\n<li>Get/set system data (<code>gethostname</code>, <code>sethostname</code>)</li>\n<li>Get/set process, file, or device attributes</li>\n</ul>\n<h4 id=\"5-communication\">5. Communication</h4>\n<ul>\n<li>Create/delete communication connections (<code>socket</code>, <code>close</code>)</li>\n<li>Send/receive messages (<code>send</code>, <code>recv</code>)</li>\n<li>Transfer status information (<code>stat</code>, <code>fcntl</code>)</li>\n</ul>\n<h4 id=\"6-protection\">6. Protection</h4>\n<ul>\n<li>Get/set file permissions (<code>chmod</code>, <code>umask</code>)</li>\n<li>Get/set user IDs (<code>getuid</code>, <code>setuid</code>)</li>\n</ul>\n<h2 id=\"the-journey-of-a-system-call\">The Journey of a System Call</h2>\n<p>Let’s trace what happens during a typical system call, using the example of a program saving a file:</p>\n<ol>\n<li>\n<p><strong>Your Application Makes the Call</strong>: Your word processor calls <code>write(file_descriptor, buffer, bytes_to_write)</code></p>\n</li>\n<li>\n<p><strong>Library Wrapper Prepares Parameters</strong>: The C library function packages your parameters and places them in the right registers or on the stack</p>\n</li>\n<li>\n<p><strong>Trap Instruction Executed</strong>: A special CPU instruction (like <code>syscall</code> on x86-64, <code>svc</code> on ARM) triggers the mode switch from user to kernel mode</p>\n</li>\n<li>\n<p><strong>Kernel Mode Transition</strong>: The CPU switches the mode bit and jumps to a predefined handler address in the kernel</p>\n</li>\n<li>\n<p><strong>System Call Handler Activates</strong>: The kernel’s system call dispatcher checks the system call number and verifies the parameters</p>\n</li>\n<li>\n<p><strong>Kernel Service Execution</strong>: The appropriate kernel function is called to perform the actual work (writing data to disk)</p>\n</li>\n<li>\n<p><strong>Return Preparation</strong>: Results and any error codes are prepared for return to user mode</p>\n</li>\n<li>\n<p><strong>Mode Switch Back</strong>: The kernel executes a special instruction to return to user mode</p>\n</li>\n<li>\n<p><strong>Application Continues</strong>: Your word processor receives the result (number of bytes written or an error code)</p>\n</li>\n</ol>\n<p>All of this happens in microseconds, but it’s a critical boundary crossing with significant security implications.</p>\n<h2 id=\"system-calls-in-the-wild\">System Calls in the Wild</h2>\n<blockquote>\n<p>We will have a separate post on how to make system calls in C, but for now, let’s focus on the concept of system calls and how they work. In the separate post, we will cover the <code>fork()</code>, <code>exec()</code>, and <code>wait()</code> system calls in detail, along with examples of how to use them in C. We will also cover the <code>read()</code> and <code>write()</code> system calls, which are used for file I/O.</p>\n</blockquote>\n<p>Let’s observe some common system calls you’re using right now without realizing it:</p>\n<h4 id=\"web-browsing\">Web Browsing</h4>\n<p>When you open a web page, your browser makes system calls to:</p>\n<ul>\n<li><code>socket()</code> to create a network connection</li>\n<li><code>connect()</code> to connect to the web server</li>\n<li><code>read()</code> and <code>write()</code> to exchange data</li>\n<li><code>close()</code> to end the connection</li>\n</ul>\n<h4 id=\"taking-a-screenshot\">Taking a Screenshot</h4>\n<p>When you capture your screen, the process involves:</p>\n<ul>\n<li><code>ioctl()</code> to communicate with the display driver</li>\n<li><code>read()</code> to get the pixel data</li>\n<li><code>open()</code> and <code>write()</code> to save the image</li>\n</ul>\n<h4 id=\"playing-music\">Playing Music</h4>\n<p>Your music player uses:</p>\n<ul>\n<li><code>open()</code> to access the audio file</li>\n<li><code>read()</code> to get audio data</li>\n<li><code>ioctl()</code> to configure audio hardware</li>\n<li><code>write()</code> to send audio data to the sound system</li>\n</ul>\n<h2 id=\"see-it-for-yourself-system-call-tracing\">See It For Yourself: System Call Tracing</h2>\n<p>Want to witness these system calls in action? Most operating systems provide tools to trace them:</p>\n<h4 id=\"on-linux-strace\">On Linux: <code>strace</code></h4>\n<p>Open a terminal and type:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">strace</span><span style=\"color:#E0AF68\"> -c</span><span style=\"color:#9ECE6A\"> firefox</span></span></code></pre>\n<p>This will launch Firefox and count all the system calls it makes.</p>\n<h4 id=\"on-macos-dtruss-requires-disabling-system-integrity-protection\">On macOS: <code>dtruss</code> (requires disabling System Integrity Protection)</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">sudo</span><span style=\"color:#9ECE6A\"> dtruss</span><span style=\"color:#E0AF68\"> -c</span><span style=\"color:#9ECE6A\"> safari</span></span></code></pre>\n<h4 id=\"on-windows-process-monitor-from-sysinternals\">On Windows: Process Monitor from Sysinternals</h4>\n<p>This graphical tool can filter and display system calls made by any process.</p>\n<h2 id=\"system-call-overhead-the-hidden-cost\">System Call Overhead: The Hidden Cost</h2>\n<p>Every system call involves a context switch between user and kernel mode, which isn’t free:</p>\n<ol>\n<li><strong>Mode switching</strong>: CPU must flush pipelines and caches</li>\n<li><strong>Parameter validation</strong>: Kernel must verify all parameters for security</li>\n<li><strong>Memory copying</strong>: Data often must be copied between user and kernel space</li>\n<li><strong>Scheduling impacts</strong>: System calls can trigger scheduling decisions</li>\n</ol>\n<p>This is why high-performance applications try to minimize system calls by:</p>\n<ul>\n<li>Batching operations when possible</li>\n<li>Using memory-mapped files instead of read/write calls</li>\n<li>Employing larger buffers to reduce call frequency</li>\n</ul>\n<h2 id=\"modern-trends-in-system-call-design\">Modern Trends in System Call Design</h2>\n<p>System call interfaces continue to evolve:</p>\n<h4 id=\"1-system-call-batching\">1. System Call Batching</h4>\n<p>Modern operating systems allow batching multiple system calls to reduce mode-switching overhead (like Linux’s <code>io_submit</code> and Windows’ I/O completion ports).</p>\n<h4 id=\"2-asynchronous-system-calls\">2. Asynchronous System Calls</h4>\n<p>Rather than blocking until an operation completes, asynchronous calls let applications continue running while the kernel processes the request.</p>\n<h4 id=\"3-extended-apis\">3. Extended APIs</h4>\n<p>More sophisticated interfaces like Linux’s epoll and Windows’ IOCP provide efficient ways to monitor multiple I/O sources.</p>\n<h4 id=\"4-containerization-extensions\">4. Containerization Extensions</h4>\n<p>System calls related to containerization and isolation (like Linux’s namespaces) enable new patterns of application deployment.</p>\n<h2 id=\"security-implications-system-call-filtering\">Security Implications: System Call Filtering</h2>\n<p>System calls are increasingly recognized as a security boundary. Modern approaches include:</p>\n<ul>\n<li><strong>Seccomp-BPF on Linux</strong>: Allows filtering which system calls a process can make</li>\n<li><strong>Pledge and Unveil on OpenBSD</strong>: Lets processes voluntarily restrict their system call capabilities</li>\n<li><strong>System Call Disable Policy on macOS</strong>: Limits the system calls available to applications</li>\n</ul>\n<p>This “least privilege” approach means processes can only use the system calls they genuinely need, reducing the potential damage from security breaches.</p>\n<h2 id=\"coming-up-next\">Coming Up Next</h2>\n<p>Now that we understand how applications communicate with the kernel, our next post will explore how the outside world gets the kernel’s attention through <strong>Interrupts</strong>. We’ll see why your keyboard input gets priority over background tasks, and how hardware events trigger immediate responses in the operating system.</p>",{headings:1484,localImagePaths:1563,remoteImagePaths:1564,frontmatter:1565,imagePaths:1568},[1485,1486,1487,1490,1493,1496,1499,1502,1505,1508,1511,1514,1517,1520,1523,1526,1529,1532,1535,1538,1541,1544,1547,1550,1553,1556,1559,1562],{depth:34,slug:117,text:118},{depth:34,slug:45,text:46},{depth:34,slug:1488,text:1489},"the-boundary-between-two-worlds","The Boundary Between Two Worlds",{depth:34,slug:1491,text:1492},"why-this-border-exists-the-protection-problem","Why This Border Exists: The Protection Problem",{depth:34,slug:1494,text:1495},"system-calls-what-they-actually-do","System Calls: What They Actually Do",{depth:38,slug:1497,text:1498},"1-process-control","1. Process Control",{depth:38,slug:1500,text:1501},"2-file-management","2. File Management",{depth:38,slug:1503,text:1504},"3-device-management","3. Device Management",{depth:38,slug:1506,text:1507},"4-information-maintenance","4. Information Maintenance",{depth:38,slug:1509,text:1510},"5-communication","5. Communication",{depth:38,slug:1512,text:1513},"6-protection","6. Protection",{depth:34,slug:1515,text:1516},"the-journey-of-a-system-call","The Journey of a System Call",{depth:34,slug:1518,text:1519},"system-calls-in-the-wild","System Calls in the Wild",{depth:38,slug:1521,text:1522},"web-browsing","Web Browsing",{depth:38,slug:1524,text:1525},"taking-a-screenshot","Taking a Screenshot",{depth:38,slug:1527,text:1528},"playing-music","Playing Music",{depth:34,slug:1530,text:1531},"see-it-for-yourself-system-call-tracing","See It For Yourself: System Call Tracing",{depth:38,slug:1533,text:1534},"on-linux-strace","On Linux: strace",{depth:38,slug:1536,text:1537},"on-macos-dtruss-requires-disabling-system-integrity-protection","On macOS: dtruss (requires disabling System Integrity Protection)",{depth:38,slug:1539,text:1540},"on-windows-process-monitor-from-sysinternals","On Windows: Process Monitor from Sysinternals",{depth:34,slug:1542,text:1543},"system-call-overhead-the-hidden-cost","System Call Overhead: The Hidden Cost",{depth:34,slug:1545,text:1546},"modern-trends-in-system-call-design","Modern Trends in System Call Design",{depth:38,slug:1548,text:1549},"1-system-call-batching","1. System Call Batching",{depth:38,slug:1551,text:1552},"2-asynchronous-system-calls","2. Asynchronous System Calls",{depth:38,slug:1554,text:1555},"3-extended-apis","3. Extended APIs",{depth:38,slug:1557,text:1558},"4-containerization-extensions","4. Containerization Extensions",{depth:34,slug:1560,text:1561},"security-implications-system-call-filtering","Security Implications: System Call Filtering",{depth:34,slug:183,text:184},[],[],{title:1472,date:1566,description:1475,author:16,thumbnail:1476,series:147,seriesOrder:1019,minutesRead:1567},["Date","2025-05-21T00:00:00.000Z"],"7 min read",[],"system-calls.md","toc-the-hidden-language",{id:1570,data:1572,body:1579,filePath:1580,digest:1581,rendered:1582,legacyId:1625},{title:1573,author:1574,draft:18,date:1575,description:1576,featured:18,thumbnail:1577,series:1578,seriesOrder:201},"Theory of Computation – The Hidden Language of Machines",{id:16,collection:17},["Date","2025-03-22T00:00:00.000Z"],"An exploration of the Theory of Computation, the mathematical framework that underlies all computing systems.","/thumbnails/toc-intro.png",{id:23,collection:24},"## Introduction: Welcome to the Hidden Language of Machines\r\n\r\nImagine you’ve built a machine that claims to answer any question you ask. How do you know if it’s telling the truth? Or if it will ever stop running? Welcome to the world of Theory of Computation (TOC)—a field that doesn’t just study computers, but the very nature of computation itself.\r\n\r\nLet me put this in perspective: Every time you use Google Search, AI, programming languages, or even a chatbot, you are interacting with systems that rely on TOC principles. Without TOC, we wouldn’t have search engines that match patterns, compilers that translate high-level code into machine instructions, or even cybersecurity systems that prove whether an encryption method is truly secure.\r\n\r\nBut TOC goes deeper than just powering your everyday tech. It addresses fundamental questions about information and problem-solving that touch every aspect of our digital lives.\r\n\r\nWhen a doctor uses AI to detect cancer in medical images, TOC principles determine how reliably that system can identify patterns. When cybersecurity experts protect your personal data, they rely on computational complexity to create encryption that would take billions of years to crack. And when developers create programming languages that let humans communicate with machines, they're building on formal language theory established decades ago.\r\n\r\nThink about this: before you can determine if an artificial intelligence is truly \"intelligent,\" you need to understand what computation itself can and cannot do. TOC gives us the framework to ask profound questions like:\r\n\r\n- If a computer claims it can solve any problem you give it, how would you test if it's telling the truth?\r\n- What makes some problems easy for computers to solve and others practically impossible?\r\n- Is human creativity fundamentally different from algorithmic processes, or just a more complex form of computation?\r\n\r\nEven if you never write a line of code, TOC shapes your digital experience in countless ways. That predictive text finishing your sentences? Regular languages at work. The security protecting your online banking? Computational complexity theory keeping your money safe. The streaming recommendations that somehow know what you want to watch next? Algorithms navigating computational efficiency challenges.\r\n\r\nI know it might sound abstract, but TOC is woven into the fabric of everything digital in your life. And trust me—by the end of this journey, you won't just understand TOC; you'll see it everywhere, from the smallest microchip to the most powerful AI systems. You'll gain a deeper appreciation for what happens behind the screens you interact with every day, and perhaps most importantly, you'll understand the fascinating limits of what machines can and cannot do.\r\n\r\n## Table of Contents\r\n\r\n- [The Birth of TOC: How It All Started](#the-birth-of-toc-how-it-all-started)\r\n  - [The Pioneers Who Changed Everything](#the-pioneers-who-changed-everything)\r\n- [What is TOC? The Three Pillars](#what-is-toc-the-three-pillars)\r\n  - [Automata Theory: _How do machines process input?_](#automata-theory-how-do-machines-process-input)\r\n  - [Formal Languages & Grammars: _How do we define computation rules?_](#formal-languages--grammars-how-do-we-define-computation-rules)\r\n  - [Computability & Complexity: _What can and cannot be computed?_](#computability--complexity-what-can-and-cannot-be-computed)\r\n- [The Roadmap: What You'll Learn](#the-roadmap-what-youll-learn)\r\n- [Why This Matters in the Real World](#why-this-matters-in-the-real-world)\r\n- [What's Coming Next](#whats-coming-next)\r\n  - [Something to Ponder](#something-to-ponder)\r\n\r\n## The Birth of TOC: How It All Started\r\n\r\nBefore we had sleek laptops and smartphones, brilliant minds were already grappling with profound questions about computation. They were trying to figure out what it actually means to \"compute\" something and whether machines would face fundamental limitations.\r\n\r\n#### The Pioneers Who Changed Everything\r\n\r\n- **Alan Turing** came up with the Turing Machine in 1936—a simple yet powerful model that laid the groundwork for modern computers. His work on the Halting Problem showed us something shocking: some problems can never be solved algorithmically, no matter how powerful our computers become.\r\n\r\n- **Alonzo Church** developed Lambda Calculus, which approached computation through function evaluation. Together with Turing's work, this led to the Church-Turing Thesis—essentially defining what \"computable\" even means.\r\n\r\n- **Kurt Gödel** dropped a bombshell on the world of mathematics with his Incompleteness Theorems, proving that within any formal system, some truths will always remain unprovable.\r\n\r\n- **Noam Chomsky** introduced his famous hierarchy in 1956, creating a bridge between computer science and linguistics by classifying languages based on computational complexity.\r\n\r\n- **Stephen Kleene** developed regular expressions in the 1950s—something you might use today when searching text or validating an email address.\r\n\r\nIsn't it incredible? These visionaries defined computation decades before modern computers became part of our everyday lives!\r\n\r\n## What is TOC? The Three Pillars\r\n\r\nAt its heart, TOC helps us understand computation at its most fundamental level through three interconnected areas:\r\n\r\n#### Automata Theory: _How do machines process input?_\r\n\r\nThis is where we study abstract machines—theoretical models that help us understand computation. From simple Finite Automata (which might power your phone's autocorrect) to more complex Pushdown Automata (which help compilers understand your code), these models show us which problems are computationally \"easy\" and which ones require more powerful approaches.\r\n\r\nNext time your phone suggests the right word as you type, thank automata theory!\r\n\r\n#### Formal Languages & Grammars: _How do we define computation rules?_\r\n\r\nLanguages surround us—from English to Python. TOC helps us create and understand the precise rules governing these languages, especially programming languages where strict syntax matters.\r\n\r\nEver wondered how your browser knows exactly how to display a webpage? HTML and JSON follow structured grammars that define how content should be formatted. Without these formal rules, compilers would have no idea how to translate your human-friendly code into machine instructions.\r\n\r\n#### Computability & Complexity: _What can and cannot be computed?_\r\n\r\nHere's where things get philosophical. Some problems are \"undecidable\"—no algorithm can solve them, period. The classic example is the Halting Problem: determining whether any given program will eventually stop running or continue forever. Turing proved this is mathematically impossible to solve in the general case.\r\n\r\nUnderstanding these limits isn't depressing—it's liberating! It helps us focus on what's actually possible and find clever workarounds for seemingly impossible challenges.\r\n\r\n## The Roadmap: What You'll Learn\r\n\r\nTo master TOC, we'll follow the elegant progression of the Chomsky Hierarchy, which organizes computational power in increasing levels of complexity:\r\n\r\n1. **Regular Languages** → These handle simple patterns like email validation, search terms, and traffic light sequences.\r\n\r\n2. **Context-Free Languages** → These manage more complex structures like nested parentheses in programming languages or XML parsing.\r\n\r\n3. **Context-Sensitive Languages** → These powerful grammars capture relationships that depend on surrounding context (less common but used in some advanced AI).\r\n\r\n4. **Recursively Enumerable Languages** → The most powerful category, covering everything a Turing Machine can compute.\r\n\r\nThis journey mirrors the evolution of computing itself—from simple pattern matching to the complex reasoning of modern systems.\r\n\r\n## Why This Matters in the Real World\r\n\r\nTOC isn't just for academics—it shapes the technology you use every day:\r\n\r\n- **Search Engines & Text Editors** → When you search for \"cat videos\" or find-and-replace text, you're using algorithms built on regular expressions and finite automata.\r\n\r\n- **Programming Languages** → Ever wondered why your code editor catches syntax errors as you type? Context-Free Grammars ensure your code follows the right structure.\r\n\r\n- **Cybersecurity** → TOC helps security experts prove whether encryption methods are truly unbreakable or vulnerable to attacks.\r\n\r\n- **AI & Machine Learning** → From simple chatbots to sophisticated language models, formal logic and automata theory provide the theoretical foundation.\r\n\r\n- **Robotics** → Finite State Machines help model how robots make decisions and move through environments.\r\n\r\nWhether you're writing code, designing systems, or just curious about how your devices work, TOC gives you a deeper understanding of computation itself.\r\n\r\n## What's Coming Next\r\n\r\nNow that we've laid the groundwork, our next post will dive into the brilliant minds behind TOC—exploring how Turing, Chomsky, Gödel, and others revolutionized our understanding of computation.\r\n\r\n#### Something to Ponder\r\n\r\n_If computers operate on strict, deterministic rules, can they ever truly \"think\" in the way humans do? Or is there something about human intuition that lies beyond the realm of computation?_\r\n\r\nCan't wait to continue this journey with you! 🚀","src/content/blog/toc-the-hidden-language.md","77af4724a5b808aa",{html:1583,metadata:1584},"<h2 id=\"introduction-welcome-to-the-hidden-language-of-machines\">Introduction: Welcome to the Hidden Language of Machines</h2>\n<p>Imagine you’ve built a machine that claims to answer any question you ask. How do you know if it’s telling the truth? Or if it will ever stop running? Welcome to the world of Theory of Computation (TOC)—a field that doesn’t just study computers, but the very nature of computation itself.</p>\n<p>Let me put this in perspective: Every time you use Google Search, AI, programming languages, or even a chatbot, you are interacting with systems that rely on TOC principles. Without TOC, we wouldn’t have search engines that match patterns, compilers that translate high-level code into machine instructions, or even cybersecurity systems that prove whether an encryption method is truly secure.</p>\n<p>But TOC goes deeper than just powering your everyday tech. It addresses fundamental questions about information and problem-solving that touch every aspect of our digital lives.</p>\n<p>When a doctor uses AI to detect cancer in medical images, TOC principles determine how reliably that system can identify patterns. When cybersecurity experts protect your personal data, they rely on computational complexity to create encryption that would take billions of years to crack. And when developers create programming languages that let humans communicate with machines, they’re building on formal language theory established decades ago.</p>\n<p>Think about this: before you can determine if an artificial intelligence is truly “intelligent,” you need to understand what computation itself can and cannot do. TOC gives us the framework to ask profound questions like:</p>\n<ul>\n<li>If a computer claims it can solve any problem you give it, how would you test if it’s telling the truth?</li>\n<li>What makes some problems easy for computers to solve and others practically impossible?</li>\n<li>Is human creativity fundamentally different from algorithmic processes, or just a more complex form of computation?</li>\n</ul>\n<p>Even if you never write a line of code, TOC shapes your digital experience in countless ways. That predictive text finishing your sentences? Regular languages at work. The security protecting your online banking? Computational complexity theory keeping your money safe. The streaming recommendations that somehow know what you want to watch next? Algorithms navigating computational efficiency challenges.</p>\n<p>I know it might sound abstract, but TOC is woven into the fabric of everything digital in your life. And trust me—by the end of this journey, you won’t just understand TOC; you’ll see it everywhere, from the smallest microchip to the most powerful AI systems. You’ll gain a deeper appreciation for what happens behind the screens you interact with every day, and perhaps most importantly, you’ll understand the fascinating limits of what machines can and cannot do.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#the-birth-of-toc-how-it-all-started\">The Birth of TOC: How It All Started</a>\n<ul>\n<li><a href=\"#the-pioneers-who-changed-everything\">The Pioneers Who Changed Everything</a></li>\n</ul>\n</li>\n<li><a href=\"#what-is-toc-the-three-pillars\">What is TOC? The Three Pillars</a>\n<ul>\n<li><a href=\"#automata-theory-how-do-machines-process-input\">Automata Theory: <em>How do machines process input?</em></a></li>\n<li><a href=\"#formal-languages--grammars-how-do-we-define-computation-rules\">Formal Languages &#x26; Grammars: <em>How do we define computation rules?</em></a></li>\n<li><a href=\"#computability--complexity-what-can-and-cannot-be-computed\">Computability &#x26; Complexity: <em>What can and cannot be computed?</em></a></li>\n</ul>\n</li>\n<li><a href=\"#the-roadmap-what-youll-learn\">The Roadmap: What You’ll Learn</a></li>\n<li><a href=\"#why-this-matters-in-the-real-world\">Why This Matters in the Real World</a></li>\n<li><a href=\"#whats-coming-next\">What’s Coming Next</a>\n<ul>\n<li><a href=\"#something-to-ponder\">Something to Ponder</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"the-birth-of-toc-how-it-all-started\">The Birth of TOC: How It All Started</h2>\n<p>Before we had sleek laptops and smartphones, brilliant minds were already grappling with profound questions about computation. They were trying to figure out what it actually means to “compute” something and whether machines would face fundamental limitations.</p>\n<h4 id=\"the-pioneers-who-changed-everything\">The Pioneers Who Changed Everything</h4>\n<ul>\n<li>\n<p><strong>Alan Turing</strong> came up with the Turing Machine in 1936—a simple yet powerful model that laid the groundwork for modern computers. His work on the Halting Problem showed us something shocking: some problems can never be solved algorithmically, no matter how powerful our computers become.</p>\n</li>\n<li>\n<p><strong>Alonzo Church</strong> developed Lambda Calculus, which approached computation through function evaluation. Together with Turing’s work, this led to the Church-Turing Thesis—essentially defining what “computable” even means.</p>\n</li>\n<li>\n<p><strong>Kurt Gödel</strong> dropped a bombshell on the world of mathematics with his Incompleteness Theorems, proving that within any formal system, some truths will always remain unprovable.</p>\n</li>\n<li>\n<p><strong>Noam Chomsky</strong> introduced his famous hierarchy in 1956, creating a bridge between computer science and linguistics by classifying languages based on computational complexity.</p>\n</li>\n<li>\n<p><strong>Stephen Kleene</strong> developed regular expressions in the 1950s—something you might use today when searching text or validating an email address.</p>\n</li>\n</ul>\n<p>Isn’t it incredible? These visionaries defined computation decades before modern computers became part of our everyday lives!</p>\n<h2 id=\"what-is-toc-the-three-pillars\">What is TOC? The Three Pillars</h2>\n<p>At its heart, TOC helps us understand computation at its most fundamental level through three interconnected areas:</p>\n<h4 id=\"automata-theory-how-do-machines-process-input\">Automata Theory: <em>How do machines process input?</em></h4>\n<p>This is where we study abstract machines—theoretical models that help us understand computation. From simple Finite Automata (which might power your phone’s autocorrect) to more complex Pushdown Automata (which help compilers understand your code), these models show us which problems are computationally “easy” and which ones require more powerful approaches.</p>\n<p>Next time your phone suggests the right word as you type, thank automata theory!</p>\n<h4 id=\"formal-languages--grammars-how-do-we-define-computation-rules\">Formal Languages &#x26; Grammars: <em>How do we define computation rules?</em></h4>\n<p>Languages surround us—from English to Python. TOC helps us create and understand the precise rules governing these languages, especially programming languages where strict syntax matters.</p>\n<p>Ever wondered how your browser knows exactly how to display a webpage? HTML and JSON follow structured grammars that define how content should be formatted. Without these formal rules, compilers would have no idea how to translate your human-friendly code into machine instructions.</p>\n<h4 id=\"computability--complexity-what-can-and-cannot-be-computed\">Computability &#x26; Complexity: <em>What can and cannot be computed?</em></h4>\n<p>Here’s where things get philosophical. Some problems are “undecidable”—no algorithm can solve them, period. The classic example is the Halting Problem: determining whether any given program will eventually stop running or continue forever. Turing proved this is mathematically impossible to solve in the general case.</p>\n<p>Understanding these limits isn’t depressing—it’s liberating! It helps us focus on what’s actually possible and find clever workarounds for seemingly impossible challenges.</p>\n<h2 id=\"the-roadmap-what-youll-learn\">The Roadmap: What You’ll Learn</h2>\n<p>To master TOC, we’ll follow the elegant progression of the Chomsky Hierarchy, which organizes computational power in increasing levels of complexity:</p>\n<ol>\n<li>\n<p><strong>Regular Languages</strong> → These handle simple patterns like email validation, search terms, and traffic light sequences.</p>\n</li>\n<li>\n<p><strong>Context-Free Languages</strong> → These manage more complex structures like nested parentheses in programming languages or XML parsing.</p>\n</li>\n<li>\n<p><strong>Context-Sensitive Languages</strong> → These powerful grammars capture relationships that depend on surrounding context (less common but used in some advanced AI).</p>\n</li>\n<li>\n<p><strong>Recursively Enumerable Languages</strong> → The most powerful category, covering everything a Turing Machine can compute.</p>\n</li>\n</ol>\n<p>This journey mirrors the evolution of computing itself—from simple pattern matching to the complex reasoning of modern systems.</p>\n<h2 id=\"why-this-matters-in-the-real-world\">Why This Matters in the Real World</h2>\n<p>TOC isn’t just for academics—it shapes the technology you use every day:</p>\n<ul>\n<li>\n<p><strong>Search Engines &#x26; Text Editors</strong> → When you search for “cat videos” or find-and-replace text, you’re using algorithms built on regular expressions and finite automata.</p>\n</li>\n<li>\n<p><strong>Programming Languages</strong> → Ever wondered why your code editor catches syntax errors as you type? Context-Free Grammars ensure your code follows the right structure.</p>\n</li>\n<li>\n<p><strong>Cybersecurity</strong> → TOC helps security experts prove whether encryption methods are truly unbreakable or vulnerable to attacks.</p>\n</li>\n<li>\n<p><strong>AI &#x26; Machine Learning</strong> → From simple chatbots to sophisticated language models, formal logic and automata theory provide the theoretical foundation.</p>\n</li>\n<li>\n<p><strong>Robotics</strong> → Finite State Machines help model how robots make decisions and move through environments.</p>\n</li>\n</ul>\n<p>Whether you’re writing code, designing systems, or just curious about how your devices work, TOC gives you a deeper understanding of computation itself.</p>\n<h2 id=\"whats-coming-next\">What’s Coming Next</h2>\n<p>Now that we’ve laid the groundwork, our next post will dive into the brilliant minds behind TOC—exploring how Turing, Chomsky, Gödel, and others revolutionized our understanding of computation.</p>\n<h4 id=\"something-to-ponder\">Something to Ponder</h4>\n<p><em>If computers operate on strict, deterministic rules, can they ever truly “think” in the way humans do? Or is there something about human intuition that lies beyond the realm of computation?</em></p>\n<p>Can’t wait to continue this journey with you! 🚀</p>",{headings:1585,localImagePaths:1620,remoteImagePaths:1621,frontmatter:1622,imagePaths:1624},[1586,1589,1590,1593,1596,1599,1602,1605,1608,1611,1614,1617],{depth:34,slug:1587,text:1588},"introduction-welcome-to-the-hidden-language-of-machines","Introduction: Welcome to the Hidden Language of Machines",{depth:34,slug:45,text:46},{depth:34,slug:1591,text:1592},"the-birth-of-toc-how-it-all-started","The Birth of TOC: How It All Started",{depth:38,slug:1594,text:1595},"the-pioneers-who-changed-everything","The Pioneers Who Changed Everything",{depth:34,slug:1597,text:1598},"what-is-toc-the-three-pillars","What is TOC? The Three Pillars",{depth:38,slug:1600,text:1601},"automata-theory-how-do-machines-process-input","Automata Theory: How do machines process input?",{depth:38,slug:1603,text:1604},"formal-languages--grammars-how-do-we-define-computation-rules","Formal Languages & Grammars: How do we define computation rules?",{depth:38,slug:1606,text:1607},"computability--complexity-what-can-and-cannot-be-computed","Computability & Complexity: What can and cannot be computed?",{depth:34,slug:1609,text:1610},"the-roadmap-what-youll-learn","The Roadmap: What You’ll Learn",{depth:34,slug:1612,text:1613},"why-this-matters-in-the-real-world","Why This Matters in the Real World",{depth:34,slug:1615,text:1616},"whats-coming-next","What’s Coming Next",{depth:38,slug:1618,text:1619},"something-to-ponder","Something to Ponder",[],[],{title:1573,date:1623,description:1576,author:16,series:23,thumbnail:1577,seriesOrder:201,minutesRead:1567},["Date","2025-03-22T00:00:00.000Z"],[],"toc-the-hidden-language.md","celeris-the-engineering",{id:1626,data:1628,body:1634,filePath:1635,digest:1636,rendered:1637,legacyId:1930},{title:1629,author:1630,draft:18,date:1631,description:1632,featured:359,thumbnail:1633},"Engineering of Celeris - The design, planning and architecture",{id:16,collection:17},["Date","2025-05-25T00:00:00.000Z"],"An in-depth look into the design, planning and architecture of Celeris, a completely offline payments ecosystem.","/thumbnails/celeris.png","## Introduction\r\n\r\nCeleris is one of the projects I really loved building. I got a the idea when I registered for a college hackathon, **_which I later got to know is quite biased, and didn't look for innovation in the first place_**. But keeping it aside, I wanted to build something which can be continued even after the hackathon, and not just a one-time project.\r\n\r\nOur team consisted of four members, and we had to build something that would be useful to people, and not just a project that would be used for the hackathon. We wanted to innovate.\r\n\r\n> Read the LinkedIn post [here](https://www.linkedin.com/posts/a2ys_we-built-something-we-were-proud-of-but-activity-7333173081642815490-mzj8?utm_source=share&utm_medium=member_desktop&rcm=ACoAADiYeaoBz7k0sh0yacSgYQfhVjjtqzUc3ZM).\r\n\r\n![Our Small Team](/blog-assets/celeris/our-team.jpg)\r\n\r\nIn India, even though we have a system for UPI payments, there are still a lot of people who do not have access to the internet to perform a UPI transactions. There are a few solutions which are near to this from the Government of India, but they are either being developed, or not available to everyone due to lack of appropriate hardware in phones. We wanted to build a completely offline payments ecosystem that would allow people to make payments without the need for an internet connection. This is how the idea of Celeris was born.\r\n\r\n> This post is really long, and I will try to cover everything that I did in the project, from the design and architecture of the system, to the implementation of the different components. I will also try to cover the challenges that I faced while building the system, and how I overcame them. I will also try to cover the future plans for the project, and how it can be extended to include more features and functionalities. Be patient, and read through the whole post, as it will be worth it. I will also try to include a lot of code snippets, so that you can understand how the system works, and how you can build something similar. There is a lot to learn!\r\n\r\n## Table of Contents\r\n\r\n- [Introduction](#introduction)\r\n- [The Problem](#the-problem)\r\n- [The Solution](#the-solution)\r\n- [Design Principles](#design-principles)\r\n- [Architecture](#architecture)\r\n- [Celeris SMS Gateway: The Core Component](#celeris-sms-gateway-the-core-component)\r\n  - [SMS Receiver](#sms-receiver)\r\n  - [SMS Sender](#sms-sender)\r\n  - [Main Activity](#main-activity)\r\n- [Celeris Backend: The Server](#celeris-backend-the-server)\r\n  - [SMS Parser](#sms-parser)\r\n  - [Authentication](#authentication)\r\n    - [Database Tables & Schema](#database-tables--schema)\r\n    - [Request Models](#request-models)\r\n    - [Endpoints](#endpoints)\r\n    - [Security Disclaimer](#security-disclaimer)\r\n    - [Utilities](#utilities)\r\n  - [Transaction Service: Core of Celeris Payments](#transaction-service-core-of-celeris-payments)\r\n    - [Design Notes](#design-notes)\r\n  - [Celeris API: The RESTful Interface](#celeris-api-the-restful-interface)\r\n    - [App Initialization](#app-initialization)\r\n    - [Sync Endpoint](#sync-endpoint)\r\n    - [SMS Webhook Endpoint](#sms-webhook-endpoint)\r\n    - [Add Balance Endpoint](#add-balance-endpoint)\r\n  - [Highlights](#highlights)\r\n- [Celeris Database](#celeris-database)\r\n- [Celeris App: The Offline-cum-Online Client Application](#celeris-app-the-offline-cum-online-client-application)\r\n  - [Libraries and Dependencies](#libraries-and-dependencies)\r\n  - [UI Components](#ui-components)\r\n  - [SQLite Database Helpers](#sqlite-database-helpers)\r\n    - [AuthDatabaseHelper](#authdatabasehelper)\r\n    - [QR Code Database Helper](#qr-code-database-helper)\r\n  - [User Model](#user-model)\r\n  - [MainActivity](#mainactivity)\r\n    - [Logic Breakdown](#logic-breakdown)\r\n    - [Authentication Flow Pipeline](#authentication-flow-pipeline)\r\n    - [Integration Perspective](#integration-perspective)\r\n  - [Authentication Flow](#authentication-flow)\r\n    - [AuthActivity](#authactivity)\r\n    - [Login Flow](#login-flow)\r\n    - [Signup Flow](#signup-flow)\r\n    - [Local Persistence: AuthDatabaseHelper](#local-persistence-authdatabasehelper)\r\n    - [Navigation between Login & Signup](#navigation-between-login--signup)\r\n    - [Final Notes](#final-notes)\r\n  - [Post Authentication: SecureActivity](#post-authentication-secureactivity)\r\n    - [Authentication Check (Offline-aware)](#authentication-check-offline-aware)\r\n    - [Network Monitoring with NetworkMonitor](#network-monitoring-with-networkmonitor)\r\n  - [Profile Page](#profile-page)\r\n  - [Scan and Pay Flow](#scan-and-pay-flow)\r\n    - [Camera Initialization](#camera-initialization)\r\n    - [CameraX Setup](#camerax-setup)\r\n    - [QR Code Decoding](#qr-code-decoding)\r\n    - [Post-Scan Navigation and Storage](#post-scan-navigation-and-storage)\r\n    - [Data Persistence](#data-persistence)\r\n  - [Send Money Flow](#send-money-flow)\r\n    - [Retrieving Scanned Merchant ID](#retrieving-scanned-merchant-id)\r\n    - [Loading User Information](#loading-user-information)\r\n    - [Composing the Payment SMS](#composing-the-payment-sms)\r\n    - [Summary of the Flow](#summary-of-the-flow)\r\n  - [Success Activity](#success-activity)\r\n    - [Receiving Transaction Metadata via Intent](#receiving-transaction-metadata-via-intent)\r\n    - [Displaying Confirmation UI](#displaying-confirmation-ui)\r\n    - [Updating User Balance in Local Storage](#updating-user-balance-in-local-storage)\r\n  - [Retrofit Client Utility](#retrofit-client-utility)\r\n  - [AuthApi Utility](#authapi-utility)\r\n    - [Endpoints](#endpoints-1)\r\n    - [Backend Integration](#backend-integration)\r\n  - [DataUtils: Persistent Key-Value Storage](#datautils-persistent-key-value-storage)\r\n  - [QRCodeUtils Utility](#qrcodeutils-utility)\r\n    - [Purpose](#purpose)\r\n    - [Implementation Breakdown](#implementation-breakdown)\r\n    - [QR Code Generation Logic](#qr-code-generation-logic)\r\n    - [Usage Context in Celeris](#usage-context-in-celeris)\r\n  - [NetworkMonitor Utility](#networkmonitor-utility)\r\n    - [Constructor Parameters](#constructor-parameters)\r\n    - [Start & Stop Listening](#start--stop-listening)\r\n    - [Checking Network Status](#checking-network-status)\r\n    - [Use Case in Celeris](#use-case-in-celeris)\r\n  - [SMSReceiver](#smsreceiver)\r\n    - [Overview of Responsibilities](#overview-of-responsibilities)\r\n    - [Listening for Incoming SMS](#listening-for-incoming-sms)\r\n    - [Parsing the SMS Payload](#parsing-the-sms-payload)\r\n    - [Processing the Message Content](#processing-the-message-content)\r\n    - [Redirecting to Transaction Outcome Screen](#redirecting-to-transaction-outcome-screen)\r\n    - [Offline First Impact](#offline-first-impact)\r\n- [Un-technical Stuff: Team Coordination and Project Management](#un-technical-stuff-team-coordination-and-project-management)\r\n- [Conclusion](#conclusion)\r\n\r\n## The Problem\r\n\r\nThe problem we wanted to solve was simple. We wanted to build a completely offline payments ecosystem that would allow people to make payments without the need for an internet connection. The solution had to be simple, easy to use and secure. We wanted to build a system that would allow people to make payments using their phones, without the need for any additional hardware or software.\r\n\r\nI searched up a few existing solutions, and we discussed them in our team. Here are the three major solutions that I found along with their limitations from a system design perspective:\r\n\r\n1. **UPI 123 Pay**: UPI 123Pay is a service launched by the National Payments Corporation of India (NPCI) that enables users with feature phones (non-smartphones) to perform UPI transactions without internet. It works via IVR (Interactive Voice Response), missed calls, and sound-based technology. While it's a strong initiative, it suffers from two major issues: limited awareness and a cumbersome user experience.\r\n2. **Aadhaar Enabled Payment System (AEPS)**: AEPS is a bank-led model that allows users to carry out financial transactions using their Aadhaar number and biometric authentication (usually a fingerprint). While it plays a critical role in financial inclusion, it relies heavily on physical biometric devices, which are not widely available, especially with small merchants or in rural households. It also poses concerns around privacy and the dependency on third-party infrastructure to function.\r\n3. **UPI Lite X**: This is the nearest solution to ours. It aims to facilitate offline transactions through Near Field Communication (NFC) or device-to-device communication. However, it is currently in early stages of adoption and rollout. Most importantly, it requires specific hardware capabilities like NFC chips and trusted execution environments (TEE), which are still not available on a large number of budget and mid-range smartphones used by the masses. This limits its immediate impact and inclusivity, especially in rural or economically weaker regions.\r\n\r\nAfter going through everything, I saw three main problems from a user's perspective:\r\n\r\n1. **Limited Awareness**: Many people are not aware of the existing solutions, and even if they are, they may not be comfortable using them due to lack of knowledge or experience. This is especially true for older generations who may not be as tech-savvy.\r\n2. **Cumbersome User Experience**: The existing solutions are often not user-friendly, and require a lot of steps to complete a transaction. This can be frustrating for users, and can lead to them abandoning the process altogether.\r\n3. **Hardware Limitations**: Many of the existing solutions require specific hardware capabilities, such as NFC chips or biometric devices, which are not widely available on all smartphones. This limits the accessibility of these solutions, especially in rural or economically weaker regions.\r\n\r\nAfter going through everything, we had to build something that would be user-friendly, even a child could use it. We wanted to build something that would be available to everyone, even if they did not have access to the internet. We wanted to build something that would be available to everyone, even if they did not have access to the latest hardware.\r\n\r\n## The Solution\r\n\r\nBefore starting out with the solution and start development in our team, I had to think about the design and architecture of the system so that everyone in the team could understand it, and we could build it in a modular way and how to make it all work together.\r\n\r\nThe solution was something that needs to be done in a few steps, and would be available to everyone. The only step was to break it down to the most modular level, so that everything can be scaled up on demand. This was the first time I did something like this, so I had to have a lot of patience and a lot of time to think about the design and architecture of the system. I had to think about everything, from the hardware to the software, to the user experience.\r\n\r\nTo achieve a solution like this, I had to study about the technologies that I would be using in a short period of time and then decide on a very basic working architecture in the beginning, and then build up to a final architecture which could be scaled if needed. This is also because I had to distribute the work among my team members, and I had to make sure that everyone was on the same page. I had to make sure that everyone understood the design principles and the architecture of the system.\r\n\r\n## Design Principles\r\n\r\nThe design principles that were followed while building Celeris were:\r\n\r\n1. **Simplicity**: The system had to be simple and easy to use. I wanted to build a system that would allow people to make payments using their phones, without the need for any additional hardware or software. Google's Material Design was a great starting point for the UI/UX design, as it provided a clean and intuitive interface that was easy to navigate.\r\n2. **Modularity and Scalability**: The system had to be modular and scalable. I wanted to build a system that could be easily scaled up or down, depending on the needs of the users. This meant that I had to break down the system into smaller components that could be easily replaced or upgraded. This would also allow for future enhancements and new features to be added without disrupting the existing system.\r\n3. **Security**: The system had to be secure. Although a lot of security features were not implemented in the app for the hackathon, if developed further, the system would have to be secure enough to protect the users' data and transactions.\r\n\r\n## Architecture\r\n\r\nThe architecture of Celeris was designed to be modular and scalable. The system was broken down into smaller components that could be easily replaced or upgraded. The architecture consisted of the following components:\r\n\r\n1. **Celeris App**: The Celeris app was the main component of the system. It was designed to be simple and easy to use, with a clean and intuitive interface. The app was initially built using React Native, but then was later migrated to Kotlin for Native Android development. This was done due to major constraint which was the lack of background SMS sending capabilities in React Native, which was a major requirement for the app to work offline. The app was designed to be modular, with different components for different features, such as sending and receiving payments, managing contacts, and viewing transaction history. I will discuss the Celeris app in detail in a later section of this blog post.\r\n2. **Celeris Server**: The Celeris server was the backend component of the system. It was designed to be modular and scalable, with different components for different features, such as managing users, processing transactions, and managing and sending SMS messages. The server was built using FastAPI, a modern web framework for building APIs with Python. FastAPI was chosen for its performance, ease of use, and support for asynchronous programming. The server was designed to be modular, with different components for different features, such as managing users, processing transactions, and sending notifications. Not to mention, FastAPI allowed the whole backend to be built in a very short time, and it was very easy to use. The server was designed to be modular, with different components for different features, such as managing users, processing transactions, and sending notifications.\r\n3. **Celeris Database**: The Celeris database was the data storage component of the system. It was designed to be modular and scalable, with different components for different features, such as storing user data, transaction data, and authentication data. To reduce all the hassle of managing a database and to expose it as a REST API, I used Supabase, an open-source Firebase alternative that provides a Postgres database with a RESTful API. Supabase was chosen for its ease of use, scalability, and support for real-time data updates. The database was designed to be modular, with different tables for different features, such as users, transactions, and balances.\r\n4. **Celeris SMS Gateway**: The Celeris SMS gateway was the component of the system that allowed the app to send and receive SMS messages. This was the core component of the whole system, as it was the middleman which connected the offline app to the online server. I initially thought of using Twilio, but it was not possible to send SMS messages to the phone number provided by Twilio, as they only give a US based phone number, and we needed an Indian phone number to send SMS messages to. So, I decided to build a local SMS gateway myself, which would be available everytime to recieve SMS messages from the users, and send SMS messages to the users based on the requests made by the online server. This was then exposed to the network using a simple REST API, which would have a POST endpoint to send SMS messages, and have a webhook which would send the SMS messages to the server when a new SMS message is received. The SMS gateway was built using NanoHTTPD, a lightweight HTTP server for Java, and was designed to be modular, with different components for different features, such as sending and receiving SMS messages, and managing contacts.\r\n\r\nI made a sketch of the architecture of the system on a piece of paper first to actually visualize how the system would look look like, then I had to discuss it with my team members to make sure that everyone understood what was going on, and how the system would work. This was a very important step, as it allowed us to identify any potential issues or bottlenecks in the system before we started building it. I built it on a piece of paper first, then I made it on a whiteboard while discussing it with my team members.\r\n\r\nThis is the very first sketch of the architecture of Celeris, which was then later refined and built upon to create the final architecture of the system. It was a very simple sketch, but it allowed us to visualize how the system would work, and how the different components would interact with each other.\r\n\r\n![The very first sketch of the architecture of Celeris](/blog-assets/celeris/very-first-architecture.jpg)\r\n\r\nThen I discussed it with my team members, and we made a few changes to the architecture to make it more modular and scalable. I also added a few more components to the system, such as the Celeris SMS gateway, which was the core component of the whole system, as it was the middleman which connected the offline app to the online server.\r\n\r\n![Second sketch of the architecture of Celeris](/blog-assets/celeris/architecture-second-iteration.jpg)\r\n\r\nAfter this I had to research a little bit more about the technologies that I would be using in the system, and how they would work together. I had to make sure that everything was compatible with each other, and that the system would be able to handle the load of the users. I also decided on what technologies we would be using for the different components of the system, such as the Celeris app, the Celeris server, and the Celeris database. I had to make sure that everything was compatible with each other, and that the system would be able to handle the load of the users. Then after brainstorming a lot, I came up with the final architecture of the system, which was then built upon to create the final product.\r\n\r\n![Final architecture of Celeris](/blog-assets/celeris/final-architecture.jpg)\r\n\r\n## Celeris SMS Gateway: The Core Component\r\n\r\nThe Celeris SMS gateway was the core component of the whole system, as it was the middleman which connected the offline app to the online server. It was designed to be simple and easy to use, with a clean and intuitive interface. The SMS gateway was built using NanoHTTPD, a lightweight HTTP server for Java, and was designed to be modular, with different components for different features.\r\n\r\n> All of the code snippets being discussed in this section are available on the [GitHub repository](https://github.com/celeris-schnell/sms-server) of the Celeris SMS gateway.\r\n\r\n#### SMS Receiver\r\n\r\nThis was the component of the SMS gateway that ran in the background and listened for incoming SMS messages. It was a very basic component, which would listen for incoming SMS messages and then send them to the server using a POST request.\r\n\r\n```java\r\n@Override\r\npublic void onReceive(Context context, Intent intent) {\r\n    if (intent.getAction() != null &&\r\n            intent.getAction().equals(Telephony.Sms.Intents.SMS_RECEIVED_ACTION)) {\r\n\r\n        Bundle bundle = intent.getExtras();\r\n        if (bundle != null) {\r\n            SmsMessage[] messages;\r\n            messages = Telephony.Sms.Intents.getMessagesFromIntent(intent);\r\n\r\n            for (SmsMessage smsMessage : messages) {\r\n                if (smsMessage != null) {\r\n                    String messageBody = smsMessage.getMessageBody();\r\n                    sendToServer(messageBody);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis is a `BroadcastReceiver` that listens for incoming SMS messages on the Android device. When the system receives a text message, it broadcasts an intent with the action `SMS_RECEIVED_ACTION`.\r\n\r\n- **Intent Filtering**: The code first checks if the received intent is specifically for SMS messages by verifying the action matches `Telephony.Sms.Intents.SMS_RECEIVED_ACTION`. This ensures it only processes actual SMS events and ignores other broadcast intents.\r\n- **Data Extraction**: When an SMS intent is received, the message data is stored in the intent's extras as a Bundle. The code retrieves this Bundle, which contains the raw SMS data from the telephony system.\r\n- **Message Parsing**: Using `Telephony.Sms.Intents.getMessagesFromIntent()`, the code extracts the SMS messages from the intent. This method handles the parsing of the telephony data and returns an array of `SmsMessage` objects. Multiple messages can arrive in a single intent, especially for long messages that get split into multiple parts.\r\n- **Content Processing**: For each SmsMessage object, the code extracts the message body using `getMessageBody()` and immediately calls the `sendToServer()` method.\r\n\r\n```java\r\nprivate void sendToServer(String messageBody) {\r\n    new Thread(() -> {\r\n        try {\r\n            URL url = new URL(\"https://41cf-122-187-117-179.ngrok-free.app/sms-webhook/\");\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            conn.setRequestMethod(\"POST\");\r\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            conn.setDoOutput(true);\r\n\r\n            String formData = \"Body=\" + URLEncoder.encode(messageBody, \"UTF-8\");\r\n\r\n            OutputStream os = conn.getOutputStream();\r\n            os.write(formData.getBytes());\r\n            os.flush();\r\n            os.close();\r\n\r\n            int responseCode = conn.getResponseCode(); // TODO: Use later for debugging\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }).start();\r\n}\r\n```\r\n\r\nThis method is responsible for sending the received SMS message to the Celeris server. It does this by creating a new thread to handle the network operation, ensuring that the main UI thread remains responsive.\r\n\r\n- **Threading**: The method creates a new thread to handle the HTTP request. This is essential because network operations are blocking and would freeze the main UI thread if executed synchronously. Android also enforces this by throwing a `NetworkOnMainThreadException` if we attempt network calls on the main thread.\r\n- **HTTP Connection Setup**: It establishes an `HttpURLConnection` to your ngrok tunnel URL, which is exposing your local Celeris backend server to the internet. The connection is configured for a POST request with the content type set to `application/x-www-form-urlencoded`, which is the standard format for HTML form submissions.\r\n- **Data Encoding**: The SMS message body is URL-encoded using `URLEncoder.encode()` to handle special characters properly, then formatted as form data with the parameter name \"Body\". This ensures characters like spaces, ampersands, or other symbols in the SMS don't break the HTTP request.\r\n- **Request Transmission**: The encoded form data is written to the connection's output stream as bytes. The `flush()` call ensures all data is sent immediately, and the stream is properly closed to release resources.\r\n- **Response Handling**: The code retrieves the HTTP response code, though it's currently unused (marked as TODO for debugging). This could be useful for error handling or logging successful transmissions.\r\n- **Error Management**: The entire operation is wrapped in a try-catch block to handle potential network failures, malformed URLs, or encoding issues without crashing the application.\r\n\r\nThis method bridges the gap between the Android SMS system (offline) and the web backend (online), converting local SMS data into HTTP requests that the server can process.\r\n\r\n#### SMS Sender\r\n\r\nThis was the component of the SMS gateway that would send SMS messages to the users. It was a very basic component, which would take the message body and the phone number as input, and then send the SMS message to the user using a POST request. This was exposed to the local network using a simple REST API, which would have a POST endpoint to send SMS messages.\r\n\r\n```java\r\npublic SmsHttpServer(int port) throws IOException {\r\n    super(port);\r\n    start(NanoHTTPD.SOCKET_READ_TIMEOUT, false);\r\n}\r\n```\r\n\r\nThis is the constructor for the `SmsHttpServer` class, which extends `NanoHTTPD`. It initializes the HTTP server on a specified port and starts it with a read timeout.\r\n\r\n- **Port Initialization**: The constructor takes an integer `port` as a parameter, which specifies the port number on which the server will listen for incoming HTTP requests. This allows you to run the server on any available port.\r\n- **Superclass Constructor**: It calls the superclass constructor (`super(port)`) to initialize the NanoHTTPD server with the specified port. This sets up the underlying server infrastructure.\r\n- **Server Start**: The `start()` method is called with two parameters:\r\n  - `NanoHTTPD.SOCKET_READ_TIMEOUT`: This sets the read timeout for incoming socket connections, ensuring that the server does not hang indefinitely waiting for data.\r\n  - `false`: This indicates that the server should not run in a separate thread, meaning it will block the current thread until it is stopped. This is useful for simple applications or testing but may need to be adjusted for production use.\r\n\r\n```java\r\n@Override\r\npublic Response serve(IHTTPSession session) {\r\n    if (Method.POST.equals(session.getMethod())) {\r\n        try {\r\n            Map<String, String> body = new HashMap<>();\r\n            session.parseBody(body);\r\n            JSONObject json = new JSONObject(Objects.requireNonNull(body.get(\"postData\")));\r\n            String phoneNumber = json.getString(\"phoneNumber\");\r\n            String message = json.getString(\"message\");\r\n\r\n            sendSms(phoneNumber, message);\r\n            return newFixedLengthResponse(\"SMS Sent\");\r\n        } catch (Exception e) {\r\n            return newFixedLengthResponse(Response.Status.INTERNAL_ERROR, \"text/plain\", e.getMessage());\r\n        }\r\n    }\r\n    return newFixedLengthResponse(\"SMS Gateway Running...\");\r\n}\r\n```\r\n\r\nThis method is the core of the `SmsHttpServer` class, handling incoming HTTP requests. It checks if the request method is POST, processes the request body, and sends an SMS message based on the provided data.\r\n\r\n- **HTTP Method Filtering**: The method first checks if the incoming request is a POST request using `Method.POST.equals(session.getMethod())`. Only POST requests are processed for SMS sending, while other HTTP methods (GET, PUT, etc.) receive a default response indicating the gateway is running.\r\n- **Request Body Parsing**: For POST requests, it creates a `HashMap` to store the parsed body data and calls `session.parseBody(body)`. This extracts the raw POST data from the HTTP request and stores it in the map with the key \"postData\".\r\n- **JSON Data Extraction**: The raw POST data is retrieved from the `HashMap` and parsed as a JSON object using new `JSONObject()`. The code expects the request body to contain JSON with two fields:\r\n  - `phoneNumber`: The recipient's phone number\r\n  - `message`: The SMS message content to send\r\n- **SMS Transmission**: Once the phone number and message are extracted from the JSON, the method calls `sendSms(phoneNumber, message)` to actually send the SMS using the Android SMS APIs.\r\n- **Response Handling**: The method returns different HTTP responses based on the outcome:\r\n  - Success: Returns \"SMS Sent\" with HTTP 200 status\r\n  - Error: Returns the exception message with HTTP 500 (Internal Server Error) status\r\n  - Non-POST requests: Returns \"SMS Gateway Running...\" indicating the server is operational\r\n- **Error Management**: The entire POST processing logic is wrapped in a try-catch block to handle JSON parsing errors, missing fields, or SMS sending failures gracefully without crashing the server.\r\n\r\nThis creates a simple REST API endpoint that accepts JSON payloads and converts them into SMS messages sent through the Android device.\r\n\r\n```java\r\nprivate void sendSms(String phoneNumber, String message) {\r\n    SmsManager smsManager = SmsManager.getDefault();\r\n    smsManager.sendTextMessage(phoneNumber, null, message, null, null);\r\n}\r\n```\r\n\r\nThis method is responsible for sending an SMS message using the Android `SmsManager` class. It takes two parameters: the recipient's phone number and the message content.\r\n\r\n- **SmsManager Initialization**: It retrieves the default `SmsManager` instance using `SmsManager.getDefault()`. This class provides methods to send SMS messages, manage SMS queues, and handle delivery reports.\r\n- **SMS Sending**: The `sendTextMessage()` method is called with five parameters:\r\n  - `phoneNumber`: The recipient's phone number\r\n  - `null` (service center address): Usually null to use the default SMS service center\r\n  - `message`: The actual text content of the SMS\r\n  - `null` (sent PendingIntent): Could be used to receive notification when the SMS is sent\r\n  - `null` (delivery PendingIntent): Could be used to receive notification when the SMS is delivered\r\n\r\nThis method serves as a simple wrapper around the Android SMS API, enabling the HTTP server to send SMS messages to any phone number specified in incoming requests. Note that this requires the `SEND_SMS` permission in the Android manifest.\r\n\r\n#### Main Activity\r\n\r\n```java\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        EdgeToEdge.enable(this);\r\n        setContentView(R.layout.activity_main);\r\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {\r\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\r\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\r\n            return insets;\r\n        });\r\n\r\n        try {\r\n            new SmsHttpServer(8080);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis is the main activity of the Celeris SMS gateway application, which serves as the entry point for the Android app. It initializes the user interface and starts the HTTP server that will handle incoming SMS requests.\r\n\r\n- **SMS Server Initialization**: The critical part for the SMS gateway functionality - it instantiates a new `SmsHttpServer` on port 8080. This starts the HTTP server that will listen for incoming requests to send SMS messages.\r\n- **Error Handling**: The server initialization is wrapped in a try-catch block to handle potential `IOException` that could occur during server startup (such as port already in use or network issues).\r\n\r\nThis activity essentially serves as the bootstrap for the SMS gateway, starting the HTTP server that makes the Android device accessible as an SMS endpoint on the local network. Once launched, other applications can send POST requests to `http://[device-ip]:8080` to trigger SMS messages through the device.\r\n\r\n## Celeris Backend: The Server\r\n\r\nThe Celeris backend was the server component of the system. It was designed to be modular and scalable, with different components for different features, such as managing users, processing transactions, and sending notifications. The server was built using FastAPI, a modern web framework for building APIs with Python. This server was the heart of the whole system, as it was responsible for managing users, processing transactions, and sending notifications. This was the part of the system that had to be always online, as it was the one that would process the transactions and send notifications to the users based on the requests made by the SMS gateway.\r\n\r\n![Celeris Backend Architecture](/blog-assets/celeris/upi_server.jpg)\r\n\r\n> All of the code snippets being discussed in this section are available on the [GitHub repository](https://github.com/celeris-schnell/backend) of the Celeris backend.\r\n\r\n#### SMS Parser\r\n\r\nThe SMS parser is a crucial component that extracts relevant information from incoming SMS messages. It uses regular expressions to identify the client ID, receiver ID, and amount from the message body.\r\n\r\n```python\r\n@dataclass\r\nclass SMSData:\r\n    client_id: str\r\n    receiver_id: str\r\n    amount: float\r\n\r\ndef parse_sms_message(message: str) -> Optional[SMSData]:\r\n    try:\r\n        # Split the message by the delimiter and remove any whitespace\r\n        parts = [part.strip() for part in message.split(\"|\")]\r\n\r\n        # Verify we have exactly 3 parts\r\n        if len(parts) != 3:\r\n            return None\r\n\r\n        client_id, receiver_id, amount_str = parts\r\n\r\n        # Convert amount to float and validate\r\n        amount = float(amount_str)\r\n        if amount <= 0:\r\n            return None\r\n\r\n        # Validate IDs are not empty\r\n        if not client_id or not receiver_id:\r\n            return None\r\n\r\n        return SMSData(\r\n            client_id=client_id,\r\n            receiver_id=receiver_id,\r\n            amount=amount\r\n        )\r\n\r\n    except Exception as e:\r\n        print(f\"Error parsing SMS message: {str(e)}\")\r\n        return None\r\n```\r\n\r\nThis function takes an SMS message as input and attempts to parse it into a structured `SMSData` object. It expects the message to be formatted as `client id | receiver id | amount`.\r\n\r\n- **Data Structure Definition**: The `SMSData` dataclass defines a structured format for parsed SMS payment data, containing three essential fields: `client_id` (sender), `receiver_id` (recipient), and `amount` (transaction value). This provides type safety and clear data organization for payment transactions.\r\n- **Message Format Specification**: The parser expects SMS messages in a specific pipe-delimited format: `client_id | receiver_id | amount`. This standardized format allows the SMS Gateway to send payment instructions via simple text messages that the system can reliably interpret.\r\n- **Input Validation and Parsing**: The function splits the incoming message by the pipe delimiter and strips whitespace from each component. It performs several validation checks:\r\n  - Ensures exactly three parts are present (no more, no less)\r\n  - Validates that both client and receiver IDs are non-empty strings\r\n  - Converts the amount string to a float and verifies it's positive\r\n- **Error Handling**: The entire parsing operation is wrapped in a try-catch block to handle potential exceptions like invalid number formats or unexpected message structures. If any validation fails or an exception occurs, the function returns `None` rather than crashing.\r\n- **Return Value**: On successful parsing, it returns a populated `SMSData` object containing the validated transaction details. If parsing fails for any reason, it returns `None`, allowing the calling code to handle invalid messages gracefully.\r\n\r\nThis parser enables the SMS gateway to initiate payments by sending SMS messages like `123 | 456 | 50.00`, which the system can then process as a payment request from the user with ID 123 to the user with ID 456 for 50.00 rupees. The validation ensures only properly formatted payment instructions are processed.\r\n\r\n#### Authentication\r\n\r\n> The code is not production-grade secure, and is only meant for educational purposes. It is not recommended to use this code in a production environment without proper security measures. The code can be found [here](https://github.com/celeris-schnell/backend/blob/master/auth.py).\r\n\r\nFor the authentication system in this project, we implemented a minimal `signup` and `login` flow using FastAPI and PostgreSQL. While not production-grade secure (passwords are stored in plaintext and no token-based auth is implemented), it served the project’s needs as a lightweight placeholder. There was not enough time to implement a full-fledged authentication system, but this can be easily extended in the future.\r\n\r\n###### Database Tables & Schema\r\n\r\nThis system uses two main tables:\r\n\r\n1. `auth_table`: Stores basic authentication info.\r\n\r\n   ```sql\r\n   CREATE TABLE auth_table (\r\n        id SERIAL PRIMARY KEY,\r\n        email TEXT UNIQUE NOT NULL,\r\n        password TEXT NOT NULL,\r\n        name TEXT,\r\n        phoneNumber TEXT\r\n    );\r\n   ```\r\n\r\n2. `users`: Stores user-specific metadata like balance. When a user signs up, an entry is created in both tables.\r\n\r\n   ```sql\r\n    CREATE TABLE users (\r\n        id INTEGER PRIMARY KEY REFERENCES auth_table(id),\r\n        balance NUMERIC DEFAULT 0\r\n    );\r\n   ```\r\n\r\n###### Request Models\r\n\r\n- `SignupRequest`: Accepts `email`, `password`, `name`, and `phoneNumber`\r\n- `LoginRequest`: Accepts `email` and `password`\r\n\r\nThese use Pydantic models for type validation.\r\n\r\n###### Endpoints\r\n\r\n1. `POST /auth/signup`\r\n\r\n   - Check if the email already exists.\r\n   - Insert new user into `auth_table`.\r\n   - Commit the transaction and fetch the `user_id`.\r\n   - Call `create_user(...)` to initialize the user in the `users` table (likely with default balance `0`).\r\n\r\n   ```python\r\n   create_user(user_id, 0, payload.name, payload.phoneNumber)\r\n   ```\r\n\r\n2. `POST /auth/login`\r\n\r\n   - Lookup the user by email.\r\n   - Compare passwords (plain comparison; no hashing).\r\n   - If matched, fetch the user's balance from `users` table.\r\n   - Return basic user info in the response.\r\n\r\n###### Security Disclaimer\r\n\r\nThis auth system was intentionally kept simple:\r\n\r\n- No password hashing (e.g., bcrypt)\r\n- No session management or tokens (e.g., JWT)\r\n- No rate-limiting or brute-force protection\r\n\r\n> This was just a side module for internal functionality, not meant for public production use, as during demonstration, we had to show the basic functionality of the app. In a real-world scenario, you would never store passwords in plaintext or expose sensitive user data without proper security measures.\r\n\r\n###### Utilities\r\n\r\n1. `get_db_connection()`\r\n\r\n   ```python\r\n   def get_db_connection() -> Tuple[Any, Any]:\r\n       \"\"\"Create and return a database connection and cursor\"\"\"\r\n       connection = psycopg2.connect(**DB_CONFIG)\r\n       cursor = connection.cursor()\r\n       return connection, cursor\r\n   ```\r\n\r\n   This utility loads database credentials from a `.env` file using `python-dotenv`, then establishes a PostgreSQL connection using `psycopg2`. It returns both the `connection` and the `cursor` for executing SQL queries. This keeps DB access clean and reusable across different modules.\r\n\r\n2. `create_user()`\r\n\r\n   Initializes user-specific data. This utility function inserts a new entry into the `users` table after signup. It receives the `id`, `balance`, `name`, and `phoneNumber`, opens a DB connection, and performs the insert operation.\r\n\r\n   ```python\r\n   def create_user(id: int, balance: int, name: str, phoneNumber: str):\r\n   ...\r\n   cursor.execute(\"\"\"\r\n       INSERT INTO users (id, balance, name, \"phoneNumber\")\r\n       VALUES (%s, %s, %s, %s)\r\n   \"\"\", (id, balance, name, phoneNumber))\r\n   ...\r\n   ```\r\n\r\n   It's called right after a successful signup to initialize the user's extended profile. The `users` table is used to store additional data like `balance` which isn't part of the core auth system.\r\n\r\n#### Transaction Service: Core of Celeris Payments\r\n\r\n> I will give a brief overview of the code in this section, as it is quite long and complex. The code can be found [here](https://github.com/celeris-schnell/backend/blob/master/transaction_service.py). I highly recommend reading the code to understand how it works, as it is the core of the Celeris payments system.\r\n\r\nThis module powers the **actual money flow** within the Celeris platform - checking balances, transferring money between users, recording transactions, and triggering SMS notifications after a transfer. Here's a breakdown of the key functions:\r\n\r\n1. `check_balance(client_id, amount)`\r\n\r\n   Checks whether a user has sufficient balance to make a payment.\r\n\r\n   ```python\r\n   cursor.execute(\"SELECT balance FROM users WHERE id = %s;\", (client_id,))\r\n   ```\r\n\r\n   - Returns `True` if the user has enough funds, otherwise `False`.\r\n   - Used to **validate** transactions before initiating them.\r\n\r\n2. `generate_sms(id, amount, status, typ)`\r\n\r\n   Triggers an external SMS notification by sending a request to the Celeris SMS gateway.\r\n\r\n   ```python\r\n   data = {\r\n       'phoneNumber': f\"+91{phoneNumber}\",\r\n       'message': f\"{int(amount)}|{status}|{typ}\"\r\n   }\r\n   requests.post(url, json=data)\r\n   ```\r\n\r\n   - Fetches the user’s phone number from the DB.\r\n   - Sends a structured message like `500|SUCCESS|SEND` to a the SMS gateway to send back to the user/merchant based on the type of transaction (provided by the argument `typ`). The IP address of the SMS gateway is exposed to the internet using ngrok, so that it can be accessed from anywhere. The IP address is stored in the `.env` file.\r\n   - Used for **user-facing feedback** after a transaction.\r\n\r\n3. `create_transaction(sender_id, receiver_id, amount, status)`\r\n\r\n   Records a transaction in the `transactions` table.\r\n\r\n   ```sql\r\n   INSERT INTO transactions (sender_id, receiver_id, amount, status)\r\n   ```\r\n\r\n   - Stores who paid whom, how much, and with what status (`SUCCESS`, `FAILED`, etc.).\r\n   - This is the official ledger for internal auditing.\r\n\r\n4. `update_user(sender_id, receiver_id, amount)`\r\n\r\n   Performs the actual money movement by:\r\n\r\n   1. Decreasing the sender’s balance\r\n   2. Increasing the receiver’s balance\r\n\r\n   ```sql\r\n   UPDATE users SET balance = balance - %s WHERE id = %s\r\n   UPDATE users SET balance = balance + %s WHERE id = %s\r\n   ```\r\n\r\n   - Runs both updates in a transaction block (`BEGIN` ... `COMMIT`)\r\n   - Uses `RETURNING id` to ensure both updates succeeded\r\n   - Rolls back if anything fails\r\n\r\n###### Design Notes\r\n\r\n- The use of `BEGIN` and `conn.rollback()` ensures **consistency** - either both balances change, or none do.\r\n- `generate_sms()` is **decoupled** from the DB layer, making it easy to replace or expand into richer notifications later.\r\n- All DB operations go through the centralized `get_db_connection()` utility.\r\n\r\nThis file is the **financial engine** behind the scenes, ensuring transactions are safe, logged, and traceable - even if the frontend goes offline or fails. It reflects how Celeris prioritizes atomicity and user feedback in offline-first environments.\r\n\r\n#### Celeris API: The RESTful Interface\r\n\r\nThis is the entry point for all external interactions with the Celeris backend. It exposes the REST interface that listens for sync, transaction, and admin events. The API is built using FastAPI, which provides automatic OpenAPI documentation and easy integration with the transaction service.\r\n\r\n> All of the code snippets being discussed in this section are available [here](https://github.com/celeris-schnell/backend/blob/master/app.py).\r\n\r\n###### App Initialization\r\n\r\n```python\r\napp = FastAPI(title=\"Payment API\", description=\"API for handling payments via SMS\")\r\n\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=[\"*\"],  # Allow all origins\r\n    allow_credentials=True,\r\n    allow_methods=[\"*\"],  # Allow all HTTP methods\r\n    allow_headers=[\"*\"],  # Allow all headers\r\n)\r\n\r\napp.include_router(auth_router)\r\n```\r\n\r\n- Enables CORS for all origins (useful in mobile/native dev environments).\r\n- Mounts the `auth` router for handling signups or registrations.\r\n- Defines REST endpoints to:\r\n  - Sync user data\r\n  - Process payment SMS\r\n  - Add balance (admin or debug tool)\r\n\r\n###### Sync Endpoint\r\n\r\n```python\r\n@app.post(\"/sync\")\r\n```\r\n\r\nThis endpoint is used to synchronize user data between the Celeris app and the backend server whenever the Celeris app user comes online.\r\n\r\n```python\r\n conn, cursor = get_db_connection()\r\n\r\ncursor.execute('SELECT id, name, balance, \"phoneNumber\" FROM users WHERE id = %s;', (request.id,))\r\nuser = cursor.fetchone()\r\n```\r\n\r\nFetches user details like name, balance, and phone number using the given ID. It returns a JSON response with the user’s data, which the Celeris app can use to update its local state.\r\n\r\n###### SMS Webhook Endpoint\r\n\r\n```python\r\n@app.post(\"/sms-webhook\")\r\n```\r\n\r\nThis endpoint is the core of the Celeris payment system, where the SMS gateway sends incoming payment requests. It processes the SMS data, checks balances, and initiates transactions.\r\n\r\nFlow:\r\n\r\n1. **Parse** message from `Body` using `parse_sms_message()`\r\n2. **Check** sender balance\r\n3. **If insufficient**, record the transaction and respond with `402`\r\n4. **If sufficient**, update balances atomically via `update_user`\r\n5. Log the transaction and trigger dual `generate_sms()` calls (sender + receiver)\r\n\r\nThis powers the completely **offline-first** payment UX. The Celeris app can send payment requests via SMS, and the backend processes them without needing a live internet connection. The SMS gateway acts as the bridge between the offline app and the online server.\r\n\r\n###### Add Balance Endpoint\r\n\r\n```python\r\n@app.post(\"/addbalance\")\r\n```\r\n\r\nThis endpoint is a simple admin tool to add balance to a user’s account. It accepts a JSON payload with `id` and `amount`, checks if the user exists, and updates their balance accordingly.\r\n\r\n```python\r\nconn, cursor = get_db_connection()\r\n\r\ncursor.execute(\"SELECT balance FROM users WHERE id = %s;\", (request.user_id,))\r\nuser = cursor.fetchone()\r\n...\r\ncurrent_balance = user[0]\r\nnew_balance = current_balance + request.amount\r\n\r\n# Update balance\r\ncursor.execute(\r\n    \"UPDATE users SET balance = %s WHERE id = %s;\",\r\n    (new_balance, request.user_id)\r\n)\r\n...\r\n```\r\n\r\nThis is the only endpoint that allows modifying user balances directly, which is useful for debugging or testing purposes. It should be secured in a production environment to prevent unauthorized access.\r\n\r\n#### Highlights\r\n\r\n- All exceptions are caught and handled gracefully using FastAPI’s `HTTPException`.\r\n- Uses **central DB connection** logic (`get_db_connection()`), reducing boilerplate and easing testing.\r\n- The SMS parser and notification flow are **modular**, decoupling backend from SMS gateway logic.\r\n- Acts as a **coordinator** that connects low-level transactional logic with high-level RESTful interfaces.\r\n\r\n> We expose the Celeris backend via ngrok, which allows us to access the backend from anywhere in the world. This is useful for testing and debugging purposes, as we can easily access the backend from our local machines without having to deploy it to a remote server. You can do it your way by deploying it to a remote server, or using a cloud provider like AWS, GCP, or Azure.\r\n\r\n## Celeris Database\r\n\r\nThe Celeris database is the backbone of the entire system, storing all user data, transaction history, and balances. It uses Supabase as the database provider, which is a managed PostgreSQL service that provides a RESTful API for accessing the database. This allows us to easily interact with the database from the Celeris app and the Celeris backend. This reduced our development time significantly, as we did not have to worry about setting up and managing the database ourselves. Supabase also provides a web interface for managing the database, which made it easy to visualize the data and run queries.\r\n\r\n![Supabase Database Schema](/blog-assets/celeris/celeris-database.png)\r\n\r\n#### The users table\r\n\r\nStores user profile and wallet data:\r\n\r\n- `id`: Primary key\r\n- `name`: User's name\r\n- `phoneNumber`: Used to identify users via SMS\r\n- `balance`: Current wallet balance\r\n\r\n#### The transactions table\r\n\r\nLogs all transactions between users:\r\n\r\n- `id`: Primary key\r\n- `created_at`: Timestamp of transaction\r\n- `sender_id`: Foreign key to `users.id`\r\n- `receiver_id`: Foreign key to `users.id`\r\n- `amount`: Transaction amount\r\n- `status`: Transaction status (`successful`, `failed`, `insufficient_balance`)\r\n\r\n#### The auth_table\r\n\r\nStores authentication credentials:\r\n\r\n- `id`: Primary key\r\n- `created_at`: Timestamp of registration\r\n- `email`: Login email\r\n- `password`: Password (stored in plaintext for simplicity in our case)\r\n- `name`: User's name (duplicated here for auth context)\r\n- `phoneNumber`: Used for SMS and linking with `users`\r\n\r\n#### Notes\r\n\r\n- The database is accessed via Supabase’s Postgres client and raw SQL queries.\r\n- Transactions are recorded regardless of success to maintain a full audit trail.\r\n- Phone numbers are the key link between SMS commands and user accounts.\r\n- Balance updates and transaction logs are handled atomically to maintain consistency.\r\n\r\nThis schema is designed to be small, fast, and easy to query for a single-node offline-first payment ecosystem.\r\n\r\n## Celeris App: The Offline-cum-Online Client Application\r\n\r\nThe Celeris app is the client-side application that allows users to interact with the Celeris system. It is an Android application built using Kotlin, which allows users to send and receive payments via SMS. The app is designed to be offline-first, meaning that it can work without an internet connection, and will sync with the server when the user comes online.\r\n\r\nAlthough we first thought of starting with React Native, we faced one major issue which bottlenecked the whole development: React Native does not allow you to send SMS messages directly from the app, as it requires the user to manually select the SMS app to send the message. Even Flutter did not have this feature. This was a major blocker for us, as we wanted to send SMS messages directly from the app without any user intervention. So, we decided to build the app using Kotlin, which allows us to send SMS messages directly from the app using the Android SMS APIs.\r\n\r\n![Celeris Frontend App Architecture](/blog-assets/celeris/frontend-architecture.jpg)\r\n\r\nThis architecture image for the frontend is very basic, and the app evolved a lot during the whole development process, but you can still take a look at it for reference.\r\n\r\n> It is not possible to explain the whole source code, but I will be explaining the key components of the app, and how they work together to create the Celeris system. The code can be found [here](https://github.com/celeris-schnell/frontend). I highly recommend going through the code to understand how it works, as it is the best way to learn how the app works. You can have the code open of the section I'm explaining, and follow along with the explanation.\r\n\r\n#### Libraries and Dependencies\r\n\r\n- The app uses **ConstraintLayout** and **Material Components** for UI.\r\n- **Lottie** is used for lightweight animations during transaction feedback and loading states.\r\n- **ZXing** (`com.google.zxing:core`) is used for QR code scanning functionality, allowing users to scan QR codes to initiate payments.\r\n- **Retrofit** is used for network requests to the Celeris backend, allowing the app to communicate with the server when online.\r\n\r\n#### UI Components\r\n\r\n- The app has a simple and intuitive user interface, with a bottom navigation bar that allows users to switch between different sections of the app.\r\n- It uses Material Design components to provide a consistent and modern look and feel. It uses **ConstraintLayout** for flexible and responsive layouts, ensuring the app looks good on different screen sizes and orientations.\r\n- Then, it uses **Lottie** animations to provide visual feedback during transactions and loading states.\r\n- It uses Fragment-based navigation to switch between different sections of the app instead of Activities, which allows for smoother transitions and better state management.\r\n- It uses **Android Navigation Component** for handling navigation between different screens, making it easier to manage back stack and going to previous screens.\r\n\r\n#### SQLite Database Helpers\r\n\r\nThe app uses SQLite to store user information and auth information locally. This allows the app to function offline and sync with the server when the user comes online. This is not a secure way to store sensitive information, but it is sufficient for the purpose of this project. The SQLite schema and access logic are encapsulated in helper classes.\r\n\r\n##### AuthDatabaseHelper\r\n\r\n`AuthDatabaseHelper` handles authentication-related data, primarily storing the currently logged-in user's metadata. It inherits from `SQLiteOpenHelper` and manages a single table: `users`.\r\n\r\n**Table Structure**\r\n\r\n```sql\r\nCREATE TABLE users (\r\n    id INTEGER PRIMARY KEY,\r\n    name TEXT,\r\n    balance INTEGER,\r\n    email TEXT,\r\n    phoneNumber TEXT\r\n);\r\n```\r\n\r\n**Key Methods**:\r\n\r\n- `onCreate()` / `onUpgrade()`: Standard lifecycle methods for setting up and refreshing the database schema.\r\n- `checkDatabaseExists(Context): Boolean`: Utility to verify whether the database file exists. Useful for conditional flows on first install or logout.\r\n- `saveUser(...)`: Inserts a new user row into the table.\r\n- `isUserLoggedIn(): Boolean`: Checks if any user data exists, implying a logged-in state.\r\n- `getUser(): User?`: Retrieves the stored user as a Kotlin model object. Returns null if no user exists.\r\n- `setBalance(balance: Int)`: Updates the balance column for the logged-in user.\r\n- `logoutUser()`: Clears the users table, effectively logging out the user.\r\n\r\n##### QR Code Database Helper\r\n\r\nThe `DatabaseHelper` class is a dedicated `SQLiteOpenHelper` used for **persisting merchant QR codes locally**. This is especially important in offline mode, allowing merchants to display their QR code without needing a network call.\r\n\r\n**Table Structure**\r\n\r\n```sql\r\nCREATE TABLE merchant_qr (\r\n    merchant_id TEXT PRIMARY KEY,\r\n    qr_code BLOB\r\n);\r\n```\r\n\r\n- `merchant_id`: Unique identifier for the merchant (used as the primary key).\r\n- `qr_code`: QR code image stored as a BLOB.\r\n\r\n**Key Methods**:\r\n\r\n- `onCreate()` / `onUpgrade()`: Handles initial schema creation and upgrading. Drops the table and recreates it on version change.\r\n\r\n- `saveQRCode(merchantId: String, qrCode: Bitmap)`\r\n\r\n  - Serializes the `Bitmap` to a PNG byte array.\r\n  - Uses `db.replace()` to insert or update the QR code for the given merchant.\r\n  - Enables idempotent writes.\r\n\r\n- `getQRCode(merchantId: String): Bitmap?`\r\n\r\n  - Reads the `BLOB` data from the database for the given merchant ID.\r\n  - Decodes and returns it as a `Bitmap` object.\r\n  - Returns `null` if no entry exists.\r\n\r\n**Notes**:\r\n\r\n- Efficient for quick QR retrieval in merchant dashboards or payment receive flows.\r\n- QR codes are stored in binary to minimize transformation overhead at runtime.\r\n\r\nThis database helper is crucial for the offline-first design of the Celeris app, allowing merchants to continue accepting payments even without an internet connection. It ensures that QR codes are readily available and can be displayed instantly when needed.\r\n\r\n#### User Model\r\n\r\nThe `User` class is a simple data model representing an authenticated user within the Celeris app. It is used primarily for local storage via SQLite (`AuthDatabaseHelper`) and in-memory user state management.\r\n\r\n**Fields**\r\n\r\n- id (`int`): Unique identifier for the user (same as the Supabase user ID).\r\n- name (`String`): User's display name.\r\n- balance (`int`): Current wallet balance (in rupees).\r\n- email (`String`): Registered email address.\r\n- phoneNumber (`String`): Registered mobile number.\r\n\r\n**Constructors**\r\n\r\n```java\r\nUser(int id, String name, int balance, String email, String phoneNumber)\r\n```\r\n\r\nInitializes a user object with all required fields.\r\n\r\n**Getters**\r\n\r\n`getId()`, `getName()`, `getBalance()`, `getEmail()`, `getPhoneNumber()`\r\n\r\n**Setters**\r\n\r\n`setId(int id)`, `setName(String name)`, `setBalance(int balance)`, `setEmail(String email)`, `setPhoneNumber(String phoneNumber)`\r\n\r\n**Notes**\r\n\r\n- Primarily used as a POJO (Plain Old Java Object) for local SQLite interactions.\r\n- Designed with mutability in mind for balance updates and session management.\r\n\r\n#### MainActivity\r\n\r\n`MainActivity` is designed solely to redirect users based on their authentication status. It acts as the first screen that appears when the app is launched.\r\n\r\n###### Logic Breakdown\r\n\r\n```kotlin\r\nval dbHelper = AuthDatabaseHelper(this)\r\nif (dbHelper.isUserLoggedIn()) {\r\n    val intent = Intent(this, SecureActivity::class.java)\r\n    startActivity(intent)\r\n    finish()\r\n} else {\r\n    val intent = Intent(this, AuthActivity::class.java)\r\n    startActivity(intent)\r\n    finish()\r\n}\r\n```\r\n\r\n- If `isUserLoggedIn()`:\r\n  - Uses the local SQLite DB (`AuthDatabaseHelper`) to check for a saved user session.\r\n  - If a user **exists in the local DB**, they are assumed to be logged in **offline** or **persistently** and redirected to:\r\n    - `SecureActivity` (main post-login dashboard)\r\n- If not:\r\n  - User is routed to `AuthActivity`, where they can log in or sign up.\r\n\r\n###### Authentication Flow Pipeline\r\n\r\n```txt\r\n         ┌────────────┐\r\n         │MainActivity│\r\n         └─────┬──────┘\r\n               │\r\n     ┌─────────▼─────────┐\r\n     │Check Local DB for  │\r\n     │isUserLoggedIn()    │\r\n     └─────────┬──────────┘\r\n               │\r\n     ┌─────────▼─────────┐\r\n     │      Yes          │────────────▶ SecureActivity\r\n     │(Session exists)   │\r\n     └─────────┬─────────┘\r\n               │\r\n     ┌─────────▼─────────┐\r\n     │      No           │────────────▶ AuthActivity\r\n     │(First time / out) │\r\n     └───────────────────┘\r\n```\r\n\r\n###### Integration Perspective\r\n\r\n- `MainActivity` provides clean isolation of authentication routing logic.\r\n- It avoids unnecessary logic duplication in `AuthActivity` or `SecureActivity`.\r\n- Supports **offline-first principles** by trusting persisted local session data.\r\n\r\n#### Authentication Flow\r\n\r\nThe authentication system in Celeris is designed to support both offline access and server-based verification. This hybrid approach is achieved using Android Fragments, Retrofit for network operations, and SQLite for local data persistence.\r\n\r\n###### AuthActivity\r\n\r\n- `AuthActivity` is the launcher activity for unauthenticated users.\r\n- It loads the layout `activity_auth.xml` which contains a fragment container (`R.id.auth_main`).\r\n- On first launch (`savedInstanceState == null`), it loads the `Login` fragment by default.\r\n- The `enableEdgeToEdge()` and window inset handling ensure modern UI compatibility across devices.\r\n\r\n###### Login Flow\r\n\r\nUI: `Login` fragment\r\n\r\n- Collects email and password inputs.\r\n- On \"Login\" click:\r\n  - Validates fields.\r\n  - Sends a `LoginRequest` to the server via Retrofit.\r\n  - On success: - Receives a `LoginResponse` containing user information. - Stores user data using `AuthDatabaseHelper.saveUser(...)`. - Navigates to `SecureActivity` (the main authenticated screen).\r\n  - On failure: - Shows appropriate `Toast` for failure or network errors.\r\n\r\n**Key Detail:**\r\n\r\n- Local user persistence means that after the first login, the user can be identified and allowed offline access.\r\n- `AuthDatabaseHelper.isUserLoggedIn()` is used to detect if a session exists locally.\r\n\r\n###### Signup Flow\r\n\r\nUI: `SignUp` Fragment\r\n\r\n- Collects email, password, name, and phone number.\r\n- On \"Sign Up\" click:\r\n  - Validates all fields.\r\n  - Sends a `SignupRequest` to the server.\r\n  - On success:\r\n    - User is created in the backend.\r\n    - Their info is immediately stored locally with a default balance of 0, and the same in the database.\r\n    - Navigates to `SecureActivity`.\r\n  - On failure:\r\n    - Shows a `Toast` with error code or message.\r\n\r\n###### Local Persistence: AuthDatabaseHelper\r\n\r\n- Used by both `Login` and `SignUp` fragments.\r\n- Handles creation and management of a `users` table in the `authdb` SQLite database.\r\n- Provides methods:\r\n  - `saveUser(...)`: Saves user info.\r\n  - `getUser()`: Retrieves the current user.\r\n  - `isUserLoggedIn()`: Checks if any user data exists.\r\n  - `logoutUser()`: Clears the local user record.\r\n  - `setBalance(int)`: Updates balance offline.\r\n\r\n> Note: The SQLite method used here is not secure for storing sensitive info (like tokens or passwords), but is acceptable in this prototype where actual secrets are not persisted locally.\r\n\r\n###### Navigation between Login & Signup\r\n\r\n- Both `Login` and `SignUp` fragments can navigate to each other using Fragment transactions.\r\n- This avoids the need for separate activities and enables a smoother, single-activity navigation experience.\r\n\r\n###### Final Notes\r\n\r\n- Once authenticated, users are redirected to `SecureActivity`, which represents the protected area of the app.\r\n- The SQLite-backed persistence allows the app to determine login status and user identity even without network access - a key requirement for offline-first design.\r\n\r\n#### Post Authentication: SecureActivity\r\n\r\nOnce a user is successfully authenticated (via login or sign-up), the app launches the `SecureActivity`, which acts as the main dashboard for authenticated users.\r\n\r\n###### Authentication Check (Offline-aware)\r\n\r\n```kotlin\r\nAuthDatabaseHelper(this).apply {\r\n    if (!isUserLoggedIn()) {\r\n        finish()\r\n    }\r\n}\r\n```\r\n\r\n- Before proceeding, the activity checks whether a user is saved in the local `authdb` SQLite DB.\r\n- If no user exists, `SecureActivity` finishes immediately — user is effectively \"logged out\".\r\n\r\n> This allows offline persistence of authentication without relying on JWTs or tokens.\r\n\r\n###### Network Monitoring with NetworkMonitor\r\n\r\n```kotlin\r\nnetworkMonitor = NetworkMonitor(this) { isOnline, justCameOnline ->\r\n    if (justCameOnline) callApi()\r\n}\r\n```\r\n\r\n- `NetworkMonitor` is a utility class that monitors connectivity changes.\r\n- The lambda `(isOnline, justCameOnline)` is triggered on connectivity updates:\r\n  - If the device just came back online, `callApi()` is triggered.\r\n  - Here, it's a placeholder showing a `Toast`, but in the real app this is where you'd:\r\n    - Sync pending transactions.\r\n    - Refresh balance.\r\n    - Fetch latest updates from the backend.\r\n- It is lifecycle-aware:\r\n  - Starts monitoring in `onResume()`\r\n  - Stops in `onPause()`\r\n\r\n#### Profile Page\r\n\r\nDisplays the authenticated user's profile, including their:\r\n\r\n- Name\r\n- Contact info\r\n- Unique user ID\r\n- QR code for identification\r\n- Logout functionality\r\n\r\n###### User Info from Local DB\r\n\r\n```kotlin\r\nAuthDatabaseHelper(requireContext()).apply {\r\n    binding.username.text = user.name\r\n    binding.contact.text = user.phoneNumber\r\n    binding.userid.text = user.id.toString()\r\n}\r\n```\r\n\r\n- Pulls the currently logged-in user from the local **AuthDatabaseHelper**.\r\n- Efficiently sets it into the UI with:\r\n  - `username`\r\n  - `contact`\r\n  - `userid`\r\n\r\n###### QR Code Handling\r\n\r\n```kotlin\r\nvar qrCode: Bitmap? = dbHelper?.getQRCode(binding.userid.text.toString())\r\nif (qrCode == null) {\r\n    qrCode = QRCodeUtils.generateQRCode(binding.userid.text.toString())\r\n    dbHelper?.saveQRCode(binding.userid.text.toString(), qrCode)\r\n}\r\nqrCodeImageView?.setImageBitmap(qrCode)\r\n```\r\n\r\n- Uses `DatabaseHelper` to **cache** and retrieve the user's QR code locally.\r\n- If missing, it generates a new one using `QRCodeUtils` and saves it.\r\n- Reduces repeated generation for efficiency - QR codes are static for a user.\r\n\r\n###### Logout Functionality\r\n\r\n```kotlin\r\nbinding.logoutButton.setOnClickListener {\r\n    performLogout()\r\n}\r\n```\r\n\r\n- Calls `logoutUser()` from `AuthDatabaseHelper` to delete the session.\r\n- Navigates cleanly to `AuthActivity`, ensuring:\r\n  - Task stack is cleared.\r\n  - No back navigation to secure areas (`Intent.FLAG_ACTIVITY_CLEAR_TASK`).\r\n\r\nFlow:\r\n\r\n```txt\r\nProfilePage (Fragment under SecureActivity)\r\n│\r\n├── Displays: user.name, user.phoneNumber, user.id\r\n├── QR Code: cached or generated → shown in ImageView\r\n├── Logout Button:\r\n│    └─> Clears DB via AuthDatabaseHelper\r\n│    └─> Redirects to AuthActivity (login/signup)\r\n```\r\n\r\n#### Scan and Pay Flow\r\n\r\nThe `ScanPayFragment` is responsible for scanning merchant QR codes using the device camera and decoding them in real time. This QR code typically contains the merchant's client ID, which is used to initiate a money transfer.\r\n\r\n> This part will be highly technical, as it involves CameraX for real-time QR code scanning and ZXing for decoding. You can skip this part if you are not interested in the technical details, but I highly recommend going through it to understand how the app works.\r\n\r\n###### Camera Initialization\r\n\r\nWhen the fragment is created, it checks for the `CAMERA` permission:\r\n\r\n```kotlin\r\nif (allPermissionsGranted()) {\r\n    startCamera()\r\n} else {\r\n    ActivityCompat.requestPermissions(...)\r\n}\r\n```\r\n\r\nIf permission is granted, `startCamera()` sets up the CameraX pipeline.\r\n\r\n###### CameraX Setup\r\n\r\nWe configure two CameraX use cases:\r\n\r\n- **Preview**: Renders the live camera feed in a `PreviewView`.\r\n- **ImageAnalysis**: Processes frames to detect and decode QR codes.\r\n\r\n```kotlin\r\nval preview = Preview.Builder().build()\r\npreview.setSurfaceProvider(previewView.surfaceProvider)\r\n```\r\n\r\n```kotlin\r\nval imageAnalysis = ImageAnalysis.Builder()\r\n    .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)\r\n    .build()\r\n    .also {\r\n        it.setAnalyzer(executor, QRCodeAnalyzer { result -> ... })\r\n    }\r\n\r\n```\r\n\r\nThese use cases are bound to the fragment lifecycle using:\r\n\r\n```kotlin\r\ncameraProvider.bindToLifecycle(\r\n    viewLifecycleOwner,\r\n    CameraSelector.DEFAULT_BACK_CAMERA,\r\n    preview,\r\n    imageAnalysis\r\n)\r\n```\r\n\r\n###### QR Code Decoding\r\n\r\n`CameraX` delivers frames in `ImageProxy` format (`YUV_420_888`). We extract the Y-plane (luminance) and convert it into `PlanarYUVLuminanceSource`, which ZXing requires for decoding.\r\n\r\n```kotlin\r\nval luminanceSource = imageProxy.toLuminanceSource()\r\nval binaryBitmap = BinaryBitmap(HybridBinarizer(luminanceSource))\r\nval result = MultiFormatReader().decode(binaryBitmap)\r\n```\r\n\r\nIf decoding succeeds, we extract the text (client ID) from the QR code.\r\n\r\n###### Post-Scan Navigation and Storage\r\n\r\nOnce the QR code is decoded:\r\n\r\n- We persist the scanned `client_id` using Jetpack DataStore.\r\n- We navigate to the `SendMoney` fragment for the next step in the transaction.\r\n\r\n```kotlin\r\nlifecycleScope.launch {\r\n    saveClientIdToDataStore(result.text)\r\n    Navigation.findNavController(...).navigate(R.id.action_scanPayFragment_to_sendMoney)\r\n}\r\n```\r\n\r\n###### Data Persistence\r\n\r\nData is stored locally using Jetpack DataStore with the `stringPreferencesKey(\"client_id\")`:\r\n\r\n```kotlin\r\nrequireContext().dataStore.edit { preferences ->\r\n    preferences[clientIdKey] = clientId\r\n}\r\n```\r\n\r\nThis component is used during customer-to-merchant payments. The merchant displays a static QR containing their client ID. The customer scans it and is redirected to the payment screen with the merchant ID preloaded, ready for an offline SMS-based payment.\r\n\r\n#### Send Money Flow\r\n\r\nAfter the user scans a merchant QR code, they are redirected to the `SendMoney` fragment. This screen is responsible for composing and sending the payment information via SMS to the offline Celeris payment server. They can directly come here as well without scanning a QR code, by entering the merchant's client ID manually.\r\n\r\n###### Retrieving Scanned Merchant ID\r\n\r\nWhen the fragment is initialized, it uses Jetpack DataStore to retrieve the previously scanned merchant `client_id`:\r\n\r\n```kotlin\r\nlifecycleScope.launch {\r\n    val clientId = getClientIdFromDataStore()\r\n    binding.merchantid.setText(clientId)\r\n}\r\n```\r\n\r\n`getClientIdFromDataStore()` reads the value from local persistent storage:\r\n\r\n```kotlin\r\nval preferences = requireContext().dataStore.data.first()\r\nreturn preferences[clientIdKey] ?: \"\"\r\n```\r\n\r\nThis auto-fills the merchant ID field on the UI, reducing manual input and avoiding errors.\r\n\r\n###### Loading User Information\r\n\r\nThe app uses the `AuthDatabaseHelper` to access the user data. When the fragment loads, the user’s current balance is shown on screen:\r\n\r\n```kotlin\r\nbinding.balance.text = user.balance.toString()\r\n```\r\n\r\n###### Composing the Payment SMS\r\n\r\nWhen the user clicks the \"Pay\" button, the following steps occur:\r\n\r\n- The app constructs a raw message containing:\r\n\r\n  ```txt\r\n  <sender_id>|<receiver_id>|<amount>\r\n  ```\r\n\r\n- This message is then sent as an SMS using Android’s `SmsManager`:\r\n\r\n  ```kotlin\r\n  smsManager.sendTextMessage(\"<sms_gateway_phone_number>\", null, msg, null, null)\r\n  ```\r\n\r\n###### Summary of the Flow\r\n\r\n1. The user scans a merchant QR → `client_id` is saved.\r\n2. In `SendMoney`, this ID is fetched and pre-filled.\r\n3. The user enters the amount and presses \"Pay\".\r\n4. An SMS containing user ID, merchant ID, and amount is sent to the SMS gateway.\r\n\r\nThis flow supports **offline payments** in rural or low-connectivity environments by relying solely on SMS to transfer transactional data between devices and backend services.\r\n\r\n#### Success Activity\r\n\r\nThe SuccessActivity is responsible for:\r\n\r\n- Showing confirmation that a transaction has completed.\r\n- Updating the user's local balance based on the transaction direction (sent/received).\r\n- Displaying the appropriate confirmation screen (`SentPage` or `ReceivePage`).\r\n\r\n###### Receiving Transaction Metadata via Intent\r\n\r\nThis activity expects the following data to be passed in via `Intent` extras:\r\n\r\n- `type`: A `String` which indicates whether the transaction was **\"sent\"** or **\"recieved\"**.\r\n- `amount`: An `Int` representing the amount transferred.\r\n\r\n```kotlin\r\nval amount = intent.getIntExtra(\"amount\", 0)\r\nval type = intent.getStringExtra(\"type\")\r\n```\r\n\r\nThis information is attached by the BroadcastReceiver that listens for incoming SMS messages. It determines the transaction type based on the content of the SMS and passes it to this activity.\r\n\r\n###### Displaying Confirmation UI\r\n\r\nThe layout `activity_success` contains a container where the result fragment is dynamically injected.\r\n\r\nBased on the transaction type:\r\n\r\n- If sent, `SentPage` fragment is shown.\r\n- If recieved, `ReceivePage` fragment is shown.\r\n\r\n```kotlin\r\nif (type == \"sent\") {\r\n    supportFragmentManager.beginTransaction().replace(R.id.main, SentPage()).commit()\r\n} else if (type == \"recieved\") {\r\n    supportFragmentManager.beginTransaction().replace(R.id.main, ReceivePage()).commit()\r\n}\r\n```\r\n\r\n###### Updating User Balance in Local Storage\r\n\r\nAfter confirming the direction of the transaction, the user's balance is updated accordingly using a local helper (`AuthDatabaseHelper`):\r\n\r\n```kotlin\r\nval db = AuthDatabaseHelper(this)\r\nif (type == \"sent\") {\r\n    db.setBalance(db.user.balance - amount)\r\n} else if (type == \"recieved\") {\r\n    db.setBalance(db.user.balance + amount)\r\n}\r\n```\r\n\r\nThis operation is completely offline.\r\n\r\n#### Retrofit Client Utility\r\n\r\nThe `RetrofitClient` is a singleton object that provides a centralized HTTP client for all network operations in the Celeris app. It implements the singleton pattern using Kotlin's `object` declaration and lazy initialization to ensure efficient resource usage and consistent API communication.\r\n\r\n```kotlin\r\nobject RetrofitClient {\r\n    private const val BASE_URL = \"https://9997-2401-4900-6329-f-4f00-2453-c5e2-f72f.ngrok-free.app/\"\r\n    val instance: AuthApi by lazy {\r\n        Retrofit.Builder()\r\n            .baseUrl(BASE_URL)\r\n            .addConverterFactory(GsonConverterFactory.create())\r\n            .build()\r\n            .create(AuthApi::class.java)\r\n    }\r\n}\r\n```\r\n\r\nThe `RetrofitClient` serves as the gateway between the Android app and the Celeris backend server. When users perform authentication operations (login/signup), the app uses this client to send HTTP requests to the FastAPI endpoints. The responses are automatically converted to Kotlin objects, which are then processed by the authentication fragments.\r\n\r\n#### AuthApi Utility\r\n\r\nThe `AuthApi` interface defines the contract for authentication-related HTTP operations using Retrofit's annotation-based approach. It serves as a type-safe wrapper around the backend authentication endpoints.\r\n\r\n```kotlin\r\ninterface AuthApi {\r\n    @POST(\"/auth/signup\")\r\n    fun signup(@Body request: SignupRequest): Call<SignupResponse>\r\n\r\n    @POST(\"/auth/login\")\r\n    fun login(@Body request: LoginRequest): Call<LoginResponse>\r\n}\r\n```\r\n\r\n###### Endpoints\r\n\r\n- `POST /auth/signup`: Handles user registration by accepting a `SignupRequest` object containing email, password, name, and phone number. The `@Body` annotation tells Retrofit to serialize the request object as JSON in the HTTP request body.\r\n- `POST /auth/login`: Manages user authentication by accepting a `LoginRequest` with email and password credentials. Both endpoints return `Call<T>` objects, enabling asynchronous execution with built-in error handling.\r\n\r\n###### Backend Integration\r\n\r\nThe AuthApi directly corresponds to the authentication endpoints in the Celeris FastAPI backend:\r\n\r\n```python\r\n# Backend equivalent (FastAPI)\r\n@app.post(\"/auth/signup\")\r\nasync def signup(payload: SignupRequest):\r\n    # User creation logic\r\n\r\n@app.post(\"/auth/login\")\r\nasync def login(payload: LoginRequest):\r\n    # Authentication logic\r\n```\r\n\r\nThis one-to-one mapping ensures consistency between client and server API contracts, reducing integration bugs and maintaining clear separation of concerns.\r\n\r\n#### DataUtils: Persistent Key-Value Storage\r\n\r\nThe `DataUtils` file provides a Kotlin extension property that integrates Jetpack DataStore into the Android Context, enabling type-safe, asynchronous key-value storage throughout the app.\r\n\r\n```kotlin\r\nval Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = \"lmaodead\")\r\n```\r\n\r\nThe DataStore is primarily used for storing temporary transaction data, particularly in the QR code scanning flow.\r\n\r\n#### QRCodeUtils Utility\r\n\r\nThe `QRCodeUtils` class is a Java-based utility in the Celeris Android app responsible for generating QR codes, specifically used for merchant identification in customer-to-merchant (C2M) payment flows.\r\n\r\n###### Purpose\r\n\r\nThis utility generates a static QR code that encodes the merchant's unique `client_id`. It is typically displayed on the merchant’s device or printed, enabling customers to scan and initiate payments offline via SMS.\r\n\r\n###### Implementation Breakdown\r\n\r\n```java\r\npublic class QRCodeUtils {\r\n    public static Bitmap generateQRCode(String merchantId) {\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nThis utility exposes a single static method - `generateQRCode(String merchantId)` - which accepts a merchant ID string and returns a `Bitmap` object representing the generated QR code.\r\n\r\n###### QR Code Generation Logic\r\n\r\nThe utility uses the **ZXing (Zebra Crossing)** library to generate QR codes. Here's the full breakdown of the process:\r\n\r\n1. **Encode the merchant ID into a QR code matrix**\r\n\r\n   ```java\r\n   QRCodeWriter writer = new QRCodeWriter();\r\n    BitMatrix bitMatrix = writer.encode(merchantId, BarcodeFormat.QR_CODE, 512, 512);\r\n   ```\r\n\r\n   - `QRCodeWriter` is a ZXing class that generates QR codes.\r\n   - `merchantId` is encoded into a `BitMatrix` using the `BarcodeFormat.QR_CODE` format.\r\n   - The dimensions of the QR are hardcoded to `512x512` pixels, ensuring high visual fidelity for scanning.\r\n\r\n2. **Render the BitMatrix to a Bitmap**\r\n\r\n   ```java\r\n   Bitmap bmp = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);\r\n   ```\r\n\r\n   - A `Bitmap` is initialized to hold the visual QR code.\r\n   - `RGB_565` format is used for memory-efficient bitmap creation (uses 2 bytes per pixel).\r\n\r\n3. **Paint the QR pixels manually**\r\n\r\n   ```java\r\n   for (int x = 0; x < width; x++) {\r\n       for (int y = 0; y < height; y++) {\r\n           bmp.setPixel(x, y, bitMatrix.get(x, y) ? Color.BLACK : Color.WHITE);\r\n       }\r\n   }\r\n   ```\r\n\r\n   - The nested loops iterate over every pixel in the matrix.\r\n   - The pixel is painted black if the bit at that location is `true`, else it's painted **white**.\r\n   - This ensures precise control over QR code rendering, which is crucial for scanner compatibility.\r\n\r\n4. **Error Handling**\r\n\r\n   ```java\r\n   catch (WriterException e) {\r\n        e.printStackTrace();\r\n    }\r\n   ```\r\n\r\n   If the QR code encoding fails (due to unsupported input or internal ZXing errors), the method logs the stack trace and returns `null`.\r\n\r\n###### Usage Context in Celeris\r\n\r\nThe `QRCodeUtils.generateQRCode()` function is used when merchants log in and land on their home screen. The app auto-generates a QR code with their `client_id` embedded:\r\n\r\n```kotlin\r\nval qrBitmap = QRCodeUtils.generateQRCode(merchantId)\r\nqrImageView.setImageBitmap(qrBitmap)\r\n```\r\n\r\nThis bitmap is then rendered into an `ImageView`, turning the app into a **static offline payment receiver** as well. In areas with low or no internet connectivity, having a **static QR code** that's easily scannable by feature-rich offline Android devices is vital. This QR-based approach forms the backbone of Celeris’ offline-first vision, enabling seamless payments without a traditional internet layer.\r\n\r\n#### NetworkMonitor Utility\r\n\r\nThe `NetworkMonitor` class is a lightweight, lifecycle-aware network state observer in the Celeris Android application. It actively listens for changes in network connectivity and notifies the app about:\r\n\r\n- Whether the device is online or offline.\r\n- Whether the device just came online after being offline.\r\n\r\nThis enables Celeris to **reactively adjust UI/UX** or trigger sync logic when connectivity status changes which is crucial in an app built to thrive in both connected and offline environments.\r\n\r\n###### Constructor Parameters\r\n\r\n```kotlin\r\nclass NetworkMonitor(\r\n    context: Context,\r\n    private val onNetworkChange: (isOnline: Boolean, justCameOnline: Boolean) -> Unit\r\n)\r\n```\r\n\r\n- `context`: Needed to obtain the system `ConnectivityManager`.\r\n- `onNetworkChange`: A callback lambda that is triggered whenever the device's connectivity state changes.\r\n\r\n**Internals**\r\n\r\n1. ConnectivityManager Reference\r\n\r\n   ```kotlin\r\n   private val connectivityManager =\r\n       context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n   ```\r\n\r\n   Fetches the system-level connectivity service for managing network state.\r\n\r\n2. Online State Memory\r\n\r\n   ```kotlin\r\n   private var wasOnline = false\r\n   ```\r\n\r\n   Stores the last known state of connectivity to detect state transitions (e.g., offline → online).\r\n\r\n3. NetworkCallback\r\n\r\n   ```kotlin\r\n   private val networkCallback = object : ConnectivityManager.NetworkCallback() {\r\n       ...\r\n   }\r\n   ```\r\n\r\n   Implements two key override methods:\r\n\r\n   - **onAvailable**:\r\n\r\n     Triggered when a new network becomes available.\r\n\r\n     ```kotlin\r\n     override fun onAvailable(network: Network) {\r\n         val isOnline = isCurrentlyOnline()\r\n         if (!wasOnline && isOnline) {\r\n             onNetworkChange(true, true) // Just came online\r\n         } else {\r\n             onNetworkChange(true, false)\r\n         }\r\n         wasOnline = true\r\n     }\r\n     ```\r\n\r\n     - Double-checks if the network is truly online using `isCurrentlyOnline()`.\r\n     - Differentiates between continuous online state and transition from offline.\r\n\r\n   - **onLost**:\r\n\r\n     Triggered when the network connection is lost.\r\n\r\n     ```kotlin\r\n     override fun onLost(network: Network) {\r\n         onNetworkChange(false, false)\r\n         wasOnline = false\r\n     }\r\n     ```\r\n\r\n     - Immediately fires the callback with `isOnline = false`.\r\n\r\n###### Start & Stop Listening\r\n\r\n```kotlin\r\nfun start() {\r\n    val request = NetworkRequest.Builder()\r\n        .addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)\r\n        .build()\r\n    connectivityManager.registerNetworkCallback(request, networkCallback)\r\n    wasOnline = isCurrentlyOnline()\r\n}\r\n```\r\n\r\n- Registers the network callback using a `NetworkRequest` that filters for internet-capable connections.\r\n- Sets the initial state of `wasOnline`.\r\n\r\n```kotlin\r\nfun stop() {\r\n    try {\r\n        connectivityManager.unregisterNetworkCallback(networkCallback)\r\n    } catch (_: Exception) {}\r\n}\r\n```\r\n\r\n- Unregisters the callback.\r\n- Fails silently in case the callback wasn’t registered (e.g., app exit or lifecycle mismatch).\r\n\r\n###### Checking Network Status\r\n\r\n```kotlin\r\nfun isCurrentlyOnline(): Boolean {\r\n    val network = connectivityManager.activeNetwork ?: return false\r\n    val capabilities = connectivityManager.getNetworkCapabilities(network) ?: return false\r\n    return capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET) &&\r\n            capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED)\r\n}\r\n```\r\n\r\nThis function performs a deep connectivity check:\r\n\r\n- Confirms the device has an active network.\r\n- Ensures it has internet access (`NET_CAPABILITY_INTERNET`) and is validated by Android's network validation system (`NET_CAPABILITY_VALIDATED`).\r\n- This guards against false positives (e.g., captive portals or no internet access despite Wi-Fi connection).\r\n\r\n###### Use Case in Celeris\r\n\r\nThe NetworkMonitor class is used in contexts where:\r\n\r\n- Offline-first UI behavior is essential.\r\n- We need to sync data when the device comes back online.\r\n- The app needs to adjust its behavior based on connectivity (e.g., showing offline banners, disabling online features).\r\n\r\n#### SMSReceiver\r\n\r\nThe `SMSReceiver` class is a `BroadcastReceiver` responsible for intercepting incoming SMS messages from the Celeris payment server. It processes these messages to determine the result of a transaction (success or failure) and immediately redirects the user to the appropriate result screen (`SuccessActivity` or `ErrorActivity`).\r\n\r\nThis receiver is essential to the **offline-first architecture** of Celeris, allowing the system to process and reflect transaction results **without requiring an internet connection**.\r\n\r\n###### Overview of Responsibilities\r\n\r\n- Listens for incoming SMS broadcasts.\r\n- Filters messages from the known Celeris server number.\r\n- Parses transaction metadata from the message body.\r\n- Redirects the user to either a success or error screen based on transaction outcome.\r\n\r\n###### Listening for Incoming SMS\r\n\r\n```java\r\n@Override\r\npublic void onReceive(Context context, Intent intent) {\r\n    if (Objects.equals(intent.getAction(), \"android.provider.Telephony.SMS_RECEIVED\")) {\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nThe receiver listens explicitly for the `SMS_RECEIVED` broadcast action using an intent filter in `AndroidManifest.xml`.\r\n\r\n###### Parsing the SMS Payload\r\n\r\n```java\r\nObject[] pdus = (Object[]) bundle.get(\"pdus\");\r\nString format = bundle.getString(\"format\");\r\nSmsMessage.createFromPdu((byte[]) pdu, format);\r\n```\r\n\r\n- Extracts the raw SMS data units (`pdus`) from the incoming broadcast.\r\n- Uses the `SmsMessage.createFromPdu()` API to decode each SMS message from its raw bytes.\r\n- Supports **multi-part SMS** handling (if a message spans multiple segments).\r\n\r\n###### Filtering Messages from the Celeris Gateway\r\n\r\n```java\r\nif (sender != null && sender.equals(TARGET_PHONE_NUMBER)) {\r\n    ...\r\n}\r\n```\r\n\r\n- Only processes messages sent from the **designated Celeris SMS gateway number**.\r\n- Ensures third-party or irrelevant SMS messages are ignored.\r\n\r\n###### Processing the Message Content\r\n\r\n```java\r\nprivate void processSMS(Context context, String sender, String message) {\r\n    String[] messages = message.split(\"\\\\|\");\r\n    int amount = Integer.parseInt(messages[0]);\r\n    String status = messages[1];\r\n    String type = messages[2];\r\n}\r\n```\r\n\r\nThe SMS is expected to follow a strict format:\r\n\r\n```txt\r\n<amount>|<status>|<type>\r\n```\r\n\r\n- `amount`: The amount of money sent or received.\r\n- `status`: `\"successful\"`, `\"unsuccessful\"`, or `\"failed\"`.\r\n- `type`: `\"sent\"` or `\"received\"` - indicates transaction direction.\r\n\r\n###### Redirecting to Transaction Outcome Screen\r\n\r\nDepending on the parsed status, the receiver launches the appropriate activity:\r\n\r\n**Failure Case:**\r\n\r\n```java\r\nif (Objects.equals(status, \"unsuccessful\") || Objects.equals(status, \"failed\")) {\r\n    Intent intent = new Intent(context, ErrorActivity.class);\r\n    ...\r\n    context.startActivity(intent);\r\n}\r\n```\r\n\r\n**Success Case:**\r\n\r\n```java\r\nelse if (Objects.equals(status, \"successful\")) {\r\n    Intent intent = new Intent(context, SuccessActivity.class);\r\n    ...\r\n    context.startActivity(intent);\r\n}\r\n```\r\n\r\nBoth activities receive the following via `Intent` extras:\r\n\r\n- `amount`: To display the transaction value.\r\n- `type`: To determine which UI to show (send or receive page).\r\n\r\n```java\r\nintent.putExtra(\"amount\", amount);\r\nintent.putExtra(\"type\", type);\r\nintent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n```\r\n\r\nThe `FLAG_ACTIVITY_NEW_TASK` flag ensures the activity launches properly from a non-activity context.\r\n\r\n###### Offline First Impact\r\n\r\nThis class is a cornerstone of **offline transactional integrity** in the Celeris ecosystem. Even if users have **zero internet access**, they are:\r\n\r\n- Notified of transaction status instantly via SMS.\r\n- Able to see real-time confirmation/error screens.\r\n- Kept in sync with their offline wallet balance (via `SuccessActivity` updates).\r\n\r\n## Un-technical Stuff: Team Coordination and Project Management\r\n\r\nThe Celeris project was developed by a team of 4 members, each contributing to different aspects of the application. The project management and coordination were primarily handled through GitHub, where we utilized GitHub projects to track the progress of development. The first step was to actually divide the work based on team member knowledge, this is the hardest of it all and requires a lot of communication and understanding of each other's strengths and weaknesses.\r\n\r\nI decided to push everyone to work on the parts they were most comfortable with, while also encouraging them to learn new things. This approach not only helped us complete the project efficiently but also allowed each member to grow their skills.\r\n\r\nWe had informal standups during the whole hackathon where we discussed what is everyone working on, what challenges they are facing, and how we can help each other. This open communication helped us stay aligned and motivated throughout the hackathon. This way, we were able to quickly address any issues that arose and keep the project moving forward.\r\n\r\nSince the project was divided to the most atomic parts it can, it was easy to track the progress of each member and integrate the changes without conflicts. There was no overlapping work, and each member had a clear understanding of their responsibilities. This also made it easier to review each other's code and provide feedback, which is crucial for maintaining code quality. Although there were some merge conflicts, they were resolved quickly due to the clear division of work and regular communication.\r\n\r\nI learnt a lot about team coordination and project management during this hackathon. It was a great experience to work with a team of talented individuals, and I am proud of what we accomplished together. The project not only helped us improve our technical skills but also taught us the importance of effective communication and collaboration in software development. This experience will definitely help me in future projects, and I look forward to applying these lessons in my next endeavors.\r\n\r\nClarity should always be above everything, and I am glad that we were able to maintain that throughout the project. The clear division of work, regular communication, and open feedback helped us stay on track and deliver a high-quality product within the limited time frame of the hackathon.\r\n\r\nFor the first time in a hackathon, I actually saw the project finish on time, and I am really proud of that. The project was not only completed but also met the requirements and expectations set at the beginning. This is a testament to the hard work and dedication of each team member, and I am grateful for their contributions.\r\n\r\nCeleris is a great project and there are a lot of areas of improvement, ranging from security to performance. I am looking forward to continuing the development of this project and making it even better. The foundation we have built during this hackathon will serve as a solid base for future enhancements and features. We can use this project in future hackathons or as a starting point for a more comprehensive offline-first payment solution.\r\n\r\n## Conclusion\r\n\r\nCeleris is a pioneering Android application that embodies the principles of offline-first design, enabling users to perform financial transactions without relying on constant internet connectivity. By leveraging local data persistence, real-time QR code scanning, and SMS-based payment processing, Celeris provides a seamless user experience even in low-connectivity environments.\r\n\r\nTo everyone else, never go towards perfection. Build the MVP first, and then iterate on it. This hackathon taught me that perfection is the enemy of progress, and it's better to have a working product that can be improved over time than to strive for an unattainable ideal.\r\n\r\nAnd a very important point to anyone who is reading this: **Always have a plan, and a clear vision of what you want to achieve.** This will help you stay focused and motivated, even when things get tough. The Celeris project was a great example of how a clear vision and effective planning can lead to successful outcomes.\r\n\r\nThank you for reading this blog post about Celeris, and I hope it inspires you to build your own applications. I really hope you must have learned something new from this post, and I would love to hear your thoughts and feedback. If you have any questions or suggestions, feel free to reach out to me on Twitter or GitHub.","src/content/blog/celeris-the-engineering.md","e2007ed22763e689",{html:1638,metadata:1639},"<h2 id=\"introduction\">Introduction</h2>\n<p>Celeris is one of the projects I really loved building. I got a the idea when I registered for a college hackathon, <strong><em>which I later got to know is quite biased, and didn’t look for innovation in the first place</em></strong>. But keeping it aside, I wanted to build something which can be continued even after the hackathon, and not just a one-time project.</p>\n<p>Our team consisted of four members, and we had to build something that would be useful to people, and not just a project that would be used for the hackathon. We wanted to innovate.</p>\n<blockquote>\n<p>Read the LinkedIn post <a href=\"https://www.linkedin.com/posts/a2ys_we-built-something-we-were-proud-of-but-activity-7333173081642815490-mzj8?utm_source=share&#x26;utm_medium=member_desktop&#x26;rcm=ACoAADiYeaoBz7k0sh0yacSgYQfhVjjtqzUc3ZM\">here</a>.</p>\n</blockquote>\n<p><img src=\"/blog-assets/celeris/our-team.jpg\" alt=\"Our Small Team\"></p>\n<p>In India, even though we have a system for UPI payments, there are still a lot of people who do not have access to the internet to perform a UPI transactions. There are a few solutions which are near to this from the Government of India, but they are either being developed, or not available to everyone due to lack of appropriate hardware in phones. We wanted to build a completely offline payments ecosystem that would allow people to make payments without the need for an internet connection. This is how the idea of Celeris was born.</p>\n<blockquote>\n<p>This post is really long, and I will try to cover everything that I did in the project, from the design and architecture of the system, to the implementation of the different components. I will also try to cover the challenges that I faced while building the system, and how I overcame them. I will also try to cover the future plans for the project, and how it can be extended to include more features and functionalities. Be patient, and read through the whole post, as it will be worth it. I will also try to include a lot of code snippets, so that you can understand how the system works, and how you can build something similar. There is a lot to learn!</p>\n</blockquote>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#the-problem\">The Problem</a></li>\n<li><a href=\"#the-solution\">The Solution</a></li>\n<li><a href=\"#design-principles\">Design Principles</a></li>\n<li><a href=\"#architecture\">Architecture</a></li>\n<li><a href=\"#celeris-sms-gateway-the-core-component\">Celeris SMS Gateway: The Core Component</a>\n<ul>\n<li><a href=\"#sms-receiver\">SMS Receiver</a></li>\n<li><a href=\"#sms-sender\">SMS Sender</a></li>\n<li><a href=\"#main-activity\">Main Activity</a></li>\n</ul>\n</li>\n<li><a href=\"#celeris-backend-the-server\">Celeris Backend: The Server</a>\n<ul>\n<li><a href=\"#sms-parser\">SMS Parser</a></li>\n<li><a href=\"#authentication\">Authentication</a>\n<ul>\n<li><a href=\"#database-tables--schema\">Database Tables &#x26; Schema</a></li>\n<li><a href=\"#request-models\">Request Models</a></li>\n<li><a href=\"#endpoints\">Endpoints</a></li>\n<li><a href=\"#security-disclaimer\">Security Disclaimer</a></li>\n<li><a href=\"#utilities\">Utilities</a></li>\n</ul>\n</li>\n<li><a href=\"#transaction-service-core-of-celeris-payments\">Transaction Service: Core of Celeris Payments</a>\n<ul>\n<li><a href=\"#design-notes\">Design Notes</a></li>\n</ul>\n</li>\n<li><a href=\"#celeris-api-the-restful-interface\">Celeris API: The RESTful Interface</a>\n<ul>\n<li><a href=\"#app-initialization\">App Initialization</a></li>\n<li><a href=\"#sync-endpoint\">Sync Endpoint</a></li>\n<li><a href=\"#sms-webhook-endpoint\">SMS Webhook Endpoint</a></li>\n<li><a href=\"#add-balance-endpoint\">Add Balance Endpoint</a></li>\n</ul>\n</li>\n<li><a href=\"#highlights\">Highlights</a></li>\n</ul>\n</li>\n<li><a href=\"#celeris-database\">Celeris Database</a></li>\n<li><a href=\"#celeris-app-the-offline-cum-online-client-application\">Celeris App: The Offline-cum-Online Client Application</a>\n<ul>\n<li><a href=\"#libraries-and-dependencies\">Libraries and Dependencies</a></li>\n<li><a href=\"#ui-components\">UI Components</a></li>\n<li><a href=\"#sqlite-database-helpers\">SQLite Database Helpers</a>\n<ul>\n<li><a href=\"#authdatabasehelper\">AuthDatabaseHelper</a></li>\n<li><a href=\"#qr-code-database-helper\">QR Code Database Helper</a></li>\n</ul>\n</li>\n<li><a href=\"#user-model\">User Model</a></li>\n<li><a href=\"#mainactivity\">MainActivity</a>\n<ul>\n<li><a href=\"#logic-breakdown\">Logic Breakdown</a></li>\n<li><a href=\"#authentication-flow-pipeline\">Authentication Flow Pipeline</a></li>\n<li><a href=\"#integration-perspective\">Integration Perspective</a></li>\n</ul>\n</li>\n<li><a href=\"#authentication-flow\">Authentication Flow</a>\n<ul>\n<li><a href=\"#authactivity\">AuthActivity</a></li>\n<li><a href=\"#login-flow\">Login Flow</a></li>\n<li><a href=\"#signup-flow\">Signup Flow</a></li>\n<li><a href=\"#local-persistence-authdatabasehelper\">Local Persistence: AuthDatabaseHelper</a></li>\n<li><a href=\"#navigation-between-login--signup\">Navigation between Login &#x26; Signup</a></li>\n<li><a href=\"#final-notes\">Final Notes</a></li>\n</ul>\n</li>\n<li><a href=\"#post-authentication-secureactivity\">Post Authentication: SecureActivity</a>\n<ul>\n<li><a href=\"#authentication-check-offline-aware\">Authentication Check (Offline-aware)</a></li>\n<li><a href=\"#network-monitoring-with-networkmonitor\">Network Monitoring with NetworkMonitor</a></li>\n</ul>\n</li>\n<li><a href=\"#profile-page\">Profile Page</a></li>\n<li><a href=\"#scan-and-pay-flow\">Scan and Pay Flow</a>\n<ul>\n<li><a href=\"#camera-initialization\">Camera Initialization</a></li>\n<li><a href=\"#camerax-setup\">CameraX Setup</a></li>\n<li><a href=\"#qr-code-decoding\">QR Code Decoding</a></li>\n<li><a href=\"#post-scan-navigation-and-storage\">Post-Scan Navigation and Storage</a></li>\n<li><a href=\"#data-persistence\">Data Persistence</a></li>\n</ul>\n</li>\n<li><a href=\"#send-money-flow\">Send Money Flow</a>\n<ul>\n<li><a href=\"#retrieving-scanned-merchant-id\">Retrieving Scanned Merchant ID</a></li>\n<li><a href=\"#loading-user-information\">Loading User Information</a></li>\n<li><a href=\"#composing-the-payment-sms\">Composing the Payment SMS</a></li>\n<li><a href=\"#summary-of-the-flow\">Summary of the Flow</a></li>\n</ul>\n</li>\n<li><a href=\"#success-activity\">Success Activity</a>\n<ul>\n<li><a href=\"#receiving-transaction-metadata-via-intent\">Receiving Transaction Metadata via Intent</a></li>\n<li><a href=\"#displaying-confirmation-ui\">Displaying Confirmation UI</a></li>\n<li><a href=\"#updating-user-balance-in-local-storage\">Updating User Balance in Local Storage</a></li>\n</ul>\n</li>\n<li><a href=\"#retrofit-client-utility\">Retrofit Client Utility</a></li>\n<li><a href=\"#authapi-utility\">AuthApi Utility</a>\n<ul>\n<li><a href=\"#endpoints-1\">Endpoints</a></li>\n<li><a href=\"#backend-integration\">Backend Integration</a></li>\n</ul>\n</li>\n<li><a href=\"#datautils-persistent-key-value-storage\">DataUtils: Persistent Key-Value Storage</a></li>\n<li><a href=\"#qrcodeutils-utility\">QRCodeUtils Utility</a>\n<ul>\n<li><a href=\"#purpose\">Purpose</a></li>\n<li><a href=\"#implementation-breakdown\">Implementation Breakdown</a></li>\n<li><a href=\"#qr-code-generation-logic\">QR Code Generation Logic</a></li>\n<li><a href=\"#usage-context-in-celeris\">Usage Context in Celeris</a></li>\n</ul>\n</li>\n<li><a href=\"#networkmonitor-utility\">NetworkMonitor Utility</a>\n<ul>\n<li><a href=\"#constructor-parameters\">Constructor Parameters</a></li>\n<li><a href=\"#start--stop-listening\">Start &#x26; Stop Listening</a></li>\n<li><a href=\"#checking-network-status\">Checking Network Status</a></li>\n<li><a href=\"#use-case-in-celeris\">Use Case in Celeris</a></li>\n</ul>\n</li>\n<li><a href=\"#smsreceiver\">SMSReceiver</a>\n<ul>\n<li><a href=\"#overview-of-responsibilities\">Overview of Responsibilities</a></li>\n<li><a href=\"#listening-for-incoming-sms\">Listening for Incoming SMS</a></li>\n<li><a href=\"#parsing-the-sms-payload\">Parsing the SMS Payload</a></li>\n<li><a href=\"#processing-the-message-content\">Processing the Message Content</a></li>\n<li><a href=\"#redirecting-to-transaction-outcome-screen\">Redirecting to Transaction Outcome Screen</a></li>\n<li><a href=\"#offline-first-impact\">Offline First Impact</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#un-technical-stuff-team-coordination-and-project-management\">Un-technical Stuff: Team Coordination and Project Management</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n<h2 id=\"the-problem\">The Problem</h2>\n<p>The problem we wanted to solve was simple. We wanted to build a completely offline payments ecosystem that would allow people to make payments without the need for an internet connection. The solution had to be simple, easy to use and secure. We wanted to build a system that would allow people to make payments using their phones, without the need for any additional hardware or software.</p>\n<p>I searched up a few existing solutions, and we discussed them in our team. Here are the three major solutions that I found along with their limitations from a system design perspective:</p>\n<ol>\n<li><strong>UPI 123 Pay</strong>: UPI 123Pay is a service launched by the National Payments Corporation of India (NPCI) that enables users with feature phones (non-smartphones) to perform UPI transactions without internet. It works via IVR (Interactive Voice Response), missed calls, and sound-based technology. While it’s a strong initiative, it suffers from two major issues: limited awareness and a cumbersome user experience.</li>\n<li><strong>Aadhaar Enabled Payment System (AEPS)</strong>: AEPS is a bank-led model that allows users to carry out financial transactions using their Aadhaar number and biometric authentication (usually a fingerprint). While it plays a critical role in financial inclusion, it relies heavily on physical biometric devices, which are not widely available, especially with small merchants or in rural households. It also poses concerns around privacy and the dependency on third-party infrastructure to function.</li>\n<li><strong>UPI Lite X</strong>: This is the nearest solution to ours. It aims to facilitate offline transactions through Near Field Communication (NFC) or device-to-device communication. However, it is currently in early stages of adoption and rollout. Most importantly, it requires specific hardware capabilities like NFC chips and trusted execution environments (TEE), which are still not available on a large number of budget and mid-range smartphones used by the masses. This limits its immediate impact and inclusivity, especially in rural or economically weaker regions.</li>\n</ol>\n<p>After going through everything, I saw three main problems from a user’s perspective:</p>\n<ol>\n<li><strong>Limited Awareness</strong>: Many people are not aware of the existing solutions, and even if they are, they may not be comfortable using them due to lack of knowledge or experience. This is especially true for older generations who may not be as tech-savvy.</li>\n<li><strong>Cumbersome User Experience</strong>: The existing solutions are often not user-friendly, and require a lot of steps to complete a transaction. This can be frustrating for users, and can lead to them abandoning the process altogether.</li>\n<li><strong>Hardware Limitations</strong>: Many of the existing solutions require specific hardware capabilities, such as NFC chips or biometric devices, which are not widely available on all smartphones. This limits the accessibility of these solutions, especially in rural or economically weaker regions.</li>\n</ol>\n<p>After going through everything, we had to build something that would be user-friendly, even a child could use it. We wanted to build something that would be available to everyone, even if they did not have access to the internet. We wanted to build something that would be available to everyone, even if they did not have access to the latest hardware.</p>\n<h2 id=\"the-solution\">The Solution</h2>\n<p>Before starting out with the solution and start development in our team, I had to think about the design and architecture of the system so that everyone in the team could understand it, and we could build it in a modular way and how to make it all work together.</p>\n<p>The solution was something that needs to be done in a few steps, and would be available to everyone. The only step was to break it down to the most modular level, so that everything can be scaled up on demand. This was the first time I did something like this, so I had to have a lot of patience and a lot of time to think about the design and architecture of the system. I had to think about everything, from the hardware to the software, to the user experience.</p>\n<p>To achieve a solution like this, I had to study about the technologies that I would be using in a short period of time and then decide on a very basic working architecture in the beginning, and then build up to a final architecture which could be scaled if needed. This is also because I had to distribute the work among my team members, and I had to make sure that everyone was on the same page. I had to make sure that everyone understood the design principles and the architecture of the system.</p>\n<h2 id=\"design-principles\">Design Principles</h2>\n<p>The design principles that were followed while building Celeris were:</p>\n<ol>\n<li><strong>Simplicity</strong>: The system had to be simple and easy to use. I wanted to build a system that would allow people to make payments using their phones, without the need for any additional hardware or software. Google’s Material Design was a great starting point for the UI/UX design, as it provided a clean and intuitive interface that was easy to navigate.</li>\n<li><strong>Modularity and Scalability</strong>: The system had to be modular and scalable. I wanted to build a system that could be easily scaled up or down, depending on the needs of the users. This meant that I had to break down the system into smaller components that could be easily replaced or upgraded. This would also allow for future enhancements and new features to be added without disrupting the existing system.</li>\n<li><strong>Security</strong>: The system had to be secure. Although a lot of security features were not implemented in the app for the hackathon, if developed further, the system would have to be secure enough to protect the users’ data and transactions.</li>\n</ol>\n<h2 id=\"architecture\">Architecture</h2>\n<p>The architecture of Celeris was designed to be modular and scalable. The system was broken down into smaller components that could be easily replaced or upgraded. The architecture consisted of the following components:</p>\n<ol>\n<li><strong>Celeris App</strong>: The Celeris app was the main component of the system. It was designed to be simple and easy to use, with a clean and intuitive interface. The app was initially built using React Native, but then was later migrated to Kotlin for Native Android development. This was done due to major constraint which was the lack of background SMS sending capabilities in React Native, which was a major requirement for the app to work offline. The app was designed to be modular, with different components for different features, such as sending and receiving payments, managing contacts, and viewing transaction history. I will discuss the Celeris app in detail in a later section of this blog post.</li>\n<li><strong>Celeris Server</strong>: The Celeris server was the backend component of the system. It was designed to be modular and scalable, with different components for different features, such as managing users, processing transactions, and managing and sending SMS messages. The server was built using FastAPI, a modern web framework for building APIs with Python. FastAPI was chosen for its performance, ease of use, and support for asynchronous programming. The server was designed to be modular, with different components for different features, such as managing users, processing transactions, and sending notifications. Not to mention, FastAPI allowed the whole backend to be built in a very short time, and it was very easy to use. The server was designed to be modular, with different components for different features, such as managing users, processing transactions, and sending notifications.</li>\n<li><strong>Celeris Database</strong>: The Celeris database was the data storage component of the system. It was designed to be modular and scalable, with different components for different features, such as storing user data, transaction data, and authentication data. To reduce all the hassle of managing a database and to expose it as a REST API, I used Supabase, an open-source Firebase alternative that provides a Postgres database with a RESTful API. Supabase was chosen for its ease of use, scalability, and support for real-time data updates. The database was designed to be modular, with different tables for different features, such as users, transactions, and balances.</li>\n<li><strong>Celeris SMS Gateway</strong>: The Celeris SMS gateway was the component of the system that allowed the app to send and receive SMS messages. This was the core component of the whole system, as it was the middleman which connected the offline app to the online server. I initially thought of using Twilio, but it was not possible to send SMS messages to the phone number provided by Twilio, as they only give a US based phone number, and we needed an Indian phone number to send SMS messages to. So, I decided to build a local SMS gateway myself, which would be available everytime to recieve SMS messages from the users, and send SMS messages to the users based on the requests made by the online server. This was then exposed to the network using a simple REST API, which would have a POST endpoint to send SMS messages, and have a webhook which would send the SMS messages to the server when a new SMS message is received. The SMS gateway was built using NanoHTTPD, a lightweight HTTP server for Java, and was designed to be modular, with different components for different features, such as sending and receiving SMS messages, and managing contacts.</li>\n</ol>\n<p>I made a sketch of the architecture of the system on a piece of paper first to actually visualize how the system would look look like, then I had to discuss it with my team members to make sure that everyone understood what was going on, and how the system would work. This was a very important step, as it allowed us to identify any potential issues or bottlenecks in the system before we started building it. I built it on a piece of paper first, then I made it on a whiteboard while discussing it with my team members.</p>\n<p>This is the very first sketch of the architecture of Celeris, which was then later refined and built upon to create the final architecture of the system. It was a very simple sketch, but it allowed us to visualize how the system would work, and how the different components would interact with each other.</p>\n<p><img src=\"/blog-assets/celeris/very-first-architecture.jpg\" alt=\"The very first sketch of the architecture of Celeris\"></p>\n<p>Then I discussed it with my team members, and we made a few changes to the architecture to make it more modular and scalable. I also added a few more components to the system, such as the Celeris SMS gateway, which was the core component of the whole system, as it was the middleman which connected the offline app to the online server.</p>\n<p><img src=\"/blog-assets/celeris/architecture-second-iteration.jpg\" alt=\"Second sketch of the architecture of Celeris\"></p>\n<p>After this I had to research a little bit more about the technologies that I would be using in the system, and how they would work together. I had to make sure that everything was compatible with each other, and that the system would be able to handle the load of the users. I also decided on what technologies we would be using for the different components of the system, such as the Celeris app, the Celeris server, and the Celeris database. I had to make sure that everything was compatible with each other, and that the system would be able to handle the load of the users. Then after brainstorming a lot, I came up with the final architecture of the system, which was then built upon to create the final product.</p>\n<p><img src=\"/blog-assets/celeris/final-architecture.jpg\" alt=\"Final architecture of Celeris\"></p>\n<h2 id=\"celeris-sms-gateway-the-core-component\">Celeris SMS Gateway: The Core Component</h2>\n<p>The Celeris SMS gateway was the core component of the whole system, as it was the middleman which connected the offline app to the online server. It was designed to be simple and easy to use, with a clean and intuitive interface. The SMS gateway was built using NanoHTTPD, a lightweight HTTP server for Java, and was designed to be modular, with different components for different features.</p>\n<blockquote>\n<p>All of the code snippets being discussed in this section are available on the <a href=\"https://github.com/celeris-schnell/sms-server\">GitHub repository</a> of the Celeris SMS gateway.</p>\n</blockquote>\n<h4 id=\"sms-receiver\">SMS Receiver</h4>\n<p>This was the component of the SMS gateway that ran in the background and listened for incoming SMS messages. It was a very basic component, which would listen for incoming SMS messages and then send them to the server using a POST request.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#BB9AF7\">Override</span></span>\n<span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">public</span><span style=\"color:#BB9AF7\"> void</span><span style=\"color:#7AA2F7\"> onReceive</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">Context</span><span style=\"color:#7AA2F7\"> context</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> Intent</span><span style=\"color:#7AA2F7\"> intent</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#C0CAF5\">intent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getAction</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#BB9AF7\"> !=</span><span style=\"color:#FF9E64\"> null</span><span style=\"color:#BB9AF7\"> &#x26;&#x26;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            intent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getAction</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">equals</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">Telephony</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">Sms</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">Intents</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">SMS_RECEIVED_ACTION</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        Bundle</span><span style=\"color:#C0CAF5\"> bundle</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C0CAF5\"> intent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getExtras</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#A9B1D6\">bundle </span><span style=\"color:#BB9AF7\">!=</span><span style=\"color:#FF9E64\"> null</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            SmsMessage</span><span style=\"color:#89DDFF\">[]</span><span style=\"color:#C0CAF5\"> messages</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">            messages </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\"> Telephony</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">Sms</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">Intents</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getMessagesFromIntent</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">intent</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            for</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BB9AF7\">SmsMessage</span><span style=\"color:#C0CAF5\"> smsMessage</span><span style=\"color:#BB9AF7\"> :</span><span style=\"color:#A9B1D6\"> messages</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">                if</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#A9B1D6\">smsMessage </span><span style=\"color:#BB9AF7\">!=</span><span style=\"color:#FF9E64\"> null</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">                    String</span><span style=\"color:#C0CAF5\"> messageBody</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C0CAF5\"> smsMessage</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getMessageBody</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">                    sendToServer</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">messageBody</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">                }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">            }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p>This is a <code>BroadcastReceiver</code> that listens for incoming SMS messages on the Android device. When the system receives a text message, it broadcasts an intent with the action <code>SMS_RECEIVED_ACTION</code>.</p>\n<ul>\n<li><strong>Intent Filtering</strong>: The code first checks if the received intent is specifically for SMS messages by verifying the action matches <code>Telephony.Sms.Intents.SMS_RECEIVED_ACTION</code>. This ensures it only processes actual SMS events and ignores other broadcast intents.</li>\n<li><strong>Data Extraction</strong>: When an SMS intent is received, the message data is stored in the intent’s extras as a Bundle. The code retrieves this Bundle, which contains the raw SMS data from the telephony system.</li>\n<li><strong>Message Parsing</strong>: Using <code>Telephony.Sms.Intents.getMessagesFromIntent()</code>, the code extracts the SMS messages from the intent. This method handles the parsing of the telephony data and returns an array of <code>SmsMessage</code> objects. Multiple messages can arrive in a single intent, especially for long messages that get split into multiple parts.</li>\n<li><strong>Content Processing</strong>: For each SmsMessage object, the code extracts the message body using <code>getMessageBody()</code> and immediately calls the <code>sendToServer()</code> method.</li>\n</ul>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">private</span><span style=\"color:#BB9AF7\"> void</span><span style=\"color:#7AA2F7\"> sendToServer</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">String</span><span style=\"color:#7AA2F7\"> messageBody</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    new</span><span style=\"color:#7AA2F7\"> Thread</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">()</span><span style=\"color:#BB9AF7\"> -></span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        try</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            URL</span><span style=\"color:#C0CAF5\"> url</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BB9AF7\"> new</span><span style=\"color:#7AA2F7\"> URL</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">https://41cf-122-187-117-179.ngrok-free.app/sms-webhook/</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            HttpURLConnection</span><span style=\"color:#C0CAF5\"> conn</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#7AA2F7\">HttpURLConnection</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#C0CAF5\"> url</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">openConnection</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            conn</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">setRequestMethod</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">POST</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            conn</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">setRequestProperty</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Content-Type</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">application/x-www-form-urlencoded</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            conn</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">setDoOutput</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">true</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            String</span><span style=\"color:#C0CAF5\"> formData</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">Body=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#C0CAF5\"> URLEncoder</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">encode</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">messageBody</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">UTF-8</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            OutputStream</span><span style=\"color:#C0CAF5\"> os</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C0CAF5\"> conn</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getOutputStream</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            os</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">write</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">formData</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getBytes</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            os</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">flush</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            os</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">close</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            int</span><span style=\"color:#C0CAF5\"> responseCode</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C0CAF5\"> conn</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getResponseCode</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#51597D;font-style:italic\"> // TODO: Use later for debugging</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span><span style=\"color:#BB9AF7\"> catch</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">Exception</span><span style=\"color:#E0AF68\"> e</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            e</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">printStackTrace</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    })</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">start</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p>This method is responsible for sending the received SMS message to the Celeris server. It does this by creating a new thread to handle the network operation, ensuring that the main UI thread remains responsive.</p>\n<ul>\n<li><strong>Threading</strong>: The method creates a new thread to handle the HTTP request. This is essential because network operations are blocking and would freeze the main UI thread if executed synchronously. Android also enforces this by throwing a <code>NetworkOnMainThreadException</code> if we attempt network calls on the main thread.</li>\n<li><strong>HTTP Connection Setup</strong>: It establishes an <code>HttpURLConnection</code> to your ngrok tunnel URL, which is exposing your local Celeris backend server to the internet. The connection is configured for a POST request with the content type set to <code>application/x-www-form-urlencoded</code>, which is the standard format for HTML form submissions.</li>\n<li><strong>Data Encoding</strong>: The SMS message body is URL-encoded using <code>URLEncoder.encode()</code> to handle special characters properly, then formatted as form data with the parameter name “Body”. This ensures characters like spaces, ampersands, or other symbols in the SMS don’t break the HTTP request.</li>\n<li><strong>Request Transmission</strong>: The encoded form data is written to the connection’s output stream as bytes. The <code>flush()</code> call ensures all data is sent immediately, and the stream is properly closed to release resources.</li>\n<li><strong>Response Handling</strong>: The code retrieves the HTTP response code, though it’s currently unused (marked as TODO for debugging). This could be useful for error handling or logging successful transmissions.</li>\n<li><strong>Error Management</strong>: The entire operation is wrapped in a try-catch block to handle potential network failures, malformed URLs, or encoding issues without crashing the application.</li>\n</ul>\n<p>This method bridges the gap between the Android SMS system (offline) and the web backend (online), converting local SMS data into HTTP requests that the server can process.</p>\n<h4 id=\"sms-sender\">SMS Sender</h4>\n<p>This was the component of the SMS gateway that would send SMS messages to the users. It was a very basic component, which would take the message body and the phone number as input, and then send the SMS message to the user using a POST request. This was exposed to the local network using a simple REST API, which would have a POST endpoint to send SMS messages.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">public</span><span style=\"color:#7AA2F7\"> SmsHttpServer</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> port</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#A9B1D6\"> throws IOException </span><span style=\"color:#9ABDF5\">{</span></span>\n<span class=\"line\"><span style=\"color:#F7768E\">    super</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#A9B1D6\">port</span><span style=\"color:#89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    start</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">NanoHTTPD</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7DCFFF\">SOCKET_READ_TIMEOUT</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> false</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p>This is the constructor for the <code>SmsHttpServer</code> class, which extends <code>NanoHTTPD</code>. It initializes the HTTP server on a specified port and starts it with a read timeout.</p>\n<ul>\n<li><strong>Port Initialization</strong>: The constructor takes an integer <code>port</code> as a parameter, which specifies the port number on which the server will listen for incoming HTTP requests. This allows you to run the server on any available port.</li>\n<li><strong>Superclass Constructor</strong>: It calls the superclass constructor (<code>super(port)</code>) to initialize the NanoHTTPD server with the specified port. This sets up the underlying server infrastructure.</li>\n<li><strong>Server Start</strong>: The <code>start()</code> method is called with two parameters:\n<ul>\n<li><code>NanoHTTPD.SOCKET_READ_TIMEOUT</code>: This sets the read timeout for incoming socket connections, ensuring that the server does not hang indefinitely waiting for data.</li>\n<li><code>false</code>: This indicates that the server should not run in a separate thread, meaning it will block the current thread until it is stopped. This is useful for simple applications or testing but may need to be adjusted for production use.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#BB9AF7\">Override</span></span>\n<span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">public</span><span style=\"color:#BB9AF7\"> Response</span><span style=\"color:#7AA2F7\"> serve</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">IHTTPSession</span><span style=\"color:#7AA2F7\"> session</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#C0CAF5\">Method</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">POST</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">equals</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">session</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getMethod</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        try</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            Map</span><span style=\"color:#89DDFF\">&#x3C;</span><span style=\"color:#BB9AF7\">String</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> String</span><span style=\"color:#89DDFF\">></span><span style=\"color:#C0CAF5\"> body</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BB9AF7\"> new</span><span style=\"color:#BB9AF7\"> HashMap</span><span style=\"color:#89DDFF\">&#x3C;>();</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            session</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">parseBody</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">body</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            JSONObject</span><span style=\"color:#C0CAF5\"> json</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BB9AF7\"> new</span><span style=\"color:#7AA2F7\"> JSONObject</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">Objects</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">requireNonNull</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">body</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">get</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">postData</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)))</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            String</span><span style=\"color:#C0CAF5\"> phoneNumber</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C0CAF5\"> json</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getString</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">phoneNumber</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            String</span><span style=\"color:#C0CAF5\"> message</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C0CAF5\"> json</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getString</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">message</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">            sendSms</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">phoneNumber</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#7AA2F7\"> message</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            return</span><span style=\"color:#7AA2F7\"> newFixedLengthResponse</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">SMS Sent</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span><span style=\"color:#BB9AF7\"> catch</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">Exception</span><span style=\"color:#E0AF68\"> e</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            return</span><span style=\"color:#7AA2F7\"> newFixedLengthResponse</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">Response</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7DCFFF\">Status</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7DCFFF\">INTERNAL_ERROR</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">text/plain</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> e</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getMessage</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#7AA2F7\"> newFixedLengthResponse</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">SMS Gateway Running...</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p>This method is the core of the <code>SmsHttpServer</code> class, handling incoming HTTP requests. It checks if the request method is POST, processes the request body, and sends an SMS message based on the provided data.</p>\n<ul>\n<li><strong>HTTP Method Filtering</strong>: The method first checks if the incoming request is a POST request using <code>Method.POST.equals(session.getMethod())</code>. Only POST requests are processed for SMS sending, while other HTTP methods (GET, PUT, etc.) receive a default response indicating the gateway is running.</li>\n<li><strong>Request Body Parsing</strong>: For POST requests, it creates a <code>HashMap</code> to store the parsed body data and calls <code>session.parseBody(body)</code>. This extracts the raw POST data from the HTTP request and stores it in the map with the key “postData”.</li>\n<li><strong>JSON Data Extraction</strong>: The raw POST data is retrieved from the <code>HashMap</code> and parsed as a JSON object using new <code>JSONObject()</code>. The code expects the request body to contain JSON with two fields:\n<ul>\n<li><code>phoneNumber</code>: The recipient’s phone number</li>\n<li><code>message</code>: The SMS message content to send</li>\n</ul>\n</li>\n<li><strong>SMS Transmission</strong>: Once the phone number and message are extracted from the JSON, the method calls <code>sendSms(phoneNumber, message)</code> to actually send the SMS using the Android SMS APIs.</li>\n<li><strong>Response Handling</strong>: The method returns different HTTP responses based on the outcome:\n<ul>\n<li>Success: Returns “SMS Sent” with HTTP 200 status</li>\n<li>Error: Returns the exception message with HTTP 500 (Internal Server Error) status</li>\n<li>Non-POST requests: Returns “SMS Gateway Running…” indicating the server is operational</li>\n</ul>\n</li>\n<li><strong>Error Management</strong>: The entire POST processing logic is wrapped in a try-catch block to handle JSON parsing errors, missing fields, or SMS sending failures gracefully without crashing the server.</li>\n</ul>\n<p>This creates a simple REST API endpoint that accepts JSON payloads and converts them into SMS messages sent through the Android device.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">private</span><span style=\"color:#BB9AF7\"> void</span><span style=\"color:#7AA2F7\"> sendSms</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">String</span><span style=\"color:#7AA2F7\"> phoneNumber</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> String</span><span style=\"color:#7AA2F7\"> message</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    SmsManager</span><span style=\"color:#C0CAF5\"> smsManager</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C0CAF5\"> SmsManager</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getDefault</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">    smsManager</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">sendTextMessage</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">phoneNumber</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> null</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> message</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> null</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> null</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p>This method is responsible for sending an SMS message using the Android <code>SmsManager</code> class. It takes two parameters: the recipient’s phone number and the message content.</p>\n<ul>\n<li><strong>SmsManager Initialization</strong>: It retrieves the default <code>SmsManager</code> instance using <code>SmsManager.getDefault()</code>. This class provides methods to send SMS messages, manage SMS queues, and handle delivery reports.</li>\n<li><strong>SMS Sending</strong>: The <code>sendTextMessage()</code> method is called with five parameters:\n<ul>\n<li><code>phoneNumber</code>: The recipient’s phone number</li>\n<li><code>null</code> (service center address): Usually null to use the default SMS service center</li>\n<li><code>message</code>: The actual text content of the SMS</li>\n<li><code>null</code> (sent PendingIntent): Could be used to receive notification when the SMS is sent</li>\n<li><code>null</code> (delivery PendingIntent): Could be used to receive notification when the SMS is delivered</li>\n</ul>\n</li>\n</ul>\n<p>This method serves as a simple wrapper around the Android SMS API, enabling the HTTP server to send SMS messages to any phone number specified in incoming requests. Note that this requires the <code>SEND_SMS</code> permission in the Android manifest.</p>\n<h4 id=\"main-activity\">Main Activity</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">public</span><span style=\"color:#9D7CD8;font-style:italic\"> class</span><span style=\"color:#C0CAF5\"> MainActivity</span><span style=\"color:#9D7CD8;font-style:italic\"> extends</span><span style=\"color:#BB9AF7\"> AppCompatActivity</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    @</span><span style=\"color:#BB9AF7\">Override</span></span>\n<span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    protected</span><span style=\"color:#BB9AF7\"> void</span><span style=\"color:#7AA2F7\"> onCreate</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">Bundle</span><span style=\"color:#E0AF68\"> savedInstanceState</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F7768E\">        super</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">onCreate</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">savedInstanceState</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">        EdgeToEdge</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">enable</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#F7768E\">this</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        setContentView</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">R</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7DCFFF\">layout</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7DCFFF\">activity_main</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">        ViewCompat</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">setOnApplyWindowInsetsListener</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">findViewById</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">R</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7DCFFF\">id</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7DCFFF\">main</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#A9B1D6\">v</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> insets</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#BB9AF7\"> -></span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            Insets</span><span style=\"color:#C0CAF5\"> systemBars</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C0CAF5\"> insets</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getInsets</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">WindowInsetsCompat</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">Type</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">systemBars</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            v</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">setPadding</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">systemBars</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">left</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> systemBars</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">top</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> systemBars</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">right</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> systemBars</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">bottom</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            return</span><span style=\"color:#A9B1D6\"> insets</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        })</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        try</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            new</span><span style=\"color:#7AA2F7\"> SmsHttpServer</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">8080</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span><span style=\"color:#BB9AF7\"> catch</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">IOException</span><span style=\"color:#E0AF68\"> e</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">            e</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">printStackTrace</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p>This is the main activity of the Celeris SMS gateway application, which serves as the entry point for the Android app. It initializes the user interface and starts the HTTP server that will handle incoming SMS requests.</p>\n<ul>\n<li><strong>SMS Server Initialization</strong>: The critical part for the SMS gateway functionality - it instantiates a new <code>SmsHttpServer</code> on port 8080. This starts the HTTP server that will listen for incoming requests to send SMS messages.</li>\n<li><strong>Error Handling</strong>: The server initialization is wrapped in a try-catch block to handle potential <code>IOException</code> that could occur during server startup (such as port already in use or network issues).</li>\n</ul>\n<p>This activity essentially serves as the bootstrap for the SMS gateway, starting the HTTP server that makes the Android device accessible as an SMS endpoint on the local network. Once launched, other applications can send POST requests to <code>http://[device-ip]:8080</code> to trigger SMS messages through the device.</p>\n<h2 id=\"celeris-backend-the-server\">Celeris Backend: The Server</h2>\n<p>The Celeris backend was the server component of the system. It was designed to be modular and scalable, with different components for different features, such as managing users, processing transactions, and sending notifications. The server was built using FastAPI, a modern web framework for building APIs with Python. This server was the heart of the whole system, as it was responsible for managing users, processing transactions, and sending notifications. This was the part of the system that had to be always online, as it was the one that would process the transactions and send notifications to the users based on the requests made by the SMS gateway.</p>\n<p><img src=\"/blog-assets/celeris/upi_server.jpg\" alt=\"Celeris Backend Architecture\"></p>\n<blockquote>\n<p>All of the code snippets being discussed in this section are available on the <a href=\"https://github.com/celeris-schnell/backend\">GitHub repository</a> of the Celeris backend.</p>\n</blockquote>\n<h4 id=\"sms-parser\">SMS Parser</h4>\n<p>The SMS parser is a crucial component that extracts relevant information from incoming SMS messages. It uses regular expressions to identify the client ID, receiver ID, and amount from the message body.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">dataclass</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">class</span><span style=\"color:#C0CAF5\"> SMSData</span><span style=\"color:#9ABDF5\">:</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    client_id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> str</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    receiver_id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> str</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    amount</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> float</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> parse_sms_message</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">message</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> str</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> -></span><span style=\"color:#A9B1D6\"> Optional</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">SMSData</span><span style=\"color:#9ABDF5\">]:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    try</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        # Split the message by the delimiter and remove any whitespace</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        parts </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> [</span><span style=\"color:#A9B1D6\">part</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">strip</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#BB9AF7\"> for</span><span style=\"color:#A9B1D6\"> part </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#A9B1D6\"> message</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">split</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">|</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        # Verify we have exactly 3 parts</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#0DB9D7\"> len</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">parts</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#BB9AF7\"> !=</span><span style=\"color:#FF9E64\"> 3</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            return</span><span style=\"color:#FF9E64\"> None</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        client_id</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> receiver_id</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> amount_str </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> parts</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        # Convert amount to float and validate</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        amount </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#0DB9D7\"> float</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">amount_str</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#A9B1D6\"> amount </span><span style=\"color:#BB9AF7\">&#x3C;=</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            return</span><span style=\"color:#FF9E64\"> None</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        # Validate IDs are not empty</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        if</span><span style=\"color:#BB9AF7\"> not</span><span style=\"color:#A9B1D6\"> client_id </span><span style=\"color:#BB9AF7\">or</span><span style=\"color:#BB9AF7\"> not</span><span style=\"color:#A9B1D6\"> receiver_id</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">            return</span><span style=\"color:#FF9E64\"> None</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#7AA2F7\"> SMSData</span><span style=\"color:#9ABDF5\">(</span></span>\n<span class=\"line\"><span style=\"color:#E0AF68\">            client_id</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\">client_id</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E0AF68\">            receiver_id</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\">receiver_id</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E0AF68\">            amount</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\">amount</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">        )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    except</span><span style=\"color:#0DB9D7\"> Exception</span><span style=\"color:#BB9AF7\"> as</span><span style=\"color:#A9B1D6\"> e</span><span style=\"color:#89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color:#0DB9D7\">        print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">f</span><span style=\"color:#9ECE6A\">\"Error parsing SMS message: </span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#0DB9D7\">str</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">e</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">\"</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#FF9E64\"> None</span></span></code></pre>\n<p>This function takes an SMS message as input and attempts to parse it into a structured <code>SMSData</code> object. It expects the message to be formatted as <code>client id | receiver id | amount</code>.</p>\n<ul>\n<li><strong>Data Structure Definition</strong>: The <code>SMSData</code> dataclass defines a structured format for parsed SMS payment data, containing three essential fields: <code>client_id</code> (sender), <code>receiver_id</code> (recipient), and <code>amount</code> (transaction value). This provides type safety and clear data organization for payment transactions.</li>\n<li><strong>Message Format Specification</strong>: The parser expects SMS messages in a specific pipe-delimited format: <code>client_id | receiver_id | amount</code>. This standardized format allows the SMS Gateway to send payment instructions via simple text messages that the system can reliably interpret.</li>\n<li><strong>Input Validation and Parsing</strong>: The function splits the incoming message by the pipe delimiter and strips whitespace from each component. It performs several validation checks:\n<ul>\n<li>Ensures exactly three parts are present (no more, no less)</li>\n<li>Validates that both client and receiver IDs are non-empty strings</li>\n<li>Converts the amount string to a float and verifies it’s positive</li>\n</ul>\n</li>\n<li><strong>Error Handling</strong>: The entire parsing operation is wrapped in a try-catch block to handle potential exceptions like invalid number formats or unexpected message structures. If any validation fails or an exception occurs, the function returns <code>None</code> rather than crashing.</li>\n<li><strong>Return Value</strong>: On successful parsing, it returns a populated <code>SMSData</code> object containing the validated transaction details. If parsing fails for any reason, it returns <code>None</code>, allowing the calling code to handle invalid messages gracefully.</li>\n</ul>\n<p>This parser enables the SMS gateway to initiate payments by sending SMS messages like <code>123 | 456 | 50.00</code>, which the system can then process as a payment request from the user with ID 123 to the user with ID 456 for 50.00 rupees. The validation ensures only properly formatted payment instructions are processed.</p>\n<h4 id=\"authentication\">Authentication</h4>\n<blockquote>\n<p>The code is not production-grade secure, and is only meant for educational purposes. It is not recommended to use this code in a production environment without proper security measures. The code can be found <a href=\"https://github.com/celeris-schnell/backend/blob/master/auth.py\">here</a>.</p>\n</blockquote>\n<p>For the authentication system in this project, we implemented a minimal <code>signup</code> and <code>login</code> flow using FastAPI and PostgreSQL. While not production-grade secure (passwords are stored in plaintext and no token-based auth is implemented), it served the project’s needs as a lightweight placeholder. There was not enough time to implement a full-fledged authentication system, but this can be easily extended in the future.</p>\n<h6 id=\"database-tables--schema\">Database Tables &#x26; Schema</h6>\n<p>This system uses two main tables:</p>\n<ol>\n<li>\n<p><code>auth_table</code>: Stores basic authentication info.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\"><code><span class=\"line\"><span style=\"color:#89DDFF\">CREATE</span><span style=\"color:#89DDFF\"> TABLE</span><span style=\"color:#7AA2F7\"> auth_table</span><span style=\"color:#A9B1D6\"> (</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">     id </span><span style=\"color:#BB9AF7\">SERIAL</span><span style=\"color:#9D7CD8;font-style:italic\"> PRIMARY KEY</span><span style=\"color:#A9B1D6\">,</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">     email </span><span style=\"color:#BB9AF7\">TEXT</span><span style=\"color:#89DDFF\"> UNIQUE</span><span style=\"color:#89DDFF\"> NOT NULL</span><span style=\"color:#A9B1D6\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">     password</span><span style=\"color:#BB9AF7\"> TEXT</span><span style=\"color:#89DDFF\"> NOT NULL</span><span style=\"color:#A9B1D6\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">     name</span><span style=\"color:#BB9AF7\"> TEXT</span><span style=\"color:#A9B1D6\">,</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">     phoneNumber </span><span style=\"color:#BB9AF7\">TEXT</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\"> );</span></span></code></pre>\n</li>\n<li>\n<p><code>users</code>: Stores user-specific metadata like balance. When a user signs up, an entry is created in both tables.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\"><code><span class=\"line\"><span style=\"color:#89DDFF\"> CREATE</span><span style=\"color:#89DDFF\"> TABLE</span><span style=\"color:#7AA2F7\"> users</span><span style=\"color:#A9B1D6\"> (</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">     id </span><span style=\"color:#BB9AF7\">INTEGER</span><span style=\"color:#9D7CD8;font-style:italic\"> PRIMARY KEY</span><span style=\"color:#9D7CD8;font-style:italic\"> REFERENCES</span><span style=\"color:#A9B1D6\"> auth_table(id),</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">     balance </span><span style=\"color:#BB9AF7\">NUMERIC</span><span style=\"color:#9D7CD8;font-style:italic\"> DEFAULT</span><span style=\"color:#FF9E64\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\"> );</span></span></code></pre>\n</li>\n</ol>\n<h6 id=\"request-models\">Request Models</h6>\n<ul>\n<li><code>SignupRequest</code>: Accepts <code>email</code>, <code>password</code>, <code>name</code>, and <code>phoneNumber</code></li>\n<li><code>LoginRequest</code>: Accepts <code>email</code> and <code>password</code></li>\n</ul>\n<p>These use Pydantic models for type validation.</p>\n<h6 id=\"endpoints\">Endpoints</h6>\n<ol>\n<li>\n<p><code>POST /auth/signup</code></p>\n<ul>\n<li>Check if the email already exists.</li>\n<li>Insert new user into <code>auth_table</code>.</li>\n<li>Commit the transaction and fetch the <code>user_id</code>.</li>\n<li>Call <code>create_user(...)</code> to initialize the user in the <code>users</code> table (likely with default balance <code>0</code>).</li>\n</ul>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#7AA2F7\">create_user</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">user_id</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> payload</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">name</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> payload</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">phoneNumber</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n</li>\n<li>\n<p><code>POST /auth/login</code></p>\n<ul>\n<li>Lookup the user by email.</li>\n<li>Compare passwords (plain comparison; no hashing).</li>\n<li>If matched, fetch the user’s balance from <code>users</code> table.</li>\n<li>Return basic user info in the response.</li>\n</ul>\n</li>\n</ol>\n<h6 id=\"security-disclaimer\">Security Disclaimer</h6>\n<p>This auth system was intentionally kept simple:</p>\n<ul>\n<li>No password hashing (e.g., bcrypt)</li>\n<li>No session management or tokens (e.g., JWT)</li>\n<li>No rate-limiting or brute-force protection</li>\n</ul>\n<blockquote>\n<p>This was just a side module for internal functionality, not meant for public production use, as during demonstration, we had to show the basic functionality of the app. In a real-world scenario, you would never store passwords in plaintext or expose sensitive user data without proper security measures.</p>\n</blockquote>\n<h6 id=\"utilities\">Utilities</h6>\n<ol>\n<li>\n<p><code>get_db_connection()</code></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> get_db_connection</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\"> -></span><span style=\"color:#A9B1D6\"> Tuple</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">Any</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> Any</span><span style=\"color:#9ABDF5\">]:</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    \"\"\"Create and return a database connection and cursor\"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    connection </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> psycopg2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">connect</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">**</span><span style=\"color:#FF9E64\">DB_CONFIG</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    cursor </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> connection</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">cursor</span><span style=\"color:#9ABDF5\">()</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> connection</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> cursor</span></span></code></pre>\n<p>This utility loads database credentials from a <code>.env</code> file using <code>python-dotenv</code>, then establishes a PostgreSQL connection using <code>psycopg2</code>. It returns both the <code>connection</code> and the <code>cursor</code> for executing SQL queries. This keeps DB access clean and reusable across different modules.</p>\n</li>\n<li>\n<p><code>create_user()</code></p>\n<p>Initializes user-specific data. This utility function inserts a new entry into the <code>users</code> table after signup. It receives the <code>id</code>, <code>balance</code>, <code>name</code>, and <code>phoneNumber</code>, opens a DB connection, and performs the insert operation.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> create_user</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">id</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> int</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> balance</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> int</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> name</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> str</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> phoneNumber</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> str</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#E0AF68\">...</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">cursor</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">execute</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#9ECE6A\">    INSERT INTO users (id, balance, name, \"phoneNumber\")</span></span>\n<span class=\"line\"><span style=\"color:#9ECE6A\">    VALUES (%s, %s, %s, %s)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">\"\"\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#0DB9D7\">id</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> balance</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> name</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> phoneNumber</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#E0AF68\">...</span></span></code></pre>\n<p>It’s called right after a successful signup to initialize the user’s extended profile. The <code>users</code> table is used to store additional data like <code>balance</code> which isn’t part of the core auth system.</p>\n</li>\n</ol>\n<h4 id=\"transaction-service-core-of-celeris-payments\">Transaction Service: Core of Celeris Payments</h4>\n<blockquote>\n<p>I will give a brief overview of the code in this section, as it is quite long and complex. The code can be found <a href=\"https://github.com/celeris-schnell/backend/blob/master/transaction_service.py\">here</a>. I highly recommend reading the code to understand how it works, as it is the core of the Celeris payments system.</p>\n</blockquote>\n<p>This module powers the <strong>actual money flow</strong> within the Celeris platform - checking balances, transferring money between users, recording transactions, and triggering SMS notifications after a transfer. Here’s a breakdown of the key functions:</p>\n<ol>\n<li>\n<p><code>check_balance(client_id, amount)</code></p>\n<p>Checks whether a user has sufficient balance to make a payment.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#A9B1D6\">cursor</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">execute</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">SELECT balance FROM users WHERE id = %s;</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#C0CAF5\">client_id</span><span style=\"color:#89DDFF\">,)</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<ul>\n<li>Returns <code>True</code> if the user has enough funds, otherwise <code>False</code>.</li>\n<li>Used to <strong>validate</strong> transactions before initiating them.</li>\n</ul>\n</li>\n<li>\n<p><code>generate_sms(id, amount, status, typ)</code></p>\n<p>Triggers an external SMS notification by sending a request to the Celeris SMS gateway.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#A9B1D6\">data </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#9ECE6A\">phoneNumber</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BB9AF7\"> f</span><span style=\"color:#9ECE6A\">\"+91</span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#C0CAF5\">phoneNumber</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    '</span><span style=\"color:#9ECE6A\">message</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BB9AF7\"> f</span><span style=\"color:#9ECE6A\">\"</span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#0DB9D7\">int</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">amount</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">|</span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#C0CAF5\">status</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">|</span><span style=\"color:#BB9AF7\">{</span><span style=\"color:#C0CAF5\">typ</span><span style=\"color:#BB9AF7\">}</span><span style=\"color:#9ECE6A\">\"</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">requests</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">post</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">url</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> json</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#C0CAF5\">data</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<ul>\n<li>Fetches the user’s phone number from the DB.</li>\n<li>Sends a structured message like <code>500|SUCCESS|SEND</code> to a the SMS gateway to send back to the user/merchant based on the type of transaction (provided by the argument <code>typ</code>). The IP address of the SMS gateway is exposed to the internet using ngrok, so that it can be accessed from anywhere. The IP address is stored in the <code>.env</code> file.</li>\n<li>Used for <strong>user-facing feedback</strong> after a transaction.</li>\n</ul>\n</li>\n<li>\n<p><code>create_transaction(sender_id, receiver_id, amount, status)</code></p>\n<p>Records a transaction in the <code>transactions</code> table.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\"><code><span class=\"line\"><span style=\"color:#7DCFFF\">INSERT INTO</span><span style=\"color:#A9B1D6\"> transactions (sender_id, receiver_id, amount, </span><span style=\"color:#89DDFF\">status</span><span style=\"color:#A9B1D6\">)</span></span></code></pre>\n<ul>\n<li>Stores who paid whom, how much, and with what status (<code>SUCCESS</code>, <code>FAILED</code>, etc.).</li>\n<li>This is the official ledger for internal auditing.</li>\n</ul>\n</li>\n<li>\n<p><code>update_user(sender_id, receiver_id, amount)</code></p>\n<p>Performs the actual money movement by:</p>\n<ol>\n<li>Decreasing the sender’s balance</li>\n<li>Increasing the receiver’s balance</li>\n</ol>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\"><code><span class=\"line\"><span style=\"color:#7DCFFF\">UPDATE</span><span style=\"color:#A9B1D6\"> users </span><span style=\"color:#7DCFFF\">SET</span><span style=\"color:#A9B1D6\"> balance </span><span style=\"color:#BB9AF7\">=</span><span style=\"color:#A9B1D6\"> balance </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#A9B1D6\"> %s </span><span style=\"color:#7DCFFF\">WHERE</span><span style=\"color:#A9B1D6\"> id </span><span style=\"color:#BB9AF7\">=</span><span style=\"color:#A9B1D6\"> %s</span></span>\n<span class=\"line\"><span style=\"color:#7DCFFF\">UPDATE</span><span style=\"color:#A9B1D6\"> users </span><span style=\"color:#7DCFFF\">SET</span><span style=\"color:#A9B1D6\"> balance </span><span style=\"color:#BB9AF7\">=</span><span style=\"color:#A9B1D6\"> balance </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#A9B1D6\"> %s </span><span style=\"color:#7DCFFF\">WHERE</span><span style=\"color:#A9B1D6\"> id </span><span style=\"color:#BB9AF7\">=</span><span style=\"color:#A9B1D6\"> %s</span></span></code></pre>\n<ul>\n<li>Runs both updates in a transaction block (<code>BEGIN</code> … <code>COMMIT</code>)</li>\n<li>Uses <code>RETURNING id</code> to ensure both updates succeeded</li>\n<li>Rolls back if anything fails</li>\n</ul>\n</li>\n</ol>\n<h6 id=\"design-notes\">Design Notes</h6>\n<ul>\n<li>The use of <code>BEGIN</code> and <code>conn.rollback()</code> ensures <strong>consistency</strong> - either both balances change, or none do.</li>\n<li><code>generate_sms()</code> is <strong>decoupled</strong> from the DB layer, making it easy to replace or expand into richer notifications later.</li>\n<li>All DB operations go through the centralized <code>get_db_connection()</code> utility.</li>\n</ul>\n<p>This file is the <strong>financial engine</strong> behind the scenes, ensuring transactions are safe, logged, and traceable - even if the frontend goes offline or fails. It reflects how Celeris prioritizes atomicity and user feedback in offline-first environments.</p>\n<h4 id=\"celeris-api-the-restful-interface\">Celeris API: The RESTful Interface</h4>\n<p>This is the entry point for all external interactions with the Celeris backend. It exposes the REST interface that listens for sync, transaction, and admin events. The API is built using FastAPI, which provides automatic OpenAPI documentation and easy integration with the transaction service.</p>\n<blockquote>\n<p>All of the code snippets being discussed in this section are available <a href=\"https://github.com/celeris-schnell/backend/blob/master/app.py\">here</a>.</p>\n</blockquote>\n<h6 id=\"app-initialization\">App Initialization</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#A9B1D6\">app </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> FastAPI</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">title</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Payment API</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> description</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">API for handling payments via SMS</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">app</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">add_middleware</span><span style=\"color:#9ABDF5\">(</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">    CORSMiddleware</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E0AF68\">    allow_origins</span><span style=\"color:#89DDFF\">=[</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">*</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">],</span><span style=\"color:#51597D;font-style:italic\">  # Allow all origins</span></span>\n<span class=\"line\"><span style=\"color:#E0AF68\">    allow_credentials</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\">True</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E0AF68\">    allow_methods</span><span style=\"color:#89DDFF\">=[</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">*</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">],</span><span style=\"color:#51597D;font-style:italic\">  # Allow all HTTP methods</span></span>\n<span class=\"line\"><span style=\"color:#E0AF68\">    allow_headers</span><span style=\"color:#89DDFF\">=[</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">*</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">],</span><span style=\"color:#51597D;font-style:italic\">  # Allow all headers</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">app</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">include_router</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">auth_router</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<ul>\n<li>Enables CORS for all origins (useful in mobile/native dev environments).</li>\n<li>Mounts the <code>auth</code> router for handling signups or registrations.</li>\n<li>Defines REST endpoints to:\n<ul>\n<li>Sync user data</li>\n<li>Process payment SMS</li>\n<li>Add balance (admin or debug tool)</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"sync-endpoint\">Sync Endpoint</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">app</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">post</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">/sync</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<p>This endpoint is used to synchronize user data between the Celeris app and the backend server whenever the Celeris app user comes online.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#A9B1D6\"> conn</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> cursor </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> get_db_connection</span><span style=\"color:#9ABDF5\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">cursor</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">execute</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#9ECE6A\">SELECT id, name, balance, \"phoneNumber\" FROM users WHERE id = %s;</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#C0CAF5\">request</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">id</span><span style=\"color:#89DDFF\">,)</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">user </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> cursor</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">fetchone</span><span style=\"color:#9ABDF5\">()</span></span></code></pre>\n<p>Fetches user details like name, balance, and phone number using the given ID. It returns a JSON response with the user’s data, which the Celeris app can use to update its local state.</p>\n<h6 id=\"sms-webhook-endpoint\">SMS Webhook Endpoint</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">app</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">post</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">/sms-webhook</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<p>This endpoint is the core of the Celeris payment system, where the SMS gateway sends incoming payment requests. It processes the SMS data, checks balances, and initiates transactions.</p>\n<p>Flow:</p>\n<ol>\n<li><strong>Parse</strong> message from <code>Body</code> using <code>parse_sms_message()</code></li>\n<li><strong>Check</strong> sender balance</li>\n<li><strong>If insufficient</strong>, record the transaction and respond with <code>402</code></li>\n<li><strong>If sufficient</strong>, update balances atomically via <code>update_user</code></li>\n<li>Log the transaction and trigger dual <code>generate_sms()</code> calls (sender + receiver)</li>\n</ol>\n<p>This powers the completely <strong>offline-first</strong> payment UX. The Celeris app can send payment requests via SMS, and the backend processes them without needing a live internet connection. The SMS gateway acts as the bridge between the offline app and the online server.</p>\n<h6 id=\"add-balance-endpoint\">Add Balance Endpoint</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">app</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">post</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">/addbalance</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<p>This endpoint is a simple admin tool to add balance to a user’s account. It accepts a JSON payload with <code>id</code> and <code>amount</code>, checks if the user exists, and updates their balance accordingly.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#A9B1D6\">conn</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> cursor </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> get_db_connection</span><span style=\"color:#9ABDF5\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">cursor</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">execute</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">SELECT balance FROM users WHERE id = %s;</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#C0CAF5\">request</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">user_id</span><span style=\"color:#89DDFF\">,)</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">user </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> cursor</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">fetchone</span><span style=\"color:#9ABDF5\">()</span></span>\n<span class=\"line\"><span style=\"color:#E0AF68\">...</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">current_balance </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> user</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#9ABDF5\">]</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">new_balance </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> current_balance </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#A9B1D6\"> request</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">amount</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># Update balance</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">cursor</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">execute</span><span style=\"color:#9ABDF5\">(</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    \"</span><span style=\"color:#9ECE6A\">UPDATE users SET balance = %s WHERE id = %s;</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    (</span><span style=\"color:#C0CAF5\">new_balance</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> request</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">user_id</span><span style=\"color:#89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#E0AF68\">...</span></span></code></pre>\n<p>This is the only endpoint that allows modifying user balances directly, which is useful for debugging or testing purposes. It should be secured in a production environment to prevent unauthorized access.</p>\n<h4 id=\"highlights\">Highlights</h4>\n<ul>\n<li>All exceptions are caught and handled gracefully using FastAPI’s <code>HTTPException</code>.</li>\n<li>Uses <strong>central DB connection</strong> logic (<code>get_db_connection()</code>), reducing boilerplate and easing testing.</li>\n<li>The SMS parser and notification flow are <strong>modular</strong>, decoupling backend from SMS gateway logic.</li>\n<li>Acts as a <strong>coordinator</strong> that connects low-level transactional logic with high-level RESTful interfaces.</li>\n</ul>\n<blockquote>\n<p>We expose the Celeris backend via ngrok, which allows us to access the backend from anywhere in the world. This is useful for testing and debugging purposes, as we can easily access the backend from our local machines without having to deploy it to a remote server. You can do it your way by deploying it to a remote server, or using a cloud provider like AWS, GCP, or Azure.</p>\n</blockquote>\n<h2 id=\"celeris-database\">Celeris Database</h2>\n<p>The Celeris database is the backbone of the entire system, storing all user data, transaction history, and balances. It uses Supabase as the database provider, which is a managed PostgreSQL service that provides a RESTful API for accessing the database. This allows us to easily interact with the database from the Celeris app and the Celeris backend. This reduced our development time significantly, as we did not have to worry about setting up and managing the database ourselves. Supabase also provides a web interface for managing the database, which made it easy to visualize the data and run queries.</p>\n<p><img src=\"/blog-assets/celeris/celeris-database.png\" alt=\"Supabase Database Schema\"></p>\n<h4 id=\"the-users-table\">The users table</h4>\n<p>Stores user profile and wallet data:</p>\n<ul>\n<li><code>id</code>: Primary key</li>\n<li><code>name</code>: User’s name</li>\n<li><code>phoneNumber</code>: Used to identify users via SMS</li>\n<li><code>balance</code>: Current wallet balance</li>\n</ul>\n<h4 id=\"the-transactions-table\">The transactions table</h4>\n<p>Logs all transactions between users:</p>\n<ul>\n<li><code>id</code>: Primary key</li>\n<li><code>created_at</code>: Timestamp of transaction</li>\n<li><code>sender_id</code>: Foreign key to <code>users.id</code></li>\n<li><code>receiver_id</code>: Foreign key to <code>users.id</code></li>\n<li><code>amount</code>: Transaction amount</li>\n<li><code>status</code>: Transaction status (<code>successful</code>, <code>failed</code>, <code>insufficient_balance</code>)</li>\n</ul>\n<h4 id=\"the-auth_table\">The auth_table</h4>\n<p>Stores authentication credentials:</p>\n<ul>\n<li><code>id</code>: Primary key</li>\n<li><code>created_at</code>: Timestamp of registration</li>\n<li><code>email</code>: Login email</li>\n<li><code>password</code>: Password (stored in plaintext for simplicity in our case)</li>\n<li><code>name</code>: User’s name (duplicated here for auth context)</li>\n<li><code>phoneNumber</code>: Used for SMS and linking with <code>users</code></li>\n</ul>\n<h4 id=\"notes\">Notes</h4>\n<ul>\n<li>The database is accessed via Supabase’s Postgres client and raw SQL queries.</li>\n<li>Transactions are recorded regardless of success to maintain a full audit trail.</li>\n<li>Phone numbers are the key link between SMS commands and user accounts.</li>\n<li>Balance updates and transaction logs are handled atomically to maintain consistency.</li>\n</ul>\n<p>This schema is designed to be small, fast, and easy to query for a single-node offline-first payment ecosystem.</p>\n<h2 id=\"celeris-app-the-offline-cum-online-client-application\">Celeris App: The Offline-cum-Online Client Application</h2>\n<p>The Celeris app is the client-side application that allows users to interact with the Celeris system. It is an Android application built using Kotlin, which allows users to send and receive payments via SMS. The app is designed to be offline-first, meaning that it can work without an internet connection, and will sync with the server when the user comes online.</p>\n<p>Although we first thought of starting with React Native, we faced one major issue which bottlenecked the whole development: React Native does not allow you to send SMS messages directly from the app, as it requires the user to manually select the SMS app to send the message. Even Flutter did not have this feature. This was a major blocker for us, as we wanted to send SMS messages directly from the app without any user intervention. So, we decided to build the app using Kotlin, which allows us to send SMS messages directly from the app using the Android SMS APIs.</p>\n<p><img src=\"/blog-assets/celeris/frontend-architecture.jpg\" alt=\"Celeris Frontend App Architecture\"></p>\n<p>This architecture image for the frontend is very basic, and the app evolved a lot during the whole development process, but you can still take a look at it for reference.</p>\n<blockquote>\n<p>It is not possible to explain the whole source code, but I will be explaining the key components of the app, and how they work together to create the Celeris system. The code can be found <a href=\"https://github.com/celeris-schnell/frontend\">here</a>. I highly recommend going through the code to understand how it works, as it is the best way to learn how the app works. You can have the code open of the section I’m explaining, and follow along with the explanation.</p>\n</blockquote>\n<h4 id=\"libraries-and-dependencies\">Libraries and Dependencies</h4>\n<ul>\n<li>The app uses <strong>ConstraintLayout</strong> and <strong>Material Components</strong> for UI.</li>\n<li><strong>Lottie</strong> is used for lightweight animations during transaction feedback and loading states.</li>\n<li><strong>ZXing</strong> (<code>com.google.zxing:core</code>) is used for QR code scanning functionality, allowing users to scan QR codes to initiate payments.</li>\n<li><strong>Retrofit</strong> is used for network requests to the Celeris backend, allowing the app to communicate with the server when online.</li>\n</ul>\n<h4 id=\"ui-components\">UI Components</h4>\n<ul>\n<li>The app has a simple and intuitive user interface, with a bottom navigation bar that allows users to switch between different sections of the app.</li>\n<li>It uses Material Design components to provide a consistent and modern look and feel. It uses <strong>ConstraintLayout</strong> for flexible and responsive layouts, ensuring the app looks good on different screen sizes and orientations.</li>\n<li>Then, it uses <strong>Lottie</strong> animations to provide visual feedback during transactions and loading states.</li>\n<li>It uses Fragment-based navigation to switch between different sections of the app instead of Activities, which allows for smoother transitions and better state management.</li>\n<li>It uses <strong>Android Navigation Component</strong> for handling navigation between different screens, making it easier to manage back stack and going to previous screens.</li>\n</ul>\n<h4 id=\"sqlite-database-helpers\">SQLite Database Helpers</h4>\n<p>The app uses SQLite to store user information and auth information locally. This allows the app to function offline and sync with the server when the user comes online. This is not a secure way to store sensitive information, but it is sufficient for the purpose of this project. The SQLite schema and access logic are encapsulated in helper classes.</p>\n<h5 id=\"authdatabasehelper\">AuthDatabaseHelper</h5>\n<p><code>AuthDatabaseHelper</code> handles authentication-related data, primarily storing the currently logged-in user’s metadata. It inherits from <code>SQLiteOpenHelper</code> and manages a single table: <code>users</code>.</p>\n<p><strong>Table Structure</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\"><code><span class=\"line\"><span style=\"color:#89DDFF\">CREATE</span><span style=\"color:#89DDFF\"> TABLE</span><span style=\"color:#7AA2F7\"> users</span><span style=\"color:#A9B1D6\"> (</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    id </span><span style=\"color:#BB9AF7\">INTEGER</span><span style=\"color:#9D7CD8;font-style:italic\"> PRIMARY KEY</span><span style=\"color:#A9B1D6\">,</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    name</span><span style=\"color:#BB9AF7\"> TEXT</span><span style=\"color:#A9B1D6\">,</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    balance </span><span style=\"color:#BB9AF7\">INTEGER</span><span style=\"color:#A9B1D6\">,</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    email </span><span style=\"color:#BB9AF7\">TEXT</span><span style=\"color:#A9B1D6\">,</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    phoneNumber </span><span style=\"color:#BB9AF7\">TEXT</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">);</span></span></code></pre>\n<p><strong>Key Methods</strong>:</p>\n<ul>\n<li><code>onCreate()</code> / <code>onUpgrade()</code>: Standard lifecycle methods for setting up and refreshing the database schema.</li>\n<li><code>checkDatabaseExists(Context): Boolean</code>: Utility to verify whether the database file exists. Useful for conditional flows on first install or logout.</li>\n<li><code>saveUser(...)</code>: Inserts a new user row into the table.</li>\n<li><code>isUserLoggedIn(): Boolean</code>: Checks if any user data exists, implying a logged-in state.</li>\n<li><code>getUser(): User?</code>: Retrieves the stored user as a Kotlin model object. Returns null if no user exists.</li>\n<li><code>setBalance(balance: Int)</code>: Updates the balance column for the logged-in user.</li>\n<li><code>logoutUser()</code>: Clears the users table, effectively logging out the user.</li>\n</ul>\n<h5 id=\"qr-code-database-helper\">QR Code Database Helper</h5>\n<p>The <code>DatabaseHelper</code> class is a dedicated <code>SQLiteOpenHelper</code> used for <strong>persisting merchant QR codes locally</strong>. This is especially important in offline mode, allowing merchants to display their QR code without needing a network call.</p>\n<p><strong>Table Structure</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\"><code><span class=\"line\"><span style=\"color:#89DDFF\">CREATE</span><span style=\"color:#89DDFF\"> TABLE</span><span style=\"color:#7AA2F7\"> merchant_qr</span><span style=\"color:#A9B1D6\"> (</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    merchant_id </span><span style=\"color:#BB9AF7\">TEXT</span><span style=\"color:#9D7CD8;font-style:italic\"> PRIMARY KEY</span><span style=\"color:#A9B1D6\">,</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    qr_code BLOB</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">);</span></span></code></pre>\n<ul>\n<li><code>merchant_id</code>: Unique identifier for the merchant (used as the primary key).</li>\n<li><code>qr_code</code>: QR code image stored as a BLOB.</li>\n</ul>\n<p><strong>Key Methods</strong>:</p>\n<ul>\n<li>\n<p><code>onCreate()</code> / <code>onUpgrade()</code>: Handles initial schema creation and upgrading. Drops the table and recreates it on version change.</p>\n</li>\n<li>\n<p><code>saveQRCode(merchantId: String, qrCode: Bitmap)</code></p>\n<ul>\n<li>Serializes the <code>Bitmap</code> to a PNG byte array.</li>\n<li>Uses <code>db.replace()</code> to insert or update the QR code for the given merchant.</li>\n<li>Enables idempotent writes.</li>\n</ul>\n</li>\n<li>\n<p><code>getQRCode(merchantId: String): Bitmap?</code></p>\n<ul>\n<li>Reads the <code>BLOB</code> data from the database for the given merchant ID.</li>\n<li>Decodes and returns it as a <code>Bitmap</code> object.</li>\n<li>Returns <code>null</code> if no entry exists.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Notes</strong>:</p>\n<ul>\n<li>Efficient for quick QR retrieval in merchant dashboards or payment receive flows.</li>\n<li>QR codes are stored in binary to minimize transformation overhead at runtime.</li>\n</ul>\n<p>This database helper is crucial for the offline-first design of the Celeris app, allowing merchants to continue accepting payments even without an internet connection. It ensures that QR codes are readily available and can be displayed instantly when needed.</p>\n<h4 id=\"user-model\">User Model</h4>\n<p>The <code>User</code> class is a simple data model representing an authenticated user within the Celeris app. It is used primarily for local storage via SQLite (<code>AuthDatabaseHelper</code>) and in-memory user state management.</p>\n<p><strong>Fields</strong></p>\n<ul>\n<li>id (<code>int</code>): Unique identifier for the user (same as the Supabase user ID).</li>\n<li>name (<code>String</code>): User’s display name.</li>\n<li>balance (<code>int</code>): Current wallet balance (in rupees).</li>\n<li>email (<code>String</code>): Registered email address.</li>\n<li>phoneNumber (<code>String</code>): Registered mobile number.</li>\n</ul>\n<p><strong>Constructors</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#7AA2F7\">User</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#7AA2F7\"> id</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> String</span><span style=\"color:#7AA2F7\"> name</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> int</span><span style=\"color:#7AA2F7\"> balance</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> String</span><span style=\"color:#7AA2F7\"> email</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> String</span><span style=\"color:#7AA2F7\"> phoneNumber</span><span style=\"color:#9ABDF5\">)</span></span></code></pre>\n<p>Initializes a user object with all required fields.</p>\n<p><strong>Getters</strong></p>\n<p><code>getId()</code>, <code>getName()</code>, <code>getBalance()</code>, <code>getEmail()</code>, <code>getPhoneNumber()</code></p>\n<p><strong>Setters</strong></p>\n<p><code>setId(int id)</code>, <code>setName(String name)</code>, <code>setBalance(int balance)</code>, <code>setEmail(String email)</code>, <code>setPhoneNumber(String phoneNumber)</code></p>\n<p><strong>Notes</strong></p>\n<ul>\n<li>Primarily used as a POJO (Plain Old Java Object) for local SQLite interactions.</li>\n<li>Designed with mutability in mind for balance updates and session management.</li>\n</ul>\n<h4 id=\"mainactivity\">MainActivity</h4>\n<p><code>MainActivity</code> is designed solely to redirect users based on their authentication status. It acts as the first screen that appears when the app is launched.</p>\n<h6 id=\"logic-breakdown\">Logic Breakdown</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">val</span><span style=\"color:#A9B1D6\"> dbHelper </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> AuthDatabaseHelper</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#F7768E\">this</span><span style=\"color:#A9B1D6\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#A9B1D6\"> (dbHelper.</span><span style=\"color:#7AA2F7\">isUserLoggedIn</span><span style=\"color:#A9B1D6\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    val</span><span style=\"color:#A9B1D6\"> intent </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> Intent</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#F7768E\">this</span><span style=\"color:#A9B1D6\">, SecureActivity::</span><span style=\"color:#7AA2F7\">class</span><span style=\"color:#A9B1D6\">.java)</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    startActivity</span><span style=\"color:#A9B1D6\">(intent)</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    finish</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">} </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    val</span><span style=\"color:#A9B1D6\"> intent </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> Intent</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#F7768E\">this</span><span style=\"color:#A9B1D6\">, AuthActivity::</span><span style=\"color:#7AA2F7\">class</span><span style=\"color:#A9B1D6\">.java)</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    startActivity</span><span style=\"color:#A9B1D6\">(intent)</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    finish</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<ul>\n<li>If <code>isUserLoggedIn()</code>:\n<ul>\n<li>Uses the local SQLite DB (<code>AuthDatabaseHelper</code>) to check for a saved user session.</li>\n<li>If a user <strong>exists in the local DB</strong>, they are assumed to be logged in <strong>offline</strong> or <strong>persistently</strong> and redirected to:\n<ul>\n<li><code>SecureActivity</code> (main post-login dashboard)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>If not:\n<ul>\n<li>User is routed to <code>AuthActivity</code>, where they can log in or sign up.</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"authentication-flow-pipeline\">Authentication Flow Pipeline</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>         ┌────────────┐</span></span>\n<span class=\"line\"><span>         │MainActivity│</span></span>\n<span class=\"line\"><span>         └─────┬──────┘</span></span>\n<span class=\"line\"><span>               │</span></span>\n<span class=\"line\"><span>     ┌─────────▼─────────┐</span></span>\n<span class=\"line\"><span>     │Check Local DB for  │</span></span>\n<span class=\"line\"><span>     │isUserLoggedIn()    │</span></span>\n<span class=\"line\"><span>     └─────────┬──────────┘</span></span>\n<span class=\"line\"><span>               │</span></span>\n<span class=\"line\"><span>     ┌─────────▼─────────┐</span></span>\n<span class=\"line\"><span>     │      Yes          │────────────▶ SecureActivity</span></span>\n<span class=\"line\"><span>     │(Session exists)   │</span></span>\n<span class=\"line\"><span>     └─────────┬─────────┘</span></span>\n<span class=\"line\"><span>               │</span></span>\n<span class=\"line\"><span>     ┌─────────▼─────────┐</span></span>\n<span class=\"line\"><span>     │      No           │────────────▶ AuthActivity</span></span>\n<span class=\"line\"><span>     │(First time / out) │</span></span>\n<span class=\"line\"><span>     └───────────────────┘</span></span></code></pre>\n<h6 id=\"integration-perspective\">Integration Perspective</h6>\n<ul>\n<li><code>MainActivity</code> provides clean isolation of authentication routing logic.</li>\n<li>It avoids unnecessary logic duplication in <code>AuthActivity</code> or <code>SecureActivity</code>.</li>\n<li>Supports <strong>offline-first principles</strong> by trusting persisted local session data.</li>\n</ul>\n<h4 id=\"authentication-flow\">Authentication Flow</h4>\n<p>The authentication system in Celeris is designed to support both offline access and server-based verification. This hybrid approach is achieved using Android Fragments, Retrofit for network operations, and SQLite for local data persistence.</p>\n<h6 id=\"authactivity\">AuthActivity</h6>\n<ul>\n<li><code>AuthActivity</code> is the launcher activity for unauthenticated users.</li>\n<li>It loads the layout <code>activity_auth.xml</code> which contains a fragment container (<code>R.id.auth_main</code>).</li>\n<li>On first launch (<code>savedInstanceState == null</code>), it loads the <code>Login</code> fragment by default.</li>\n<li>The <code>enableEdgeToEdge()</code> and window inset handling ensure modern UI compatibility across devices.</li>\n</ul>\n<h6 id=\"login-flow\">Login Flow</h6>\n<p>UI: <code>Login</code> fragment</p>\n<ul>\n<li>Collects email and password inputs.</li>\n<li>On “Login” click:\n<ul>\n<li>Validates fields.</li>\n<li>Sends a <code>LoginRequest</code> to the server via Retrofit.</li>\n<li>On success: - Receives a <code>LoginResponse</code> containing user information. - Stores user data using <code>AuthDatabaseHelper.saveUser(...)</code>. - Navigates to <code>SecureActivity</code> (the main authenticated screen).</li>\n<li>On failure: - Shows appropriate <code>Toast</code> for failure or network errors.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Key Detail:</strong></p>\n<ul>\n<li>Local user persistence means that after the first login, the user can be identified and allowed offline access.</li>\n<li><code>AuthDatabaseHelper.isUserLoggedIn()</code> is used to detect if a session exists locally.</li>\n</ul>\n<h6 id=\"signup-flow\">Signup Flow</h6>\n<p>UI: <code>SignUp</code> Fragment</p>\n<ul>\n<li>Collects email, password, name, and phone number.</li>\n<li>On “Sign Up” click:\n<ul>\n<li>Validates all fields.</li>\n<li>Sends a <code>SignupRequest</code> to the server.</li>\n<li>On success:\n<ul>\n<li>User is created in the backend.</li>\n<li>Their info is immediately stored locally with a default balance of 0, and the same in the database.</li>\n<li>Navigates to <code>SecureActivity</code>.</li>\n</ul>\n</li>\n<li>On failure:\n<ul>\n<li>Shows a <code>Toast</code> with error code or message.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"local-persistence-authdatabasehelper\">Local Persistence: AuthDatabaseHelper</h6>\n<ul>\n<li>Used by both <code>Login</code> and <code>SignUp</code> fragments.</li>\n<li>Handles creation and management of a <code>users</code> table in the <code>authdb</code> SQLite database.</li>\n<li>Provides methods:\n<ul>\n<li><code>saveUser(...)</code>: Saves user info.</li>\n<li><code>getUser()</code>: Retrieves the current user.</li>\n<li><code>isUserLoggedIn()</code>: Checks if any user data exists.</li>\n<li><code>logoutUser()</code>: Clears the local user record.</li>\n<li><code>setBalance(int)</code>: Updates balance offline.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Note: The SQLite method used here is not secure for storing sensitive info (like tokens or passwords), but is acceptable in this prototype where actual secrets are not persisted locally.</p>\n</blockquote>\n<h6 id=\"navigation-between-login--signup\">Navigation between Login &#x26; Signup</h6>\n<ul>\n<li>Both <code>Login</code> and <code>SignUp</code> fragments can navigate to each other using Fragment transactions.</li>\n<li>This avoids the need for separate activities and enables a smoother, single-activity navigation experience.</li>\n</ul>\n<h6 id=\"final-notes\">Final Notes</h6>\n<ul>\n<li>Once authenticated, users are redirected to <code>SecureActivity</code>, which represents the protected area of the app.</li>\n<li>The SQLite-backed persistence allows the app to determine login status and user identity even without network access - a key requirement for offline-first design.</li>\n</ul>\n<h4 id=\"post-authentication-secureactivity\">Post Authentication: SecureActivity</h4>\n<p>Once a user is successfully authenticated (via login or sign-up), the app launches the <code>SecureActivity</code>, which acts as the main dashboard for authenticated users.</p>\n<h6 id=\"authentication-check-offline-aware\">Authentication Check (Offline-aware)</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#7AA2F7\">AuthDatabaseHelper</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#F7768E\">this</span><span style=\"color:#A9B1D6\">).</span><span style=\"color:#7AA2F7\">apply</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#A9B1D6\"> (</span><span style=\"color:#BB9AF7\">!</span><span style=\"color:#7AA2F7\">isUserLoggedIn</span><span style=\"color:#A9B1D6\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        finish</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    }</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<ul>\n<li>Before proceeding, the activity checks whether a user is saved in the local <code>authdb</code> SQLite DB.</li>\n<li>If no user exists, <code>SecureActivity</code> finishes immediately — user is effectively “logged out”.</li>\n</ul>\n<blockquote>\n<p>This allows offline persistence of authentication without relying on JWTs or tokens.</p>\n</blockquote>\n<h6 id=\"network-monitoring-with-networkmonitor\">Network Monitoring with NetworkMonitor</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#A9B1D6\">networkMonitor </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> NetworkMonitor</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#F7768E\">this</span><span style=\"color:#A9B1D6\">) { isOnline, justCameOnline </span><span style=\"color:#BB9AF7\">-></span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#A9B1D6\"> (justCameOnline) </span><span style=\"color:#7AA2F7\">callApi</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<ul>\n<li><code>NetworkMonitor</code> is a utility class that monitors connectivity changes.</li>\n<li>The lambda <code>(isOnline, justCameOnline)</code> is triggered on connectivity updates:\n<ul>\n<li>If the device just came back online, <code>callApi()</code> is triggered.</li>\n<li>Here, it’s a placeholder showing a <code>Toast</code>, but in the real app this is where you’d:\n<ul>\n<li>Sync pending transactions.</li>\n<li>Refresh balance.</li>\n<li>Fetch latest updates from the backend.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>It is lifecycle-aware:\n<ul>\n<li>Starts monitoring in <code>onResume()</code></li>\n<li>Stops in <code>onPause()</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"profile-page\">Profile Page</h4>\n<p>Displays the authenticated user’s profile, including their:</p>\n<ul>\n<li>Name</li>\n<li>Contact info</li>\n<li>Unique user ID</li>\n<li>QR code for identification</li>\n<li>Logout functionality</li>\n</ul>\n<h6 id=\"user-info-from-local-db\">User Info from Local DB</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#7AA2F7\">AuthDatabaseHelper</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#7AA2F7\">requireContext</span><span style=\"color:#A9B1D6\">()).</span><span style=\"color:#7AA2F7\">apply</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    binding.username.text </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> user.name</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    binding.contact.text </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> user.phoneNumber</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    binding.userid.text </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> user.id.</span><span style=\"color:#7AA2F7\">toString</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<ul>\n<li>Pulls the currently logged-in user from the local <strong>AuthDatabaseHelper</strong>.</li>\n<li>Efficiently sets it into the UI with:\n<ul>\n<li><code>username</code></li>\n<li><code>contact</code></li>\n<li><code>userid</code></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"qr-code-handling\">QR Code Handling</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">var</span><span style=\"color:#A9B1D6\"> qrCode: </span><span style=\"color:#C0CAF5\">Bitmap</span><span style=\"color:#A9B1D6\">? </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> dbHelper?.</span><span style=\"color:#7AA2F7\">getQRCode</span><span style=\"color:#A9B1D6\">(binding.userid.text.</span><span style=\"color:#7AA2F7\">toString</span><span style=\"color:#A9B1D6\">())</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#A9B1D6\"> (qrCode </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#FF9E64\"> null</span><span style=\"color:#A9B1D6\">) {</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    qrCode </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> QRCodeUtils.</span><span style=\"color:#7AA2F7\">generateQRCode</span><span style=\"color:#A9B1D6\">(binding.userid.text.</span><span style=\"color:#7AA2F7\">toString</span><span style=\"color:#A9B1D6\">())</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    dbHelper?.</span><span style=\"color:#7AA2F7\">saveQRCode</span><span style=\"color:#A9B1D6\">(binding.userid.text.</span><span style=\"color:#7AA2F7\">toString</span><span style=\"color:#A9B1D6\">(), qrCode)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">qrCodeImageView?.</span><span style=\"color:#7AA2F7\">setImageBitmap</span><span style=\"color:#A9B1D6\">(qrCode)</span></span></code></pre>\n<ul>\n<li>Uses <code>DatabaseHelper</code> to <strong>cache</strong> and retrieve the user’s QR code locally.</li>\n<li>If missing, it generates a new one using <code>QRCodeUtils</code> and saves it.</li>\n<li>Reduces repeated generation for efficiency - QR codes are static for a user.</li>\n</ul>\n<h6 id=\"logout-functionality\">Logout Functionality</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#A9B1D6\">binding.logoutButton.</span><span style=\"color:#7AA2F7\">setOnClickListener</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    performLogout</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<ul>\n<li>Calls <code>logoutUser()</code> from <code>AuthDatabaseHelper</code> to delete the session.</li>\n<li>Navigates cleanly to <code>AuthActivity</code>, ensuring:\n<ul>\n<li>Task stack is cleared.</li>\n<li>No back navigation to secure areas (<code>Intent.FLAG_ACTIVITY_CLEAR_TASK</code>).</li>\n</ul>\n</li>\n</ul>\n<p>Flow:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>ProfilePage (Fragment under SecureActivity)</span></span>\n<span class=\"line\"><span>│</span></span>\n<span class=\"line\"><span>├── Displays: user.name, user.phoneNumber, user.id</span></span>\n<span class=\"line\"><span>├── QR Code: cached or generated → shown in ImageView</span></span>\n<span class=\"line\"><span>├── Logout Button:</span></span>\n<span class=\"line\"><span>│    └─> Clears DB via AuthDatabaseHelper</span></span>\n<span class=\"line\"><span>│    └─> Redirects to AuthActivity (login/signup)</span></span></code></pre>\n<h4 id=\"scan-and-pay-flow\">Scan and Pay Flow</h4>\n<p>The <code>ScanPayFragment</code> is responsible for scanning merchant QR codes using the device camera and decoding them in real time. This QR code typically contains the merchant’s client ID, which is used to initiate a money transfer.</p>\n<blockquote>\n<p>This part will be highly technical, as it involves CameraX for real-time QR code scanning and ZXing for decoding. You can skip this part if you are not interested in the technical details, but I highly recommend going through it to understand how the app works.</p>\n</blockquote>\n<h6 id=\"camera-initialization\">Camera Initialization</h6>\n<p>When the fragment is created, it checks for the <code>CAMERA</code> permission:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#A9B1D6\"> (</span><span style=\"color:#7AA2F7\">allPermissionsGranted</span><span style=\"color:#A9B1D6\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    startCamera</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">} </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    ActivityCompat.</span><span style=\"color:#7AA2F7\">requestPermissions</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#89DDFF\">..</span><span style=\"color:#A9B1D6\">.)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<p>If permission is granted, <code>startCamera()</code> sets up the CameraX pipeline.</p>\n<h6 id=\"camerax-setup\">CameraX Setup</h6>\n<p>We configure two CameraX use cases:</p>\n<ul>\n<li><strong>Preview</strong>: Renders the live camera feed in a <code>PreviewView</code>.</li>\n<li><strong>ImageAnalysis</strong>: Processes frames to detect and decode QR codes.</li>\n</ul>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">val</span><span style=\"color:#A9B1D6\"> preview </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> Preview.</span><span style=\"color:#7AA2F7\">Builder</span><span style=\"color:#A9B1D6\">().</span><span style=\"color:#7AA2F7\">build</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">preview.</span><span style=\"color:#7AA2F7\">setSurfaceProvider</span><span style=\"color:#A9B1D6\">(previewView.surfaceProvider)</span></span></code></pre>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">val</span><span style=\"color:#A9B1D6\"> imageAnalysis </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> ImageAnalysis.</span><span style=\"color:#7AA2F7\">Builder</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    .</span><span style=\"color:#7AA2F7\">setBackpressureStrategy</span><span style=\"color:#A9B1D6\">(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    .</span><span style=\"color:#7AA2F7\">build</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    .</span><span style=\"color:#7AA2F7\">also</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        it.</span><span style=\"color:#7AA2F7\">setAnalyzer</span><span style=\"color:#A9B1D6\">(executor, </span><span style=\"color:#7AA2F7\">QRCodeAnalyzer</span><span style=\"color:#A9B1D6\"> { result </span><span style=\"color:#BB9AF7\">-></span><span style=\"color:#89DDFF\"> ..</span><span style=\"color:#A9B1D6\">. })</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    }</span></span>\n<span class=\"line\"></span></code></pre>\n<p>These use cases are bound to the fragment lifecycle using:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#A9B1D6\">cameraProvider.</span><span style=\"color:#7AA2F7\">bindToLifecycle</span><span style=\"color:#A9B1D6\">(</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    viewLifecycleOwner,</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    CameraSelector.DEFAULT_BACK_CAMERA,</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    preview,</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    imageAnalysis</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">)</span></span></code></pre>\n<h6 id=\"qr-code-decoding\">QR Code Decoding</h6>\n<p><code>CameraX</code> delivers frames in <code>ImageProxy</code> format (<code>YUV_420_888</code>). We extract the Y-plane (luminance) and convert it into <code>PlanarYUVLuminanceSource</code>, which ZXing requires for decoding.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">val</span><span style=\"color:#A9B1D6\"> luminanceSource </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> imageProxy.</span><span style=\"color:#7AA2F7\">toLuminanceSource</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">val</span><span style=\"color:#A9B1D6\"> binaryBitmap </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> BinaryBitmap</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#7AA2F7\">HybridBinarizer</span><span style=\"color:#A9B1D6\">(luminanceSource))</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">val</span><span style=\"color:#A9B1D6\"> result </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> MultiFormatReader</span><span style=\"color:#A9B1D6\">().</span><span style=\"color:#7AA2F7\">decode</span><span style=\"color:#A9B1D6\">(binaryBitmap)</span></span></code></pre>\n<p>If decoding succeeds, we extract the text (client ID) from the QR code.</p>\n<h6 id=\"post-scan-navigation-and-storage\">Post-Scan Navigation and Storage</h6>\n<p>Once the QR code is decoded:</p>\n<ul>\n<li>We persist the scanned <code>client_id</code> using Jetpack DataStore.</li>\n<li>We navigate to the <code>SendMoney</code> fragment for the next step in the transaction.</li>\n</ul>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#A9B1D6\">lifecycleScope.</span><span style=\"color:#7AA2F7\">launch</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    saveClientIdToDataStore</span><span style=\"color:#A9B1D6\">(result.text)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    Navigation.</span><span style=\"color:#7AA2F7\">findNavController</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#89DDFF\">..</span><span style=\"color:#A9B1D6\">.).</span><span style=\"color:#7AA2F7\">navigate</span><span style=\"color:#A9B1D6\">(R.id.action_scanPayFragment_to_sendMoney)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<h6 id=\"data-persistence\">Data Persistence</h6>\n<p>Data is stored locally using Jetpack DataStore with the <code>stringPreferencesKey(\"client_id\")</code>:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#7AA2F7\">requireContext</span><span style=\"color:#A9B1D6\">().dataStore.</span><span style=\"color:#7AA2F7\">edit</span><span style=\"color:#A9B1D6\"> { preferences </span><span style=\"color:#BB9AF7\">-></span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    preferences[clientIdKey] </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> clientId</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<p>This component is used during customer-to-merchant payments. The merchant displays a static QR containing their client ID. The customer scans it and is redirected to the payment screen with the merchant ID preloaded, ready for an offline SMS-based payment.</p>\n<h4 id=\"send-money-flow\">Send Money Flow</h4>\n<p>After the user scans a merchant QR code, they are redirected to the <code>SendMoney</code> fragment. This screen is responsible for composing and sending the payment information via SMS to the offline Celeris payment server. They can directly come here as well without scanning a QR code, by entering the merchant’s client ID manually.</p>\n<h6 id=\"retrieving-scanned-merchant-id\">Retrieving Scanned Merchant ID</h6>\n<p>When the fragment is initialized, it uses Jetpack DataStore to retrieve the previously scanned merchant <code>client_id</code>:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#A9B1D6\">lifecycleScope.</span><span style=\"color:#7AA2F7\">launch</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    val</span><span style=\"color:#A9B1D6\"> clientId </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> getClientIdFromDataStore</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    binding.merchantid.</span><span style=\"color:#7AA2F7\">setText</span><span style=\"color:#A9B1D6\">(clientId)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<p><code>getClientIdFromDataStore()</code> reads the value from local persistent storage:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">val</span><span style=\"color:#A9B1D6\"> preferences </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> requireContext</span><span style=\"color:#A9B1D6\">().dataStore.</span><span style=\"color:#9D7CD8;font-style:italic\">data</span><span style=\"color:#A9B1D6\">.</span><span style=\"color:#7AA2F7\">first</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">return</span><span style=\"color:#A9B1D6\"> preferences[clientIdKey] ?: </span><span style=\"color:#9ECE6A\">\"\"</span></span></code></pre>\n<p>This auto-fills the merchant ID field on the UI, reducing manual input and avoiding errors.</p>\n<h6 id=\"loading-user-information\">Loading User Information</h6>\n<p>The app uses the <code>AuthDatabaseHelper</code> to access the user data. When the fragment loads, the user’s current balance is shown on screen:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#A9B1D6\">binding.balance.text </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> user.balance.</span><span style=\"color:#7AA2F7\">toString</span><span style=\"color:#A9B1D6\">()</span></span></code></pre>\n<h6 id=\"composing-the-payment-sms\">Composing the Payment SMS</h6>\n<p>When the user clicks the “Pay” button, the following steps occur:</p>\n<ul>\n<li>\n<p>The app constructs a raw message containing:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>&#x3C;sender_id>|&#x3C;receiver_id>|&#x3C;amount></span></span></code></pre>\n</li>\n<li>\n<p>This message is then sent as an SMS using Android’s <code>SmsManager</code>:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#A9B1D6\">smsManager.</span><span style=\"color:#7AA2F7\">sendTextMessage</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#9ECE6A\">\"&#x3C;sms_gateway_phone_number>\"</span><span style=\"color:#A9B1D6\">, </span><span style=\"color:#FF9E64\">null</span><span style=\"color:#A9B1D6\">, msg, </span><span style=\"color:#FF9E64\">null</span><span style=\"color:#A9B1D6\">, </span><span style=\"color:#FF9E64\">null</span><span style=\"color:#A9B1D6\">)</span></span></code></pre>\n</li>\n</ul>\n<h6 id=\"summary-of-the-flow\">Summary of the Flow</h6>\n<ol>\n<li>The user scans a merchant QR → <code>client_id</code> is saved.</li>\n<li>In <code>SendMoney</code>, this ID is fetched and pre-filled.</li>\n<li>The user enters the amount and presses “Pay”.</li>\n<li>An SMS containing user ID, merchant ID, and amount is sent to the SMS gateway.</li>\n</ol>\n<p>This flow supports <strong>offline payments</strong> in rural or low-connectivity environments by relying solely on SMS to transfer transactional data between devices and backend services.</p>\n<h4 id=\"success-activity\">Success Activity</h4>\n<p>The SuccessActivity is responsible for:</p>\n<ul>\n<li>Showing confirmation that a transaction has completed.</li>\n<li>Updating the user’s local balance based on the transaction direction (sent/received).</li>\n<li>Displaying the appropriate confirmation screen (<code>SentPage</code> or <code>ReceivePage</code>).</li>\n</ul>\n<h6 id=\"receiving-transaction-metadata-via-intent\">Receiving Transaction Metadata via Intent</h6>\n<p>This activity expects the following data to be passed in via <code>Intent</code> extras:</p>\n<ul>\n<li><code>type</code>: A <code>String</code> which indicates whether the transaction was <strong>“sent”</strong> or <strong>“recieved”</strong>.</li>\n<li><code>amount</code>: An <code>Int</code> representing the amount transferred.</li>\n</ul>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">val</span><span style=\"color:#A9B1D6\"> amount </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> intent.</span><span style=\"color:#7AA2F7\">getIntExtra</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#9ECE6A\">\"amount\"</span><span style=\"color:#A9B1D6\">, </span><span style=\"color:#FF9E64\">0</span><span style=\"color:#A9B1D6\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">val</span><span style=\"color:#A9B1D6\"> type </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> intent.</span><span style=\"color:#7AA2F7\">getStringExtra</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#9ECE6A\">\"type\"</span><span style=\"color:#A9B1D6\">)</span></span></code></pre>\n<p>This information is attached by the BroadcastReceiver that listens for incoming SMS messages. It determines the transaction type based on the content of the SMS and passes it to this activity.</p>\n<h6 id=\"displaying-confirmation-ui\">Displaying Confirmation UI</h6>\n<p>The layout <code>activity_success</code> contains a container where the result fragment is dynamically injected.</p>\n<p>Based on the transaction type:</p>\n<ul>\n<li>If sent, <code>SentPage</code> fragment is shown.</li>\n<li>If recieved, <code>ReceivePage</code> fragment is shown.</li>\n</ul>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#A9B1D6\"> (type </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#9ECE6A\"> \"sent\"</span><span style=\"color:#A9B1D6\">) {</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    supportFragmentManager.</span><span style=\"color:#7AA2F7\">beginTransaction</span><span style=\"color:#A9B1D6\">().</span><span style=\"color:#7AA2F7\">replace</span><span style=\"color:#A9B1D6\">(R.id.main, </span><span style=\"color:#7AA2F7\">SentPage</span><span style=\"color:#A9B1D6\">()).</span><span style=\"color:#7AA2F7\">commit</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">} </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#BB9AF7\"> if</span><span style=\"color:#A9B1D6\"> (type </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#9ECE6A\"> \"recieved\"</span><span style=\"color:#A9B1D6\">) {</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    supportFragmentManager.</span><span style=\"color:#7AA2F7\">beginTransaction</span><span style=\"color:#A9B1D6\">().</span><span style=\"color:#7AA2F7\">replace</span><span style=\"color:#A9B1D6\">(R.id.main, </span><span style=\"color:#7AA2F7\">ReceivePage</span><span style=\"color:#A9B1D6\">()).</span><span style=\"color:#7AA2F7\">commit</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<h6 id=\"updating-user-balance-in-local-storage\">Updating User Balance in Local Storage</h6>\n<p>After confirming the direction of the transaction, the user’s balance is updated accordingly using a local helper (<code>AuthDatabaseHelper</code>):</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">val</span><span style=\"color:#A9B1D6\"> db </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> AuthDatabaseHelper</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#F7768E\">this</span><span style=\"color:#A9B1D6\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#A9B1D6\"> (type </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#9ECE6A\"> \"sent\"</span><span style=\"color:#A9B1D6\">) {</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    db.</span><span style=\"color:#7AA2F7\">setBalance</span><span style=\"color:#A9B1D6\">(db.user.balance </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#A9B1D6\"> amount)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">} </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#BB9AF7\"> if</span><span style=\"color:#A9B1D6\"> (type </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#9ECE6A\"> \"recieved\"</span><span style=\"color:#A9B1D6\">) {</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    db.</span><span style=\"color:#7AA2F7\">setBalance</span><span style=\"color:#A9B1D6\">(db.user.balance </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#A9B1D6\"> amount)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<p>This operation is completely offline.</p>\n<h4 id=\"retrofit-client-utility\">Retrofit Client Utility</h4>\n<p>The <code>RetrofitClient</code> is a singleton object that provides a centralized HTTP client for all network operations in the Celeris app. It implements the singleton pattern using Kotlin’s <code>object</code> declaration and lazy initialization to ensure efficient resource usage and consistent API communication.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">object</span><span style=\"color:#C0CAF5\"> RetrofitClient</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    private</span><span style=\"color:#9D7CD8;font-style:italic\"> const</span><span style=\"color:#BB9AF7\"> val</span><span style=\"color:#A9B1D6\"> BASE_URL </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ECE6A\"> \"https://9997-2401-4900-6329-f-4f00-2453-c5e2-f72f.ngrok-free.app/\"</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    val</span><span style=\"color:#A9B1D6\"> instance: </span><span style=\"color:#C0CAF5\">AuthApi</span><span style=\"color:#C0CAF5\"> by</span><span style=\"color:#C0CAF5\"> lazy</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        Retrofit.</span><span style=\"color:#7AA2F7\">Builder</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">            .</span><span style=\"color:#7AA2F7\">baseUrl</span><span style=\"color:#A9B1D6\">(BASE_URL)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">            .</span><span style=\"color:#7AA2F7\">addConverterFactory</span><span style=\"color:#A9B1D6\">(GsonConverterFactory.</span><span style=\"color:#7AA2F7\">create</span><span style=\"color:#A9B1D6\">())</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">            .</span><span style=\"color:#7AA2F7\">build</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">            .</span><span style=\"color:#7AA2F7\">create</span><span style=\"color:#A9B1D6\">(AuthApi::</span><span style=\"color:#7AA2F7\">class</span><span style=\"color:#A9B1D6\">.java)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    }</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<p>The <code>RetrofitClient</code> serves as the gateway between the Android app and the Celeris backend server. When users perform authentication operations (login/signup), the app uses this client to send HTTP requests to the FastAPI endpoints. The responses are automatically converted to Kotlin objects, which are then processed by the authentication fragments.</p>\n<h4 id=\"authapi-utility\">AuthApi Utility</h4>\n<p>The <code>AuthApi</code> interface defines the contract for authentication-related HTTP operations using Retrofit’s annotation-based approach. It serves as a type-safe wrapper around the backend authentication endpoints.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">interface</span><span style=\"color:#C0CAF5\"> AuthApi</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">    @POST</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#9ECE6A\">\"/auth/signup\"</span><span style=\"color:#A9B1D6\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    fun</span><span style=\"color:#7AA2F7\"> signup</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#C0CAF5\">@Body</span><span style=\"color:#A9B1D6\"> request: </span><span style=\"color:#C0CAF5\">SignupRequest</span><span style=\"color:#A9B1D6\">): </span><span style=\"color:#C0CAF5\">Call</span><span style=\"color:#A9B1D6\">&#x3C;</span><span style=\"color:#C0CAF5\">SignupResponse</span><span style=\"color:#A9B1D6\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">    @POST</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#9ECE6A\">\"/auth/login\"</span><span style=\"color:#A9B1D6\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    fun</span><span style=\"color:#7AA2F7\"> login</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#C0CAF5\">@Body</span><span style=\"color:#A9B1D6\"> request: </span><span style=\"color:#C0CAF5\">LoginRequest</span><span style=\"color:#A9B1D6\">): </span><span style=\"color:#C0CAF5\">Call</span><span style=\"color:#A9B1D6\">&#x3C;</span><span style=\"color:#C0CAF5\">LoginResponse</span><span style=\"color:#A9B1D6\">></span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<h6 id=\"endpoints-1\">Endpoints</h6>\n<ul>\n<li><code>POST /auth/signup</code>: Handles user registration by accepting a <code>SignupRequest</code> object containing email, password, name, and phone number. The <code>@Body</code> annotation tells Retrofit to serialize the request object as JSON in the HTTP request body.</li>\n<li><code>POST /auth/login</code>: Manages user authentication by accepting a <code>LoginRequest</code> with email and password credentials. Both endpoints return <code>Call&#x3C;T></code> objects, enabling asynchronous execution with built-in error handling.</li>\n</ul>\n<h6 id=\"backend-integration\">Backend Integration</h6>\n<p>The AuthApi directly corresponds to the authentication endpoints in the Celeris FastAPI backend:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># Backend equivalent (FastAPI)</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">app</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">post</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">/auth/signup</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">async</span><span style=\"color:#BB9AF7\"> def</span><span style=\"color:#7AA2F7\"> signup</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">payload</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> SignupRequest</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    # User creation logic</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">app</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">post</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">/auth/login</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">async</span><span style=\"color:#BB9AF7\"> def</span><span style=\"color:#7AA2F7\"> login</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">payload</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> LoginRequest</span><span style=\"color:#9ABDF5\">):</span></span>\n<span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    # Authentication logic</span></span></code></pre>\n<p>This one-to-one mapping ensures consistency between client and server API contracts, reducing integration bugs and maintaining clear separation of concerns.</p>\n<h4 id=\"datautils-persistent-key-value-storage\">DataUtils: Persistent Key-Value Storage</h4>\n<p>The <code>DataUtils</code> file provides a Kotlin extension property that integrates Jetpack DataStore into the Android Context, enabling type-safe, asynchronous key-value storage throughout the app.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">val</span><span style=\"color:#A9B1D6\"> Context.dataStore: </span><span style=\"color:#C0CAF5\">DataStore</span><span style=\"color:#A9B1D6\">&#x3C;</span><span style=\"color:#C0CAF5\">Preferences</span><span style=\"color:#A9B1D6\">> </span><span style=\"color:#C0CAF5\">by</span><span style=\"color:#C0CAF5\"> preferencesDataStore</span><span style=\"color:#A9B1D6\">(name </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#9ECE6A\"> \"lmaodead\"</span><span style=\"color:#A9B1D6\">)</span></span></code></pre>\n<p>The DataStore is primarily used for storing temporary transaction data, particularly in the QR code scanning flow.</p>\n<h4 id=\"qrcodeutils-utility\">QRCodeUtils Utility</h4>\n<p>The <code>QRCodeUtils</code> class is a Java-based utility in the Celeris Android app responsible for generating QR codes, specifically used for merchant identification in customer-to-merchant (C2M) payment flows.</p>\n<h6 id=\"purpose\">Purpose</h6>\n<p>This utility generates a static QR code that encodes the merchant’s unique <code>client_id</code>. It is typically displayed on the merchant’s device or printed, enabling customers to scan and initiate payments offline via SMS.</p>\n<h6 id=\"implementation-breakdown\">Implementation Breakdown</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">public</span><span style=\"color:#9D7CD8;font-style:italic\"> class</span><span style=\"color:#C0CAF5\"> QRCodeUtils</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    public</span><span style=\"color:#9D7CD8;font-style:italic\"> static</span><span style=\"color:#BB9AF7\"> Bitmap</span><span style=\"color:#7AA2F7\"> generateQRCode</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">String</span><span style=\"color:#E0AF68\"> merchantId</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        ...</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p>This utility exposes a single static method - <code>generateQRCode(String merchantId)</code> - which accepts a merchant ID string and returns a <code>Bitmap</code> object representing the generated QR code.</p>\n<h6 id=\"qr-code-generation-logic\">QR Code Generation Logic</h6>\n<p>The utility uses the <strong>ZXing (Zebra Crossing)</strong> library to generate QR codes. Here’s the full breakdown of the process:</p>\n<ol>\n<li>\n<p><strong>Encode the merchant ID into a QR code matrix</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">QRCodeWriter</span><span style=\"color:#C0CAF5\"> writer</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BB9AF7\"> new</span><span style=\"color:#7AA2F7\"> QRCodeWriter</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\"> BitMatrix</span><span style=\"color:#C0CAF5\"> bitMatrix</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C0CAF5\"> writer</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">encode</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">merchantId</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> BarcodeFormat</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">QR_CODE</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 512</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 512</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span></code></pre>\n<ul>\n<li><code>QRCodeWriter</code> is a ZXing class that generates QR codes.</li>\n<li><code>merchantId</code> is encoded into a <code>BitMatrix</code> using the <code>BarcodeFormat.QR_CODE</code> format.</li>\n<li>The dimensions of the QR are hardcoded to <code>512x512</code> pixels, ensuring high visual fidelity for scanning.</li>\n</ul>\n</li>\n<li>\n<p><strong>Render the BitMatrix to a Bitmap</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">Bitmap</span><span style=\"color:#C0CAF5\"> bmp</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C0CAF5\"> Bitmap</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">createBitmap</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">width</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> height</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> Bitmap</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">Config</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">RGB_565</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span></code></pre>\n<ul>\n<li>A <code>Bitmap</code> is initialized to hold the visual QR code.</li>\n<li><code>RGB_565</code> format is used for memory-efficient bitmap creation (uses 2 bytes per pixel).</li>\n</ul>\n</li>\n<li>\n<p><strong>Paint the QR pixels manually</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">for</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#C0CAF5\"> x</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> x </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#A9B1D6\"> width</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> x</span><span style=\"color:#89DDFF\">++)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BB9AF7\">int</span><span style=\"color:#C0CAF5\"> y</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> y </span><span style=\"color:#BB9AF7\">&#x3C;</span><span style=\"color:#A9B1D6\"> height</span><span style=\"color:#89DDFF\">;</span><span style=\"color:#A9B1D6\"> y</span><span style=\"color:#89DDFF\">++)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">        bmp</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">setPixel</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">x</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> y</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> bitMatrix</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">get</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">x</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> y</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#BB9AF7\"> ?</span><span style=\"color:#C0CAF5\"> Color</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">BLACK</span><span style=\"color:#BB9AF7\"> :</span><span style=\"color:#C0CAF5\"> Color</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">WHITE</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<ul>\n<li>The nested loops iterate over every pixel in the matrix.</li>\n<li>The pixel is painted black if the bit at that location is <code>true</code>, else it’s painted <strong>white</strong>.</li>\n<li>This ensures precise control over QR code rendering, which is crucial for scanner compatibility.</li>\n</ul>\n</li>\n<li>\n<p><strong>Error Handling</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">catch</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#BB9AF7\">WriterException</span><span style=\"color:#E0AF68\"> e</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">     e</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">printStackTrace</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\"> }</span></span></code></pre>\n<p>If the QR code encoding fails (due to unsupported input or internal ZXing errors), the method logs the stack trace and returns <code>null</code>.</p>\n</li>\n</ol>\n<h6 id=\"usage-context-in-celeris\">Usage Context in Celeris</h6>\n<p>The <code>QRCodeUtils.generateQRCode()</code> function is used when merchants log in and land on their home screen. The app auto-generates a QR code with their <code>client_id</code> embedded:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">val</span><span style=\"color:#A9B1D6\"> qrBitmap </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> QRCodeUtils.</span><span style=\"color:#7AA2F7\">generateQRCode</span><span style=\"color:#A9B1D6\">(merchantId)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">qrImageView.</span><span style=\"color:#7AA2F7\">setImageBitmap</span><span style=\"color:#A9B1D6\">(qrBitmap)</span></span></code></pre>\n<p>This bitmap is then rendered into an <code>ImageView</code>, turning the app into a <strong>static offline payment receiver</strong> as well. In areas with low or no internet connectivity, having a <strong>static QR code</strong> that’s easily scannable by feature-rich offline Android devices is vital. This QR-based approach forms the backbone of Celeris’ offline-first vision, enabling seamless payments without a traditional internet layer.</p>\n<h4 id=\"networkmonitor-utility\">NetworkMonitor Utility</h4>\n<p>The <code>NetworkMonitor</code> class is a lightweight, lifecycle-aware network state observer in the Celeris Android application. It actively listens for changes in network connectivity and notifies the app about:</p>\n<ul>\n<li>Whether the device is online or offline.</li>\n<li>Whether the device just came online after being offline.</li>\n</ul>\n<p>This enables Celeris to <strong>reactively adjust UI/UX</strong> or trigger sync logic when connectivity status changes which is crucial in an app built to thrive in both connected and offline environments.</p>\n<h6 id=\"constructor-parameters\">Constructor Parameters</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">class</span><span style=\"color:#C0CAF5\"> NetworkMonitor</span><span style=\"color:#A9B1D6\">(</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    context: </span><span style=\"color:#C0CAF5\">Context</span><span style=\"color:#A9B1D6\">,</span></span>\n<span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    private</span><span style=\"color:#BB9AF7\"> val</span><span style=\"color:#A9B1D6\"> onNetworkChange: (</span><span style=\"color:#C0CAF5\">isOnline</span><span style=\"color:#A9B1D6\">: </span><span style=\"color:#C0CAF5\">Boolean</span><span style=\"color:#A9B1D6\">, </span><span style=\"color:#C0CAF5\">justCameOnline</span><span style=\"color:#A9B1D6\">: </span><span style=\"color:#C0CAF5\">Boolean</span><span style=\"color:#A9B1D6\">) -> </span><span style=\"color:#C0CAF5\">Unit</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">)</span></span></code></pre>\n<ul>\n<li><code>context</code>: Needed to obtain the system <code>ConnectivityManager</code>.</li>\n<li><code>onNetworkChange</code>: A callback lambda that is triggered whenever the device’s connectivity state changes.</li>\n</ul>\n<p><strong>Internals</strong></p>\n<ol>\n<li>\n<p>ConnectivityManager Reference</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">private</span><span style=\"color:#BB9AF7\"> val</span><span style=\"color:#A9B1D6\"> connectivityManager </span><span style=\"color:#89DDFF\">=</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    context.</span><span style=\"color:#7AA2F7\">getSystemService</span><span style=\"color:#A9B1D6\">(Context.CONNECTIVITY_SERVICE) </span><span style=\"color:#BB9AF7\">as</span><span style=\"color:#A9B1D6\"> ConnectivityManager</span></span></code></pre>\n<p>Fetches the system-level connectivity service for managing network state.</p>\n</li>\n<li>\n<p>Online State Memory</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">private</span><span style=\"color:#BB9AF7\"> var</span><span style=\"color:#A9B1D6\"> wasOnline </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> false</span></span></code></pre>\n<p>Stores the last known state of connectivity to detect state transitions (e.g., offline → online).</p>\n</li>\n<li>\n<p>NetworkCallback</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">private</span><span style=\"color:#BB9AF7\"> val</span><span style=\"color:#A9B1D6\"> networkCallback </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#BB9AF7\"> object</span><span style=\"color:#A9B1D6\"> : </span><span style=\"color:#C0CAF5\">ConnectivityManager</span><span style=\"color:#A9B1D6\">.</span><span style=\"color:#7AA2F7\">NetworkCallback</span><span style=\"color:#A9B1D6\">() {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    ..</span><span style=\"color:#A9B1D6\">.</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<p>Implements two key override methods:</p>\n<ul>\n<li>\n<p><strong>onAvailable</strong>:</p>\n<p>Triggered when a new network becomes available.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">override</span><span style=\"color:#BB9AF7\"> fun</span><span style=\"color:#7AA2F7\"> onAvailable</span><span style=\"color:#A9B1D6\">(network: </span><span style=\"color:#C0CAF5\">Network</span><span style=\"color:#A9B1D6\">) {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    val</span><span style=\"color:#A9B1D6\"> isOnline </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> isCurrentlyOnline</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#A9B1D6\"> (</span><span style=\"color:#BB9AF7\">!</span><span style=\"color:#A9B1D6\">wasOnline </span><span style=\"color:#BB9AF7\">&#x26;&#x26;</span><span style=\"color:#A9B1D6\"> isOnline) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        onNetworkChange</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#FF9E64\">true</span><span style=\"color:#A9B1D6\">, </span><span style=\"color:#FF9E64\">true</span><span style=\"color:#A9B1D6\">) </span><span style=\"color:#51597D;font-style:italic\">// Just came online</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    } </span><span style=\"color:#BB9AF7\">else</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">        onNetworkChange</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#FF9E64\">true</span><span style=\"color:#A9B1D6\">, </span><span style=\"color:#FF9E64\">false</span><span style=\"color:#A9B1D6\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    }</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    wasOnline </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> true</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<ul>\n<li>Double-checks if the network is truly online using <code>isCurrentlyOnline()</code>.</li>\n<li>Differentiates between continuous online state and transition from offline.</li>\n</ul>\n</li>\n<li>\n<p><strong>onLost</strong>:</p>\n<p>Triggered when the network connection is lost.</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">override</span><span style=\"color:#BB9AF7\"> fun</span><span style=\"color:#7AA2F7\"> onLost</span><span style=\"color:#A9B1D6\">(network: </span><span style=\"color:#C0CAF5\">Network</span><span style=\"color:#A9B1D6\">) {</span></span>\n<span class=\"line\"><span style=\"color:#7AA2F7\">    onNetworkChange</span><span style=\"color:#A9B1D6\">(</span><span style=\"color:#FF9E64\">false</span><span style=\"color:#A9B1D6\">, </span><span style=\"color:#FF9E64\">false</span><span style=\"color:#A9B1D6\">)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    wasOnline </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> false</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<ul>\n<li>Immediately fires the callback with <code>isOnline = false</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h6 id=\"start--stop-listening\">Start &#x26; Stop Listening</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">fun</span><span style=\"color:#7AA2F7\"> start</span><span style=\"color:#A9B1D6\">() {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    val</span><span style=\"color:#A9B1D6\"> request </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> NetworkRequest.</span><span style=\"color:#7AA2F7\">Builder</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        .</span><span style=\"color:#7AA2F7\">addCapability</span><span style=\"color:#A9B1D6\">(NetworkCapabilities.NET_CAPABILITY_INTERNET)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        .</span><span style=\"color:#7AA2F7\">build</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    connectivityManager.</span><span style=\"color:#7AA2F7\">registerNetworkCallback</span><span style=\"color:#A9B1D6\">(request, networkCallback)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    wasOnline </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> isCurrentlyOnline</span><span style=\"color:#A9B1D6\">()</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<ul>\n<li>Registers the network callback using a <code>NetworkRequest</code> that filters for internet-capable connections.</li>\n<li>Sets the initial state of <code>wasOnline</code>.</li>\n</ul>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">fun</span><span style=\"color:#7AA2F7\"> stop</span><span style=\"color:#A9B1D6\">() {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    try</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">        connectivityManager.</span><span style=\"color:#7AA2F7\">unregisterNetworkCallback</span><span style=\"color:#A9B1D6\">(networkCallback)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">    } </span><span style=\"color:#BB9AF7\">catch</span><span style=\"color:#A9B1D6\"> (_: </span><span style=\"color:#C0CAF5\">Exception</span><span style=\"color:#A9B1D6\">) {}</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<ul>\n<li>Unregisters the callback.</li>\n<li>Fails silently in case the callback wasn’t registered (e.g., app exit or lifecycle mismatch).</li>\n</ul>\n<h6 id=\"checking-network-status\">Checking Network Status</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"kotlin\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">fun</span><span style=\"color:#7AA2F7\"> isCurrentlyOnline</span><span style=\"color:#A9B1D6\">(): </span><span style=\"color:#C0CAF5\">Boolean</span><span style=\"color:#A9B1D6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    val</span><span style=\"color:#A9B1D6\"> network </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> connectivityManager.activeNetwork ?: </span><span style=\"color:#BB9AF7\">return</span><span style=\"color:#FF9E64\"> false</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    val</span><span style=\"color:#A9B1D6\"> capabilities </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> connectivityManager.</span><span style=\"color:#7AA2F7\">getNetworkCapabilities</span><span style=\"color:#A9B1D6\">(network) ?: </span><span style=\"color:#BB9AF7\">return</span><span style=\"color:#FF9E64\"> false</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> capabilities.</span><span style=\"color:#7AA2F7\">hasCapability</span><span style=\"color:#A9B1D6\">(NetworkCapabilities.NET_CAPABILITY_INTERNET) </span><span style=\"color:#BB9AF7\">&#x26;&#x26;</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">            capabilities.</span><span style=\"color:#7AA2F7\">hasCapability</span><span style=\"color:#A9B1D6\">(NetworkCapabilities.NET_CAPABILITY_VALIDATED)</span></span>\n<span class=\"line\"><span style=\"color:#A9B1D6\">}</span></span></code></pre>\n<p>This function performs a deep connectivity check:</p>\n<ul>\n<li>Confirms the device has an active network.</li>\n<li>Ensures it has internet access (<code>NET_CAPABILITY_INTERNET</code>) and is validated by Android’s network validation system (<code>NET_CAPABILITY_VALIDATED</code>).</li>\n<li>This guards against false positives (e.g., captive portals or no internet access despite Wi-Fi connection).</li>\n</ul>\n<h6 id=\"use-case-in-celeris\">Use Case in Celeris</h6>\n<p>The NetworkMonitor class is used in contexts where:</p>\n<ul>\n<li>Offline-first UI behavior is essential.</li>\n<li>We need to sync data when the device comes back online.</li>\n<li>The app needs to adjust its behavior based on connectivity (e.g., showing offline banners, disabling online features).</li>\n</ul>\n<h4 id=\"smsreceiver\">SMSReceiver</h4>\n<p>The <code>SMSReceiver</code> class is a <code>BroadcastReceiver</code> responsible for intercepting incoming SMS messages from the Celeris payment server. It processes these messages to determine the result of a transaction (success or failure) and immediately redirects the user to the appropriate result screen (<code>SuccessActivity</code> or <code>ErrorActivity</code>).</p>\n<p>This receiver is essential to the <strong>offline-first architecture</strong> of Celeris, allowing the system to process and reflect transaction results <strong>without requiring an internet connection</strong>.</p>\n<h6 id=\"overview-of-responsibilities\">Overview of Responsibilities</h6>\n<ul>\n<li>Listens for incoming SMS broadcasts.</li>\n<li>Filters messages from the known Celeris server number.</li>\n<li>Parses transaction metadata from the message body.</li>\n<li>Redirects the user to either a success or error screen based on transaction outcome.</li>\n</ul>\n<h6 id=\"listening-for-incoming-sms\">Listening for Incoming SMS</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#BB9AF7\">Override</span></span>\n<span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">public</span><span style=\"color:#BB9AF7\"> void</span><span style=\"color:#7AA2F7\"> onReceive</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">Context</span><span style=\"color:#7AA2F7\"> context</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> Intent</span><span style=\"color:#7AA2F7\"> intent</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#C0CAF5\">Objects</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">equals</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">intent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getAction</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">android.provider.Telephony.SMS_RECEIVED</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">        ...</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">    }</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p>The receiver listens explicitly for the <code>SMS_RECEIVED</code> broadcast action using an intent filter in <code>AndroidManifest.xml</code>.</p>\n<h6 id=\"parsing-the-sms-payload\">Parsing the SMS Payload</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">Object</span><span style=\"color:#89DDFF\">[]</span><span style=\"color:#C0CAF5\"> pdus</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#BB9AF7\">Object</span><span style=\"color:#89DDFF\">[])</span><span style=\"color:#C0CAF5\"> bundle</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">get</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">pdus</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">String</span><span style=\"color:#C0CAF5\"> format</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C0CAF5\"> bundle</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">getString</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">format</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">SmsMessage</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">createFromPdu</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#BB9AF7\">byte</span><span style=\"color:#89DDFF\">[])</span><span style=\"color:#A9B1D6\"> pdu</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> format</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span></code></pre>\n<ul>\n<li>Extracts the raw SMS data units (<code>pdus</code>) from the incoming broadcast.</li>\n<li>Uses the <code>SmsMessage.createFromPdu()</code> API to decode each SMS message from its raw bytes.</li>\n<li>Supports <strong>multi-part SMS</strong> handling (if a message spans multiple segments).</li>\n</ul>\n<h6 id=\"filtering-messages-from-the-celeris-gateway\">Filtering Messages from the Celeris Gateway</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#A9B1D6\">sender </span><span style=\"color:#BB9AF7\">!=</span><span style=\"color:#FF9E64\"> null</span><span style=\"color:#BB9AF7\"> &#x26;&#x26;</span><span style=\"color:#C0CAF5\"> sender</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">equals</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">TARGET_PHONE_NUMBER</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    ...</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<ul>\n<li>Only processes messages sent from the <strong>designated Celeris SMS gateway number</strong>.</li>\n<li>Ensures third-party or irrelevant SMS messages are ignored.</li>\n</ul>\n<h6 id=\"processing-the-message-content\">Processing the Message Content</h6>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">private</span><span style=\"color:#BB9AF7\"> void</span><span style=\"color:#7AA2F7\"> processSMS</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">Context</span><span style=\"color:#7AA2F7\"> context</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> String</span><span style=\"color:#7AA2F7\"> sender</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#BB9AF7\"> String</span><span style=\"color:#7AA2F7\"> message</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    String</span><span style=\"color:#89DDFF\">[]</span><span style=\"color:#C0CAF5\"> messages</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C0CAF5\"> message</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">split</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"\\\\</span><span style=\"color:#9ECE6A\">|</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    int</span><span style=\"color:#C0CAF5\"> amount</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#C0CAF5\"> Integer</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">parseInt</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">messages</span><span style=\"color:#89DDFF\">[</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    String</span><span style=\"color:#C0CAF5\"> status</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> messages</span><span style=\"color:#89DDFF\">[</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">];</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    String</span><span style=\"color:#C0CAF5\"> type</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> messages</span><span style=\"color:#89DDFF\">[</span><span style=\"color:#FF9E64\">2</span><span style=\"color:#89DDFF\">];</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p>The SMS is expected to follow a strict format:</p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>&#x3C;amount>|&#x3C;status>|&#x3C;type></span></span></code></pre>\n<ul>\n<li><code>amount</code>: The amount of money sent or received.</li>\n<li><code>status</code>: <code>\"successful\"</code>, <code>\"unsuccessful\"</code>, or <code>\"failed\"</code>.</li>\n<li><code>type</code>: <code>\"sent\"</code> or <code>\"received\"</code> - indicates transaction direction.</li>\n</ul>\n<h6 id=\"redirecting-to-transaction-outcome-screen\">Redirecting to Transaction Outcome Screen</h6>\n<p>Depending on the parsed status, the receiver launches the appropriate activity:</p>\n<p><strong>Failure Case:</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">if</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#C0CAF5\">Objects</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">equals</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">status</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">unsuccessful</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#BB9AF7\"> ||</span><span style=\"color:#C0CAF5\"> Objects</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">equals</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">status</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">failed</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    Intent</span><span style=\"color:#C0CAF5\"> intent</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BB9AF7\"> new</span><span style=\"color:#7AA2F7\"> Intent</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">context</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> ErrorActivity</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7DCFFF\">class</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    ...</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">    context</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">startActivity</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">intent</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p><strong>Success Case:</strong></p>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#BB9AF7\">else</span><span style=\"color:#BB9AF7\"> if</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#C0CAF5\">Objects</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">equals</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">status</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">successful</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#9ABDF5\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">    Intent</span><span style=\"color:#C0CAF5\"> intent</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#BB9AF7\"> new</span><span style=\"color:#7AA2F7\"> Intent</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">context</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> SuccessActivity</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7DCFFF\">class</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">    ...</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">    context</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">startActivity</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#A9B1D6\">intent</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#9ABDF5\">}</span></span></code></pre>\n<p>Both activities receive the following via <code>Intent</code> extras:</p>\n<ul>\n<li><code>amount</code>: To display the transaction value.</li>\n<li><code>type</code>: To determine which UI to show (send or receive page).</li>\n</ul>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">intent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">putExtra</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">amount</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> amount</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">intent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">putExtra</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">type</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> type</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C0CAF5\">intent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">setFlags</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">Intent</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">FLAG_ACTIVITY_NEW_TASK</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">;</span></span></code></pre>\n<p>The <code>FLAG_ACTIVITY_NEW_TASK</code> flag ensures the activity launches properly from a non-activity context.</p>\n<h6 id=\"offline-first-impact\">Offline First Impact</h6>\n<p>This class is a cornerstone of <strong>offline transactional integrity</strong> in the Celeris ecosystem. Even if users have <strong>zero internet access</strong>, they are:</p>\n<ul>\n<li>Notified of transaction status instantly via SMS.</li>\n<li>Able to see real-time confirmation/error screens.</li>\n<li>Kept in sync with their offline wallet balance (via <code>SuccessActivity</code> updates).</li>\n</ul>\n<h2 id=\"un-technical-stuff-team-coordination-and-project-management\">Un-technical Stuff: Team Coordination and Project Management</h2>\n<p>The Celeris project was developed by a team of 4 members, each contributing to different aspects of the application. The project management and coordination were primarily handled through GitHub, where we utilized GitHub projects to track the progress of development. The first step was to actually divide the work based on team member knowledge, this is the hardest of it all and requires a lot of communication and understanding of each other’s strengths and weaknesses.</p>\n<p>I decided to push everyone to work on the parts they were most comfortable with, while also encouraging them to learn new things. This approach not only helped us complete the project efficiently but also allowed each member to grow their skills.</p>\n<p>We had informal standups during the whole hackathon where we discussed what is everyone working on, what challenges they are facing, and how we can help each other. This open communication helped us stay aligned and motivated throughout the hackathon. This way, we were able to quickly address any issues that arose and keep the project moving forward.</p>\n<p>Since the project was divided to the most atomic parts it can, it was easy to track the progress of each member and integrate the changes without conflicts. There was no overlapping work, and each member had a clear understanding of their responsibilities. This also made it easier to review each other’s code and provide feedback, which is crucial for maintaining code quality. Although there were some merge conflicts, they were resolved quickly due to the clear division of work and regular communication.</p>\n<p>I learnt a lot about team coordination and project management during this hackathon. It was a great experience to work with a team of talented individuals, and I am proud of what we accomplished together. The project not only helped us improve our technical skills but also taught us the importance of effective communication and collaboration in software development. This experience will definitely help me in future projects, and I look forward to applying these lessons in my next endeavors.</p>\n<p>Clarity should always be above everything, and I am glad that we were able to maintain that throughout the project. The clear division of work, regular communication, and open feedback helped us stay on track and deliver a high-quality product within the limited time frame of the hackathon.</p>\n<p>For the first time in a hackathon, I actually saw the project finish on time, and I am really proud of that. The project was not only completed but also met the requirements and expectations set at the beginning. This is a testament to the hard work and dedication of each team member, and I am grateful for their contributions.</p>\n<p>Celeris is a great project and there are a lot of areas of improvement, ranging from security to performance. I am looking forward to continuing the development of this project and making it even better. The foundation we have built during this hackathon will serve as a solid base for future enhancements and features. We can use this project in future hackathons or as a starting point for a more comprehensive offline-first payment solution.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Celeris is a pioneering Android application that embodies the principles of offline-first design, enabling users to perform financial transactions without relying on constant internet connectivity. By leveraging local data persistence, real-time QR code scanning, and SMS-based payment processing, Celeris provides a seamless user experience even in low-connectivity environments.</p>\n<p>To everyone else, never go towards perfection. Build the MVP first, and then iterate on it. This hackathon taught me that perfection is the enemy of progress, and it’s better to have a working product that can be improved over time than to strive for an unattainable ideal.</p>\n<p>And a very important point to anyone who is reading this: <strong>Always have a plan, and a clear vision of what you want to achieve.</strong> This will help you stay focused and motivated, even when things get tough. The Celeris project was a great example of how a clear vision and effective planning can lead to successful outcomes.</p>\n<p>Thank you for reading this blog post about Celeris, and I hope it inspires you to build your own applications. I really hope you must have learned something new from this post, and I would love to hear your thoughts and feedback. If you have any questions or suggestions, feel free to reach out to me on Twitter or GitHub.</p>",{headings:1640,localImagePaths:1924,remoteImagePaths:1925,frontmatter:1926,imagePaths:1929},[1641,1642,1643,1646,1649,1652,1655,1658,1661,1664,1667,1670,1673,1676,1679,1682,1685,1688,1691,1694,1697,1700,1703,1706,1709,1712,1715,1718,1721,1724,1727,1730,1733,1736,1739,1742,1745,1748,1751,1754,1757,1760,1763,1766,1769,1772,1775,1778,1781,1784,1787,1790,1793,1796,1799,1802,1805,1808,1811,1814,1817,1820,1823,1826,1829,1832,1835,1838,1841,1844,1847,1850,1853,1856,1858,1861,1864,1867,1870,1873,1876,1879,1882,1885,1888,1891,1894,1897,1900,1903,1906,1909,1912,1915,1918,1921],{depth:34,slug:117,text:118},{depth:34,slug:45,text:46},{depth:34,slug:1644,text:1645},"the-problem","The Problem",{depth:34,slug:1647,text:1648},"the-solution","The Solution",{depth:34,slug:1650,text:1651},"design-principles","Design Principles",{depth:34,slug:1653,text:1654},"architecture","Architecture",{depth:34,slug:1656,text:1657},"celeris-sms-gateway-the-core-component","Celeris SMS Gateway: The Core Component",{depth:38,slug:1659,text:1660},"sms-receiver","SMS Receiver",{depth:38,slug:1662,text:1663},"sms-sender","SMS Sender",{depth:38,slug:1665,text:1666},"main-activity","Main Activity",{depth:34,slug:1668,text:1669},"celeris-backend-the-server","Celeris Backend: The Server",{depth:38,slug:1671,text:1672},"sms-parser","SMS Parser",{depth:38,slug:1674,text:1675},"authentication","Authentication",{depth:396,slug:1677,text:1678},"database-tables--schema","Database Tables & Schema",{depth:396,slug:1680,text:1681},"request-models","Request Models",{depth:396,slug:1683,text:1684},"endpoints","Endpoints",{depth:396,slug:1686,text:1687},"security-disclaimer","Security Disclaimer",{depth:396,slug:1689,text:1690},"utilities","Utilities",{depth:38,slug:1692,text:1693},"transaction-service-core-of-celeris-payments","Transaction Service: Core of Celeris Payments",{depth:396,slug:1695,text:1696},"design-notes","Design Notes",{depth:38,slug:1698,text:1699},"celeris-api-the-restful-interface","Celeris API: The RESTful Interface",{depth:396,slug:1701,text:1702},"app-initialization","App Initialization",{depth:396,slug:1704,text:1705},"sync-endpoint","Sync Endpoint",{depth:396,slug:1707,text:1708},"sms-webhook-endpoint","SMS Webhook Endpoint",{depth:396,slug:1710,text:1711},"add-balance-endpoint","Add Balance Endpoint",{depth:38,slug:1713,text:1714},"highlights","Highlights",{depth:34,slug:1716,text:1717},"celeris-database","Celeris Database",{depth:38,slug:1719,text:1720},"the-users-table","The users table",{depth:38,slug:1722,text:1723},"the-transactions-table","The transactions table",{depth:38,slug:1725,text:1726},"the-auth_table","The auth_table",{depth:38,slug:1728,text:1729},"notes","Notes",{depth:34,slug:1731,text:1732},"celeris-app-the-offline-cum-online-client-application","Celeris App: The Offline-cum-Online Client Application",{depth:38,slug:1734,text:1735},"libraries-and-dependencies","Libraries and Dependencies",{depth:38,slug:1737,text:1738},"ui-components","UI Components",{depth:38,slug:1740,text:1741},"sqlite-database-helpers","SQLite Database Helpers",{depth:1019,slug:1743,text:1744},"authdatabasehelper","AuthDatabaseHelper",{depth:1019,slug:1746,text:1747},"qr-code-database-helper","QR Code Database Helper",{depth:38,slug:1749,text:1750},"user-model","User Model",{depth:38,slug:1752,text:1753},"mainactivity","MainActivity",{depth:396,slug:1755,text:1756},"logic-breakdown","Logic Breakdown",{depth:396,slug:1758,text:1759},"authentication-flow-pipeline","Authentication Flow Pipeline",{depth:396,slug:1761,text:1762},"integration-perspective","Integration Perspective",{depth:38,slug:1764,text:1765},"authentication-flow","Authentication Flow",{depth:396,slug:1767,text:1768},"authactivity","AuthActivity",{depth:396,slug:1770,text:1771},"login-flow","Login Flow",{depth:396,slug:1773,text:1774},"signup-flow","Signup Flow",{depth:396,slug:1776,text:1777},"local-persistence-authdatabasehelper","Local Persistence: AuthDatabaseHelper",{depth:396,slug:1779,text:1780},"navigation-between-login--signup","Navigation between Login & Signup",{depth:396,slug:1782,text:1783},"final-notes","Final Notes",{depth:38,slug:1785,text:1786},"post-authentication-secureactivity","Post Authentication: SecureActivity",{depth:396,slug:1788,text:1789},"authentication-check-offline-aware","Authentication Check (Offline-aware)",{depth:396,slug:1791,text:1792},"network-monitoring-with-networkmonitor","Network Monitoring with NetworkMonitor",{depth:38,slug:1794,text:1795},"profile-page","Profile Page",{depth:396,slug:1797,text:1798},"user-info-from-local-db","User Info from Local DB",{depth:396,slug:1800,text:1801},"qr-code-handling","QR Code Handling",{depth:396,slug:1803,text:1804},"logout-functionality","Logout Functionality",{depth:38,slug:1806,text:1807},"scan-and-pay-flow","Scan and Pay Flow",{depth:396,slug:1809,text:1810},"camera-initialization","Camera Initialization",{depth:396,slug:1812,text:1813},"camerax-setup","CameraX Setup",{depth:396,slug:1815,text:1816},"qr-code-decoding","QR Code Decoding",{depth:396,slug:1818,text:1819},"post-scan-navigation-and-storage","Post-Scan Navigation and Storage",{depth:396,slug:1821,text:1822},"data-persistence","Data Persistence",{depth:38,slug:1824,text:1825},"send-money-flow","Send Money Flow",{depth:396,slug:1827,text:1828},"retrieving-scanned-merchant-id","Retrieving Scanned Merchant ID",{depth:396,slug:1830,text:1831},"loading-user-information","Loading User Information",{depth:396,slug:1833,text:1834},"composing-the-payment-sms","Composing the Payment SMS",{depth:396,slug:1836,text:1837},"summary-of-the-flow","Summary of the Flow",{depth:38,slug:1839,text:1840},"success-activity","Success Activity",{depth:396,slug:1842,text:1843},"receiving-transaction-metadata-via-intent","Receiving Transaction Metadata via Intent",{depth:396,slug:1845,text:1846},"displaying-confirmation-ui","Displaying Confirmation UI",{depth:396,slug:1848,text:1849},"updating-user-balance-in-local-storage","Updating User Balance in Local Storage",{depth:38,slug:1851,text:1852},"retrofit-client-utility","Retrofit Client Utility",{depth:38,slug:1854,text:1855},"authapi-utility","AuthApi Utility",{depth:396,slug:1857,text:1684},"endpoints-1",{depth:396,slug:1859,text:1860},"backend-integration","Backend Integration",{depth:38,slug:1862,text:1863},"datautils-persistent-key-value-storage","DataUtils: Persistent Key-Value Storage",{depth:38,slug:1865,text:1866},"qrcodeutils-utility","QRCodeUtils Utility",{depth:396,slug:1868,text:1869},"purpose","Purpose",{depth:396,slug:1871,text:1872},"implementation-breakdown","Implementation Breakdown",{depth:396,slug:1874,text:1875},"qr-code-generation-logic","QR Code Generation Logic",{depth:396,slug:1877,text:1878},"usage-context-in-celeris","Usage Context in Celeris",{depth:38,slug:1880,text:1881},"networkmonitor-utility","NetworkMonitor Utility",{depth:396,slug:1883,text:1884},"constructor-parameters","Constructor Parameters",{depth:396,slug:1886,text:1887},"start--stop-listening","Start & Stop Listening",{depth:396,slug:1889,text:1890},"checking-network-status","Checking Network Status",{depth:396,slug:1892,text:1893},"use-case-in-celeris","Use Case in Celeris",{depth:38,slug:1895,text:1896},"smsreceiver","SMSReceiver",{depth:396,slug:1898,text:1899},"overview-of-responsibilities","Overview of Responsibilities",{depth:396,slug:1901,text:1902},"listening-for-incoming-sms","Listening for Incoming SMS",{depth:396,slug:1904,text:1905},"parsing-the-sms-payload","Parsing the SMS Payload",{depth:396,slug:1907,text:1908},"filtering-messages-from-the-celeris-gateway","Filtering Messages from the Celeris Gateway",{depth:396,slug:1910,text:1911},"processing-the-message-content","Processing the Message Content",{depth:396,slug:1913,text:1914},"redirecting-to-transaction-outcome-screen","Redirecting to Transaction Outcome Screen",{depth:396,slug:1916,text:1917},"offline-first-impact","Offline First Impact",{depth:34,slug:1919,text:1920},"un-technical-stuff-team-coordination-and-project-management","Un-technical Stuff: Team Coordination and Project Management",{depth:34,slug:1922,text:1923},"conclusion","Conclusion",[],[],{title:1629,date:1927,description:1632,author:16,thumbnail:1633,featured:359,minutesRead:1928},["Date","2025-05-25T00:00:00.000Z"],"54 min read",[],"celeris-the-engineering.md","turing-machine",{id:1931,data:1933,body:1939,filePath:1940,digest:1941,rendered:1942,legacyId:1961},{title:1934,author:1935,draft:18,date:1936,description:1937,featured:18,thumbnail:106,series:1938,seriesOrder:38},"Season 1, Act IV: Alan Turing & The Machine That Never Existed",{id:16,collection:17},["Date","2025-08-25T00:00:00.000Z"],"Birth of the Turing machine.",{id:108,collection:24},"## Introduction\r\n\r\nWhile Alonzo Church was in America building a universe out of abstract functions, a young British mathematician named **Alan Turing** was tackling the exact same problem from a completely different, and more mechanical, angle.\r\n\r\nTuring wasn't thinking about pure logic. He was trying to imagine the simplest possible machine that could perform computation. He wanted to strip away all the complexity and get to the absolute essence of what it means to follow a set of instructions. The result was a thought experiment, a machine that was never built but became the blueprint for every computer that followed. He called it an \"automatic machine\"; we call it the **Turing Machine**.\r\n\r\n## The Machine's Anatomy\r\n\r\nImagine a machine that is incredibly simple, almost comically so. It consists of just three parts:\r\n\r\n1. **An Infinite Tape**: Think of a roll of paper, like a receipt from a cash register, that's infinitely long in both directions. The tape is divided into squares, and each square can either be blank or have a single symbol written on it (like '1', '0', or 'X'). This tape acts as the machine's memory.\r\n\r\n2. **A Read/Write Head**: This is a little device that sits over a single square on the tape at any given time. It can do three things:\r\n   - **Read** the symbol on the square.\r\n   - **Erase** or **Write** a new symbol on the square.\r\n   - **Move** the tape one square to the left or right.\r\n\r\n3. **A State Register (The \"Brain\")**: This is the machine's only internal memory. It keeps track of the machine's current \"state\" or \"mood.\" For example, it could be in a state like \"Looking for a 1\" or \"Ready to add.\" The machine has a finite number of these states it can be in.\r\n\r\n## How It All Works: A Simple Recipe\r\n\r\nThe \"program\" for a Turing machine is a set of simple rules based on its current state and what it sees on the tape. Each rule is like a line in a recipe:\r\n\r\n**\"If you are in `[current state]` and you read `[current symbol]` on the tape, then you should `[write a new symbol]`, move `[left or right]`, and change to `[new state]`.\"**\r\n\r\nThat's it. That's all it can do.\r\n\r\nLet's imagine a simple Turing machine whose job is to add 1 to a number. The number \"3\" might be represented on the tape as three consecutive \"1\"s: .`..[B][1][1][1][B]...` (B for blank).\r\n\r\nThe rules might look something like this:\r\n\r\n- **Start State**: \"Moving Right\"\r\n- **Rule 1**: If in state \"Moving Right\" and you see a \"1\", don't change it, move right, and stay in the \"Moving Right\" state.\r\n- **Rule 2**: If in state \"Moving Right\" and you see a Blank square, write a \"1\" in it, move nowhere, and change to the \"Halt\" state.\r\n\r\nThe machine would start at the first \"1\", move right past all three \"1\"s (following Rule 1), and when it hits the first blank square, it would write a \"1\" and stop (following Rule 2). The tape now has four \"1\"s. It has successfully computed 3 + 1 = 4.\r\n\r\n## The Universal Machine\r\n\r\nThis seems incredibly basic, right? Almost useless. But here is Turing's genius: he proved that this simple machine, with the right set of rules and symbols, could simulate _any_ algorithm, no matter how complex. It could perform the calculations of Church's Lambda Calculus. It could run any program that any other computer, even the supercomputers of today, could run. It would be incredibly slow, but it could do it.\r\n\r\nThis is the concept of **Turing Completeness** - a system is Turing complete if it can be used to simulate a universal Turing machine.\r\n\r\nTuring's mechanical approach and Church's logical approach had, by completely different paths, arrived at the exact same definition of what is computable. This powerful conclusion became known as the **Church-Turing Thesis**: If a problem can be solved by any effective, step-by-step algorithm, it can be solved by a Turing machine.\r\n\r\nThey had defined the ultimate limits of what machines could ever do. But this also raised a terrifying question: what about the problems they _couldn't_ solve?","src/content/blog/turing-machine.md","9bfc1fa049c5fdfc",{html:1943,metadata:1944},"<h2 id=\"introduction\">Introduction</h2>\n<p>While Alonzo Church was in America building a universe out of abstract functions, a young British mathematician named <strong>Alan Turing</strong> was tackling the exact same problem from a completely different, and more mechanical, angle.</p>\n<p>Turing wasn’t thinking about pure logic. He was trying to imagine the simplest possible machine that could perform computation. He wanted to strip away all the complexity and get to the absolute essence of what it means to follow a set of instructions. The result was a thought experiment, a machine that was never built but became the blueprint for every computer that followed. He called it an “automatic machine”; we call it the <strong>Turing Machine</strong>.</p>\n<h2 id=\"the-machines-anatomy\">The Machine’s Anatomy</h2>\n<p>Imagine a machine that is incredibly simple, almost comically so. It consists of just three parts:</p>\n<ol>\n<li>\n<p><strong>An Infinite Tape</strong>: Think of a roll of paper, like a receipt from a cash register, that’s infinitely long in both directions. The tape is divided into squares, and each square can either be blank or have a single symbol written on it (like ‘1’, ‘0’, or ‘X’). This tape acts as the machine’s memory.</p>\n</li>\n<li>\n<p><strong>A Read/Write Head</strong>: This is a little device that sits over a single square on the tape at any given time. It can do three things:</p>\n<ul>\n<li><strong>Read</strong> the symbol on the square.</li>\n<li><strong>Erase</strong> or <strong>Write</strong> a new symbol on the square.</li>\n<li><strong>Move</strong> the tape one square to the left or right.</li>\n</ul>\n</li>\n<li>\n<p><strong>A State Register (The “Brain”)</strong>: This is the machine’s only internal memory. It keeps track of the machine’s current “state” or “mood.” For example, it could be in a state like “Looking for a 1” or “Ready to add.” The machine has a finite number of these states it can be in.</p>\n</li>\n</ol>\n<h2 id=\"how-it-all-works-a-simple-recipe\">How It All Works: A Simple Recipe</h2>\n<p>The “program” for a Turing machine is a set of simple rules based on its current state and what it sees on the tape. Each rule is like a line in a recipe:</p>\n<p><strong>“If you are in <code>[current state]</code> and you read <code>[current symbol]</code> on the tape, then you should <code>[write a new symbol]</code>, move <code>[left or right]</code>, and change to <code>[new state]</code>.”</strong></p>\n<p>That’s it. That’s all it can do.</p>\n<p>Let’s imagine a simple Turing machine whose job is to add 1 to a number. The number “3” might be represented on the tape as three consecutive “1”s: .<code>..[B][1][1][1][B]...</code> (B for blank).</p>\n<p>The rules might look something like this:</p>\n<ul>\n<li><strong>Start State</strong>: “Moving Right”</li>\n<li><strong>Rule 1</strong>: If in state “Moving Right” and you see a “1”, don’t change it, move right, and stay in the “Moving Right” state.</li>\n<li><strong>Rule 2</strong>: If in state “Moving Right” and you see a Blank square, write a “1” in it, move nowhere, and change to the “Halt” state.</li>\n</ul>\n<p>The machine would start at the first “1”, move right past all three “1”s (following Rule 1), and when it hits the first blank square, it would write a “1” and stop (following Rule 2). The tape now has four “1”s. It has successfully computed 3 + 1 = 4.</p>\n<h2 id=\"the-universal-machine\">The Universal Machine</h2>\n<p>This seems incredibly basic, right? Almost useless. But here is Turing’s genius: he proved that this simple machine, with the right set of rules and symbols, could simulate <em>any</em> algorithm, no matter how complex. It could perform the calculations of Church’s Lambda Calculus. It could run any program that any other computer, even the supercomputers of today, could run. It would be incredibly slow, but it could do it.</p>\n<p>This is the concept of <strong>Turing Completeness</strong> - a system is Turing complete if it can be used to simulate a universal Turing machine.</p>\n<p>Turing’s mechanical approach and Church’s logical approach had, by completely different paths, arrived at the exact same definition of what is computable. This powerful conclusion became known as the <strong>Church-Turing Thesis</strong>: If a problem can be solved by any effective, step-by-step algorithm, it can be solved by a Turing machine.</p>\n<p>They had defined the ultimate limits of what machines could ever do. But this also raised a terrifying question: what about the problems they <em>couldn’t</em> solve?</p>",{headings:1945,localImagePaths:1956,remoteImagePaths:1957,frontmatter:1958,imagePaths:1960},[1946,1947,1950,1953],{depth:34,slug:117,text:118},{depth:34,slug:1948,text:1949},"the-machines-anatomy","The Machine’s Anatomy",{depth:34,slug:1951,text:1952},"how-it-all-works-a-simple-recipe","How It All Works: A Simple Recipe",{depth:34,slug:1954,text:1955},"the-universal-machine","The Universal Machine",[],[],{title:1934,date:1959,description:1937,author:16,series:108,thumbnail:106,seriesOrder:38,minutesRead:135},["Date","2025-08-25T00:00:00.000Z"],[],"turing-machine.md","what-is-computation",{id:1962,data:1964,body:1970,filePath:1971,digest:1972,rendered:1973,legacyId:1992},{title:1965,author:1966,draft:18,date:1967,description:1968,featured:18,thumbnail:106,series:1969,seriesOrder:201},"Season 1, Act I: What even is Computation?",{id:16,collection:17},["Date","2025-08-25T00:00:00.000Z"],"From abacuses to the idea of algorithms.",{id:108,collection:24},"## Introduction\r\n\r\nWelcome to the first post in our series exploring the deep roots of computing. Before we can talk about silicon chips and programming languages, we need to ask a much more fundamental question: _**What even is computation?**_\r\n\r\nMost of us think of computers - laptops, phones, servers. But the idea of computation is much older, simpler, and more human than that. At its core, computation is just a fancy word for following a set of steps to solve a problem.\r\n\r\n## The Original Calculator: An Abacus\r\n\r\nLet's travel back thousands of years. There are no power outlets, no screens, no keyboards. But you still need to add up your goods at the market. How do you do it? You might use an abacus.\r\n\r\nAn abacus is a tool for calculation. It has beads on rods, and by moving them according to a set of rules, you can perform arithmetic. If you want to add 5 and 7, you don't just \"know\" the answer is 12. You follow a physical process:\r\n\r\n1. Represent the number 5 by moving five beads.\r\n2. Represent the number 7 by moving seven more beads.\r\n3. Follow the rules for \"carrying over\" when a rod fills up.\r\n4. Read the final position of the beads to get your answer: 12.\r\n\r\nThis is computation. It's not magic; it's a structured process. You're not using a brain, you're using a tool and a method. The abacus doesn't understand numbers, but it can manipulate them correctly because it's built to follow the rules of arithmetic.\r\n\r\n## From a Tool to a Recipe\r\n\r\nNow, let's strip away the tool itself. What's the most important part of using the abacus? The rules. The step-by-step method you follow.\r\n\r\nThis set of rules, this recipe for solving a problem, has a special name: an algorithm.\r\n\r\nThink about baking a cake. You have a recipe that tells you exactly what to do:\r\n\r\n1. Preheat the oven to 350°F (175°C).\r\n2. Mix flour, sugar, and cocoa powder in a bowl.\r\n3. Add eggs, milk, and oil.\r\n4. Stir until smooth.\r\n5. Pour into a pan and bake for 30 minutes.\r\n\r\nIf you follow these steps precisely, you'll get a cake. The recipe is the algorithm. It's a finite sequence of unambiguous instructions that, when followed, accomplishes a task. You don't need to understand the chemistry of baking to make the cake; you just need to follow the instructions.\r\n\r\n## Computation, therefore, is the act of executing an algorithm.\r\n\r\nWhether it's a person moving beads on an abacus, a baker following a recipe, or a modern computer processing billions of instructions per second, the fundamental idea is the same. It's about taking an input (numbers, ingredients), following a clear set of steps (the algorithm), and producing an output (an answer, a cake).\r\n\r\nThis simple but powerful idea - that we can create recipes to solve problems - is the foundation of everything we'll explore. But as we'll see in our next post, just because you can write a recipe for something doesn't mean all problems are solvable. A mathematician named Gödel was about to show the world that some things are fundamentally unknowable, breaking math wide open before computers were even a dream.","src/content/blog/what-is-computation.md","7112e70cb04b9de3",{html:1974,metadata:1975},"<h2 id=\"introduction\">Introduction</h2>\n<p>Welcome to the first post in our series exploring the deep roots of computing. Before we can talk about silicon chips and programming languages, we need to ask a much more fundamental question: <em><strong>What even is computation?</strong></em></p>\n<p>Most of us think of computers - laptops, phones, servers. But the idea of computation is much older, simpler, and more human than that. At its core, computation is just a fancy word for following a set of steps to solve a problem.</p>\n<h2 id=\"the-original-calculator-an-abacus\">The Original Calculator: An Abacus</h2>\n<p>Let’s travel back thousands of years. There are no power outlets, no screens, no keyboards. But you still need to add up your goods at the market. How do you do it? You might use an abacus.</p>\n<p>An abacus is a tool for calculation. It has beads on rods, and by moving them according to a set of rules, you can perform arithmetic. If you want to add 5 and 7, you don’t just “know” the answer is 12. You follow a physical process:</p>\n<ol>\n<li>Represent the number 5 by moving five beads.</li>\n<li>Represent the number 7 by moving seven more beads.</li>\n<li>Follow the rules for “carrying over” when a rod fills up.</li>\n<li>Read the final position of the beads to get your answer: 12.</li>\n</ol>\n<p>This is computation. It’s not magic; it’s a structured process. You’re not using a brain, you’re using a tool and a method. The abacus doesn’t understand numbers, but it can manipulate them correctly because it’s built to follow the rules of arithmetic.</p>\n<h2 id=\"from-a-tool-to-a-recipe\">From a Tool to a Recipe</h2>\n<p>Now, let’s strip away the tool itself. What’s the most important part of using the abacus? The rules. The step-by-step method you follow.</p>\n<p>This set of rules, this recipe for solving a problem, has a special name: an algorithm.</p>\n<p>Think about baking a cake. You have a recipe that tells you exactly what to do:</p>\n<ol>\n<li>Preheat the oven to 350°F (175°C).</li>\n<li>Mix flour, sugar, and cocoa powder in a bowl.</li>\n<li>Add eggs, milk, and oil.</li>\n<li>Stir until smooth.</li>\n<li>Pour into a pan and bake for 30 minutes.</li>\n</ol>\n<p>If you follow these steps precisely, you’ll get a cake. The recipe is the algorithm. It’s a finite sequence of unambiguous instructions that, when followed, accomplishes a task. You don’t need to understand the chemistry of baking to make the cake; you just need to follow the instructions.</p>\n<h2 id=\"computation-therefore-is-the-act-of-executing-an-algorithm\">Computation, therefore, is the act of executing an algorithm.</h2>\n<p>Whether it’s a person moving beads on an abacus, a baker following a recipe, or a modern computer processing billions of instructions per second, the fundamental idea is the same. It’s about taking an input (numbers, ingredients), following a clear set of steps (the algorithm), and producing an output (an answer, a cake).</p>\n<p>This simple but powerful idea - that we can create recipes to solve problems - is the foundation of everything we’ll explore. But as we’ll see in our next post, just because you can write a recipe for something doesn’t mean all problems are solvable. A mathematician named Gödel was about to show the world that some things are fundamentally unknowable, breaking math wide open before computers were even a dream.</p>",{headings:1976,localImagePaths:1987,remoteImagePaths:1988,frontmatter:1989,imagePaths:1991},[1977,1978,1981,1984],{depth:34,slug:117,text:118},{depth:34,slug:1979,text:1980},"the-original-calculator-an-abacus","The Original Calculator: An Abacus",{depth:34,slug:1982,text:1983},"from-a-tool-to-a-recipe","From a Tool to a Recipe",{depth:34,slug:1985,text:1986},"computation-therefore-is-the-act-of-executing-an-algorithm","Computation, therefore, is the act of executing an algorithm.",[],[],{title:1965,date:1990,description:1968,author:16,series:108,thumbnail:106,seriesOrder:201,minutesRead:243},["Date","2025-08-25T00:00:00.000Z"],[],"what-is-computation.md","threads-vs-processes",{id:1993,data:1995,body:2003,filePath:2004,digest:2005,rendered:2006,legacyId:2081},{title:1996,author:1997,draft:18,date:1998,description:1999,featured:18,thumbnail:2000,series:2001,seriesOrder:2002},"Threads vs. Processes: When to Use Each and Why",{id:16,collection:17},["Date","2025-05-22T00:00:00.000Z"],"Understanding the differences between threads and processes, their use cases, and how they impact performance.","/thumbnails/os-threads-vs-processes.png",{id:147,collection:24},9,"## Introduction\r\n\r\nIn our previous posts, we've explored how operating systems manage processes and the cost of switching between them. Today, we're diving into a fundamental design decision in software development: should your application use multiple processes, multiple threads, or a combination of both?\r\n\r\nThis choice affects everything from performance and resource usage to fault isolation and programming complexity. By understanding the trade-offs, you'll gain insight into why your favorite applications are structured the way they are and how modern software makes the most of multi-core processors.\r\n\r\n## Table of Contents\r\n\r\n- [Understanding the Basics: Processes vs. Threads](#understanding-the-basics-processes-vs-threads)\r\n  - [Processes: Independent Islands](#processes-independent-islands)\r\n  - [Threads: Collaborative Workers](#threads-collaborative-workers)\r\n- [The Architectural Differences Visualized](#the-architectural-differences-visualized)\r\n  - [What This Means in Practice](#what-this-means-in-practice)\r\n  - [Types of Threads](#types-of-threads)\r\n    - [Kernel-Level Threads](#kernel-level-threads)\r\n    - [User-Level Threads](#user-level-threads)\r\n    - [Hybrid Threading Models](#hybrid-threading-models)\r\n  - [Thread Models](#thread-models)\r\n    - [Many-to-One Model](#many-to-one-model)\r\n    - [One-to-One Model](#one-to-one-model)\r\n    - [Many-to-Many Model](#many-to-many-model)\r\n- [Common Patterns and Use Cases](#common-patterns-and-use-cases)\r\n  - [When to Use Multiple Processes](#when-to-use-multiple-processes)\r\n  - [When to Use Multiple Threads](#when-to-use-multiple-threads)\r\n  - [When to Use Both](#when-to-use-both)\r\n- [Coming Up Next](#coming-up-next)\r\n\r\n## Understanding the Basics: Processes vs. Threads\r\n\r\nLet's start with clear definitions:\r\n\r\n#### Processes: Independent Islands\r\n\r\nA process is an instance of a program in execution, complete with:\r\n\r\n- Its own private memory space\r\n- Resource allocations (file handles, network sockets)\r\n- Security context (user permissions)\r\n- At least one thread of execution\r\n\r\nProcesses are isolated from each other by the operating system's memory protection mechanisms. One process cannot directly access another process's memory without explicit inter-process communication (IPC) mechanisms.\r\n\r\n#### Threads: Collaborative Workers\r\n\r\nA thread is a unit of execution within a process. A process can have multiple threads, all of which:\r\n\r\n- Share the same memory space\r\n- Have access to the same files and resources\r\n- Run in the same security context\r\n- Execute concurrently\r\n\r\nThreads within a process can directly access each other's memory, making communication between threads much simpler than communication between processes.\r\n\r\n## The Architectural Differences Visualized\r\n\r\nThink of processes like separate apartments in a building, while threads are like roommates sharing a single apartment:\r\n\r\n#### Process Architecture\r\n\r\n```javascript\r\nProcess A       Process B       Process C\r\n----------      ----------      ----------\r\n| Memory |      | Memory |      | Memory |\r\n| Files  |      | Files  |      | Files  |\r\n| Thread |      | Thread |      | Thread |\r\n----------      ----------      ----------\r\n```\r\n\r\n#### Thread Architecture\r\n\r\n```javascript\r\nProcess A\r\n      -------------------------\r\n      |   Shared Memory       |\r\n      |   Shared Files        |\r\n      |                       |\r\n      |  Thread A  Thread B   |\r\n      |                       |\r\n      -------------------------\r\n```\r\n\r\nThis architecture illustrates how processes are isolated from each other, while threads within a process share the same resources.\r\n\r\n#### What This Means in Practice\r\n\r\n###### Process isolation\r\n\r\n- Each process has its own virtual memory space (typically 4GB on 32-bit systems)\r\n- A crash in Process A cannot directly affect Process B\r\n- Communication requires explicit mechanisms (pipes, sockets, shared memory)\r\n\r\n###### Thread sharing\r\n\r\n- All threads see the same memory addresses and can access the same variables\r\n- One thread's memory corruption can crash the entire process\r\n- Communication is as simple as reading/writing shared variables (with proper synchronization)\r\n\r\n## Types of Threads\r\n\r\nThreads can be implemented in different ways, each with its own characteristics:\r\n\r\n#### Kernel-Level Threads\r\n\r\nThe operating system kernel manages threads directly:\r\n\r\n- Pros:\r\n\r\n  - True parallelism on multi-core systems\r\n  - One thread blocking doesn't block others\r\n  - Kernel can schedule threads individually\r\n\r\n- Cons:\r\n\r\n  - Higher overhead (thread operations require system calls)\r\n  - Limited scalability (thousands, not millions)\r\n\r\nExamples: POSIX threads (pthreads), Windows threads\r\n\r\n#### User-Level Threads\r\n\r\nThreads managed by a runtime library without kernel involvement:\r\n\r\n- Pros:\r\n\r\n  - Lower creation/context switch overhead\r\n  - More control over scheduling\r\n  - Massive scalability (potentially millions)\r\n\r\n- Cons:\r\n\r\n  - Blocking calls can stop all threads\r\n  - No true parallelism without additional mechanisms\r\n\r\nExamples: Go goroutines, Erlang processes\r\n\r\n#### Hybrid Threading Models\r\n\r\nCombine user and kernel-level approaches:\r\n\r\n- Pros:\r\n\r\n  - Balance between performance and parallelism\r\n  - Better scalability than pure kernel threads\r\n  - Can map many user threads to fewer kernel threads\r\n\r\n- Cons:\r\n\r\n  - More complex implementation\r\n  - May still suffer from some limitations of both models\r\n\r\nExamples: Java threads, .NET thread pool\r\n\r\n## Thread Models\r\n\r\n> Checkout images of thread models at [ResearchGate](https://www.researchgate.net/figure/Three-types-of-thread-models-Popular-operating-systems-5-22-24-adopt-the_fig1_346379550)\r\n\r\nThread models define how threads are scheduled and managed within a process. The two main models are:\r\n\r\n#### Many-to-One Model\r\n\r\nIn this model, many user-level threads are mapped to a single kernel thread. The kernel is unaware of the user threads, which can lead to inefficiencies:\r\n\r\n- Pros:\r\n\r\n  - Low overhead for thread management\r\n  - Fast context switching\r\n  - Simple implementation\r\n  - Good for I/O-bound applications\r\n  - No kernel involvement\r\n\r\n- Cons:\r\n\r\n  - Blocking a single thread blocks the entire process\r\n  - Limited to a single CPU core (no true parallelism)\r\n  - Difficult to utilize multi-core systems\r\n\r\nExamples: Green threads in Java, some implementations of user-level threads\r\n\r\n#### One-to-One Model\r\n\r\nIn this model, each user-level thread is mapped to a kernel thread. This allows for true parallelism and better resource utilization:\r\n\r\n- Pros:\r\n\r\n  - True parallelism on multi-core systems\r\n  - Blocking a thread doesn't block the entire process\r\n  - Kernel can schedule threads individually\r\n  - Better for CPU-bound applications\r\n\r\n- Cons:\r\n\r\n  - Higher overhead for thread management\r\n  - More complex implementation\r\n  - Limited by the number of kernel threads available\r\n\r\nExamples: POSIX threads (pthreads), Windows threads, Java threads\r\n\r\n#### Many-to-Many Model\r\n\r\nIn this model, many user-level threads are mapped to many kernel threads. This allows for a flexible and efficient use of system resources:\r\n\r\n- Pros:\r\n\r\n  - True parallelism on multi-core systems\r\n  - Blocking a thread doesn't block the entire process\r\n  - Kernel can schedule threads individually\r\n  - Better for both CPU-bound and I/O-bound applications\r\n  - Scalable and efficient\r\n  - Can utilize a large number of threads\r\n\r\n- Cons:\r\n\r\n  - More complex implementation\r\n  - Higher overhead for thread management\r\n  - Requires a sophisticated scheduler\r\n\r\n## Common Patterns and Use Cases\r\n\r\nDifferent scenarios call for different approaches:\r\n\r\n#### When to Use Multiple Processes\r\n\r\n1. **Security isolation is critical**\r\n\r\n   - Web browsers (separate processes for each tab)\r\n   - Financial applications handling sensitive data\r\n   - Enterprise applications with strict access controls\r\n\r\n2. **Fault isolation is essential**\r\n\r\n   - Critical systems where one component failure shouldn't bring down the whole system\r\n   - Applications where different components have different stability profiles\r\n   - Long-running services that need to survive partial failures\r\n\r\n3. **Different programming languages need to work together**\r\n\r\n   - Legacy components integrating with modern code\r\n   - Specialized libraries only available in certain languages\r\n   - Cross-platform scenarios with platform-specific components\r\n\r\n4. **Independent scaling is needed**\r\n\r\n   - Microservices architectures\r\n   - Server components with different resource needs\r\n   - Stateless vs. stateful component separation\r\n\r\n#### When to Use Multiple Threads\r\n\r\n1. **Shared data access is frequent**\r\n\r\n   - Database engines\r\n   - In-memory caches\r\n   - Data processing pipelines\r\n\r\n2. **Low-latency communication is required**\r\n\r\n   - Real-time applications\r\n   - Gaming engines\r\n   - High-frequency trading systems\r\n\r\n3. **Resource constraints are tight**\r\n\r\n   - Mobile applications\r\n   - Embedded systems\r\n   - Resource-intensive applications that need efficiency\r\n\r\n4. **Programming simplicity is valued**\r\n\r\n   - Applications where direct data sharing simplifies design\r\n   - When the application is inherently partitioned into concurrent tasks\r\n   - When synchronization needs are minimal or well-structured\r\n\r\n#### When to Use Both\r\n\r\nMany modern applications use a hybrid approach:\r\n\r\n1. Process-per-major-component, threads-within-process\r\n\r\n   - Web servers (process per worker, threads for connections)\r\n   - Multimedia applications (process per major function, threads for tasks)\r\n   - IDEs (separate processes for compile/debug, threads for UI)\r\n\r\n2. Process for isolation, threads for parallelism\r\n\r\n   - Content creation tools (separate process for rendering, threads for UI)\r\n   - Scientific computing (process per job, threads for parallelism)\r\n   - Server applications (process per user, threads for tasks)\r\n\r\n## Coming Up Next\r\n\r\nNow that we understand the differences between processes and threads, our next post will explore how modern operating systems make the most of multi-core processors. We'll dive into Multi-core Magic: How Modern OSes Handle Multiple CPUs and examine how your favorite applications leverage multiple cores.","src/content/blog/threads-vs-processes.md","984a23e4493fe100",{html:2007,metadata:2008},"<h2 id=\"introduction\">Introduction</h2>\n<p>In our previous posts, we’ve explored how operating systems manage processes and the cost of switching between them. Today, we’re diving into a fundamental design decision in software development: should your application use multiple processes, multiple threads, or a combination of both?</p>\n<p>This choice affects everything from performance and resource usage to fault isolation and programming complexity. By understanding the trade-offs, you’ll gain insight into why your favorite applications are structured the way they are and how modern software makes the most of multi-core processors.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#understanding-the-basics-processes-vs-threads\">Understanding the Basics: Processes vs. Threads</a>\n<ul>\n<li><a href=\"#processes-independent-islands\">Processes: Independent Islands</a></li>\n<li><a href=\"#threads-collaborative-workers\">Threads: Collaborative Workers</a></li>\n</ul>\n</li>\n<li><a href=\"#the-architectural-differences-visualized\">The Architectural Differences Visualized</a>\n<ul>\n<li><a href=\"#what-this-means-in-practice\">What This Means in Practice</a></li>\n<li><a href=\"#types-of-threads\">Types of Threads</a>\n<ul>\n<li><a href=\"#kernel-level-threads\">Kernel-Level Threads</a></li>\n<li><a href=\"#user-level-threads\">User-Level Threads</a></li>\n<li><a href=\"#hybrid-threading-models\">Hybrid Threading Models</a></li>\n</ul>\n</li>\n<li><a href=\"#thread-models\">Thread Models</a>\n<ul>\n<li><a href=\"#many-to-one-model\">Many-to-One Model</a></li>\n<li><a href=\"#one-to-one-model\">One-to-One Model</a></li>\n<li><a href=\"#many-to-many-model\">Many-to-Many Model</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#common-patterns-and-use-cases\">Common Patterns and Use Cases</a>\n<ul>\n<li><a href=\"#when-to-use-multiple-processes\">When to Use Multiple Processes</a></li>\n<li><a href=\"#when-to-use-multiple-threads\">When to Use Multiple Threads</a></li>\n<li><a href=\"#when-to-use-both\">When to Use Both</a></li>\n</ul>\n</li>\n<li><a href=\"#coming-up-next\">Coming Up Next</a></li>\n</ul>\n<h2 id=\"understanding-the-basics-processes-vs-threads\">Understanding the Basics: Processes vs. Threads</h2>\n<p>Let’s start with clear definitions:</p>\n<h4 id=\"processes-independent-islands\">Processes: Independent Islands</h4>\n<p>A process is an instance of a program in execution, complete with:</p>\n<ul>\n<li>Its own private memory space</li>\n<li>Resource allocations (file handles, network sockets)</li>\n<li>Security context (user permissions)</li>\n<li>At least one thread of execution</li>\n</ul>\n<p>Processes are isolated from each other by the operating system’s memory protection mechanisms. One process cannot directly access another process’s memory without explicit inter-process communication (IPC) mechanisms.</p>\n<h4 id=\"threads-collaborative-workers\">Threads: Collaborative Workers</h4>\n<p>A thread is a unit of execution within a process. A process can have multiple threads, all of which:</p>\n<ul>\n<li>Share the same memory space</li>\n<li>Have access to the same files and resources</li>\n<li>Run in the same security context</li>\n<li>Execute concurrently</li>\n</ul>\n<p>Threads within a process can directly access each other’s memory, making communication between threads much simpler than communication between processes.</p>\n<h2 id=\"the-architectural-differences-visualized\">The Architectural Differences Visualized</h2>\n<p>Think of processes like separate apartments in a building, while threads are like roommates sharing a single apartment:</p>\n<h4 id=\"process-architecture\">Process Architecture</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">Process</span><span style=\"color:#FF9E64\"> A</span><span style=\"color:#C0CAF5\">       Process</span><span style=\"color:#FF9E64\"> B</span><span style=\"color:#C0CAF5\">       Process</span><span style=\"color:#FF9E64\"> C</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">----------</span><span style=\"color:#89DDFF\">      ----------</span><span style=\"color:#89DDFF\">      ----------</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">|</span><span style=\"color:#C0CAF5\"> Memory</span><span style=\"color:#BB9AF7\"> |</span><span style=\"color:#BB9AF7\">      |</span><span style=\"color:#C0CAF5\"> Memory</span><span style=\"color:#BB9AF7\"> |</span><span style=\"color:#BB9AF7\">      |</span><span style=\"color:#C0CAF5\"> Memory</span><span style=\"color:#BB9AF7\"> |</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">|</span><span style=\"color:#C0CAF5\"> Files</span><span style=\"color:#BB9AF7\">  |</span><span style=\"color:#BB9AF7\">      |</span><span style=\"color:#C0CAF5\"> Files</span><span style=\"color:#BB9AF7\">  |</span><span style=\"color:#BB9AF7\">      |</span><span style=\"color:#C0CAF5\"> Files</span><span style=\"color:#BB9AF7\">  |</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">|</span><span style=\"color:#C0CAF5\"> Thread</span><span style=\"color:#BB9AF7\"> |</span><span style=\"color:#BB9AF7\">      |</span><span style=\"color:#C0CAF5\"> Thread</span><span style=\"color:#BB9AF7\"> |</span><span style=\"color:#BB9AF7\">      |</span><span style=\"color:#C0CAF5\"> Thread</span><span style=\"color:#BB9AF7\"> |</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">----------</span><span style=\"color:#89DDFF\">      ----------</span><span style=\"color:#89DDFF\">      ----------</span></span></code></pre>\n<h4 id=\"thread-architecture\">Thread Architecture</h4>\n<pre class=\"astro-code tokyo-night\" style=\"background-color:#1a1b26;color:#a9b1d6; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#C0CAF5\">Process</span><span style=\"color:#FF9E64\"> A</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      -------------------------</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      |</span><span style=\"color:#C0CAF5\">   Shared</span><span style=\"color:#C0CAF5\"> Memory</span><span style=\"color:#BB9AF7\">       |</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      |</span><span style=\"color:#C0CAF5\">   Shared</span><span style=\"color:#C0CAF5\"> Files</span><span style=\"color:#BB9AF7\">        |</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      |</span><span style=\"color:#BB9AF7\">                       |</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      |</span><span style=\"color:#C0CAF5\">  Thread</span><span style=\"color:#FF9E64\"> A</span><span style=\"color:#C0CAF5\">  Thread</span><span style=\"color:#FF9E64\"> B</span><span style=\"color:#BB9AF7\">   |</span></span>\n<span class=\"line\"><span style=\"color:#BB9AF7\">      |</span><span style=\"color:#BB9AF7\">                       |</span></span>\n<span class=\"line\"><span style=\"color:#89DDFF\">      -------------------------</span></span></code></pre>\n<p>This architecture illustrates how processes are isolated from each other, while threads within a process share the same resources.</p>\n<h4 id=\"what-this-means-in-practice\">What This Means in Practice</h4>\n<h6 id=\"process-isolation\">Process isolation</h6>\n<ul>\n<li>Each process has its own virtual memory space (typically 4GB on 32-bit systems)</li>\n<li>A crash in Process A cannot directly affect Process B</li>\n<li>Communication requires explicit mechanisms (pipes, sockets, shared memory)</li>\n</ul>\n<h6 id=\"thread-sharing\">Thread sharing</h6>\n<ul>\n<li>All threads see the same memory addresses and can access the same variables</li>\n<li>One thread’s memory corruption can crash the entire process</li>\n<li>Communication is as simple as reading/writing shared variables (with proper synchronization)</li>\n</ul>\n<h2 id=\"types-of-threads\">Types of Threads</h2>\n<p>Threads can be implemented in different ways, each with its own characteristics:</p>\n<h4 id=\"kernel-level-threads\">Kernel-Level Threads</h4>\n<p>The operating system kernel manages threads directly:</p>\n<ul>\n<li>\n<p>Pros:</p>\n<ul>\n<li>True parallelism on multi-core systems</li>\n<li>One thread blocking doesn’t block others</li>\n<li>Kernel can schedule threads individually</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>Higher overhead (thread operations require system calls)</li>\n<li>Limited scalability (thousands, not millions)</li>\n</ul>\n</li>\n</ul>\n<p>Examples: POSIX threads (pthreads), Windows threads</p>\n<h4 id=\"user-level-threads\">User-Level Threads</h4>\n<p>Threads managed by a runtime library without kernel involvement:</p>\n<ul>\n<li>\n<p>Pros:</p>\n<ul>\n<li>Lower creation/context switch overhead</li>\n<li>More control over scheduling</li>\n<li>Massive scalability (potentially millions)</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>Blocking calls can stop all threads</li>\n<li>No true parallelism without additional mechanisms</li>\n</ul>\n</li>\n</ul>\n<p>Examples: Go goroutines, Erlang processes</p>\n<h4 id=\"hybrid-threading-models\">Hybrid Threading Models</h4>\n<p>Combine user and kernel-level approaches:</p>\n<ul>\n<li>\n<p>Pros:</p>\n<ul>\n<li>Balance between performance and parallelism</li>\n<li>Better scalability than pure kernel threads</li>\n<li>Can map many user threads to fewer kernel threads</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>More complex implementation</li>\n<li>May still suffer from some limitations of both models</li>\n</ul>\n</li>\n</ul>\n<p>Examples: Java threads, .NET thread pool</p>\n<h2 id=\"thread-models\">Thread Models</h2>\n<blockquote>\n<p>Checkout images of thread models at <a href=\"https://www.researchgate.net/figure/Three-types-of-thread-models-Popular-operating-systems-5-22-24-adopt-the_fig1_346379550\">ResearchGate</a></p>\n</blockquote>\n<p>Thread models define how threads are scheduled and managed within a process. The two main models are:</p>\n<h4 id=\"many-to-one-model\">Many-to-One Model</h4>\n<p>In this model, many user-level threads are mapped to a single kernel thread. The kernel is unaware of the user threads, which can lead to inefficiencies:</p>\n<ul>\n<li>\n<p>Pros:</p>\n<ul>\n<li>Low overhead for thread management</li>\n<li>Fast context switching</li>\n<li>Simple implementation</li>\n<li>Good for I/O-bound applications</li>\n<li>No kernel involvement</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>Blocking a single thread blocks the entire process</li>\n<li>Limited to a single CPU core (no true parallelism)</li>\n<li>Difficult to utilize multi-core systems</li>\n</ul>\n</li>\n</ul>\n<p>Examples: Green threads in Java, some implementations of user-level threads</p>\n<h4 id=\"one-to-one-model\">One-to-One Model</h4>\n<p>In this model, each user-level thread is mapped to a kernel thread. This allows for true parallelism and better resource utilization:</p>\n<ul>\n<li>\n<p>Pros:</p>\n<ul>\n<li>True parallelism on multi-core systems</li>\n<li>Blocking a thread doesn’t block the entire process</li>\n<li>Kernel can schedule threads individually</li>\n<li>Better for CPU-bound applications</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>Higher overhead for thread management</li>\n<li>More complex implementation</li>\n<li>Limited by the number of kernel threads available</li>\n</ul>\n</li>\n</ul>\n<p>Examples: POSIX threads (pthreads), Windows threads, Java threads</p>\n<h4 id=\"many-to-many-model\">Many-to-Many Model</h4>\n<p>In this model, many user-level threads are mapped to many kernel threads. This allows for a flexible and efficient use of system resources:</p>\n<ul>\n<li>\n<p>Pros:</p>\n<ul>\n<li>True parallelism on multi-core systems</li>\n<li>Blocking a thread doesn’t block the entire process</li>\n<li>Kernel can schedule threads individually</li>\n<li>Better for both CPU-bound and I/O-bound applications</li>\n<li>Scalable and efficient</li>\n<li>Can utilize a large number of threads</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>More complex implementation</li>\n<li>Higher overhead for thread management</li>\n<li>Requires a sophisticated scheduler</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"common-patterns-and-use-cases\">Common Patterns and Use Cases</h2>\n<p>Different scenarios call for different approaches:</p>\n<h4 id=\"when-to-use-multiple-processes\">When to Use Multiple Processes</h4>\n<ol>\n<li>\n<p><strong>Security isolation is critical</strong></p>\n<ul>\n<li>Web browsers (separate processes for each tab)</li>\n<li>Financial applications handling sensitive data</li>\n<li>Enterprise applications with strict access controls</li>\n</ul>\n</li>\n<li>\n<p><strong>Fault isolation is essential</strong></p>\n<ul>\n<li>Critical systems where one component failure shouldn’t bring down the whole system</li>\n<li>Applications where different components have different stability profiles</li>\n<li>Long-running services that need to survive partial failures</li>\n</ul>\n</li>\n<li>\n<p><strong>Different programming languages need to work together</strong></p>\n<ul>\n<li>Legacy components integrating with modern code</li>\n<li>Specialized libraries only available in certain languages</li>\n<li>Cross-platform scenarios with platform-specific components</li>\n</ul>\n</li>\n<li>\n<p><strong>Independent scaling is needed</strong></p>\n<ul>\n<li>Microservices architectures</li>\n<li>Server components with different resource needs</li>\n<li>Stateless vs. stateful component separation</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"when-to-use-multiple-threads\">When to Use Multiple Threads</h4>\n<ol>\n<li>\n<p><strong>Shared data access is frequent</strong></p>\n<ul>\n<li>Database engines</li>\n<li>In-memory caches</li>\n<li>Data processing pipelines</li>\n</ul>\n</li>\n<li>\n<p><strong>Low-latency communication is required</strong></p>\n<ul>\n<li>Real-time applications</li>\n<li>Gaming engines</li>\n<li>High-frequency trading systems</li>\n</ul>\n</li>\n<li>\n<p><strong>Resource constraints are tight</strong></p>\n<ul>\n<li>Mobile applications</li>\n<li>Embedded systems</li>\n<li>Resource-intensive applications that need efficiency</li>\n</ul>\n</li>\n<li>\n<p><strong>Programming simplicity is valued</strong></p>\n<ul>\n<li>Applications where direct data sharing simplifies design</li>\n<li>When the application is inherently partitioned into concurrent tasks</li>\n<li>When synchronization needs are minimal or well-structured</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"when-to-use-both\">When to Use Both</h4>\n<p>Many modern applications use a hybrid approach:</p>\n<ol>\n<li>\n<p>Process-per-major-component, threads-within-process</p>\n<ul>\n<li>Web servers (process per worker, threads for connections)</li>\n<li>Multimedia applications (process per major function, threads for tasks)</li>\n<li>IDEs (separate processes for compile/debug, threads for UI)</li>\n</ul>\n</li>\n<li>\n<p>Process for isolation, threads for parallelism</p>\n<ul>\n<li>Content creation tools (separate process for rendering, threads for UI)</li>\n<li>Scientific computing (process per job, threads for parallelism)</li>\n<li>Server applications (process per user, threads for tasks)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"coming-up-next\">Coming Up Next</h2>\n<p>Now that we understand the differences between processes and threads, our next post will explore how modern operating systems make the most of multi-core processors. We’ll dive into Multi-core Magic: How Modern OSes Handle Multiple CPUs and examine how your favorite applications leverage multiple cores.</p>",{headings:2009,localImagePaths:2076,remoteImagePaths:2077,frontmatter:2078,imagePaths:2080},[2010,2011,2012,2015,2018,2021,2024,2027,2030,2033,2036,2039,2042,2045,2048,2051,2054,2057,2060,2063,2066,2069,2072,2075],{depth:34,slug:117,text:118},{depth:34,slug:45,text:46},{depth:34,slug:2013,text:2014},"understanding-the-basics-processes-vs-threads","Understanding the Basics: Processes vs. Threads",{depth:38,slug:2016,text:2017},"processes-independent-islands","Processes: Independent Islands",{depth:38,slug:2019,text:2020},"threads-collaborative-workers","Threads: Collaborative Workers",{depth:34,slug:2022,text:2023},"the-architectural-differences-visualized","The Architectural Differences Visualized",{depth:38,slug:2025,text:2026},"process-architecture","Process Architecture",{depth:38,slug:2028,text:2029},"thread-architecture","Thread Architecture",{depth:38,slug:2031,text:2032},"what-this-means-in-practice","What This Means in Practice",{depth:396,slug:2034,text:2035},"process-isolation","Process isolation",{depth:396,slug:2037,text:2038},"thread-sharing","Thread sharing",{depth:34,slug:2040,text:2041},"types-of-threads","Types of Threads",{depth:38,slug:2043,text:2044},"kernel-level-threads","Kernel-Level Threads",{depth:38,slug:2046,text:2047},"user-level-threads","User-Level Threads",{depth:38,slug:2049,text:2050},"hybrid-threading-models","Hybrid Threading Models",{depth:34,slug:2052,text:2053},"thread-models","Thread Models",{depth:38,slug:2055,text:2056},"many-to-one-model","Many-to-One Model",{depth:38,slug:2058,text:2059},"one-to-one-model","One-to-One Model",{depth:38,slug:2061,text:2062},"many-to-many-model","Many-to-Many Model",{depth:34,slug:2064,text:2065},"common-patterns-and-use-cases","Common Patterns and Use Cases",{depth:38,slug:2067,text:2068},"when-to-use-multiple-processes","When to Use Multiple Processes",{depth:38,slug:2070,text:2071},"when-to-use-multiple-threads","When to Use Multiple Threads",{depth:38,slug:2073,text:2074},"when-to-use-both","When to Use Both",{depth:34,slug:183,text:184},[],[],{title:1996,date:2079,description:1999,author:16,thumbnail:2000,series:147,seriesOrder:2002,minutesRead:798},["Date","2025-05-22T00:00:00.000Z"],[],"threads-vs-processes.md",["Map",16,2083],{id:16,data:2084,filePath:2091,digest:2092,rendered:2093,legacyId:2102},{name:2085,bio:2086,avatar:2087,email:2088,twitter:2089,github:16,linkedin:16,website:2090},"Aayush Shukla","An open-source developer from India. I love to contribute to open-source projects and write about programming. I'm also known as a2ys.","/aayushshukla.webp","me@a2ys.dev","unreal_sapien","https://a2ys.dev","src/content/author/a2ys.md","224b4bd4f8988ebd",{html:2094,metadata:2095},"",{headings:2096,localImagePaths:2097,remoteImagePaths:2098,frontmatter:2099,imagePaths:2101},[],[],[],{name:2085,bio:2086,avatar:2087,email:2088,github:16,twitter:2089,linkedin:16,website:2090,minutesRead:2100},"0 min read",[],"a2ys.md",["Map",108,2104,200,2119,147,2133,23,2148],{id:108,data:2105,filePath:2109,digest:2110,rendered:2111,legacyId:2118},{name:2106,abbreviation:2107,description:2108},"Computer Science: Season 1","CS S1","The age before computers became computers.","src/content/series/cs-season-one.md","dd9da7bd63f15bcd",{html:2094,metadata:2112},{headings:2113,localImagePaths:2114,remoteImagePaths:2115,frontmatter:2116,imagePaths:2117},[],[],[],{name:2106,abbreviation:2107,description:2108,minutesRead:2100},[],"cs-season-one.md",{id:200,data:2120,filePath:2123,digest:2124,rendered:2125,legacyId:2132},{name:2121,abbreviation:555,description:2122},"Data Structures and Algorithms","DSA concepts made easy to understand, with examples and easy to follow code snippets.","src/content/series/dsa.md","e9e083470f565862",{html:2094,metadata:2126},{headings:2127,localImagePaths:2128,remoteImagePaths:2129,frontmatter:2130,imagePaths:2131},[],[],[],{name:2121,abbreviation:555,description:2122,minutesRead:2100},[],"dsa.md",{id:147,data:2134,filePath:2138,digest:2139,rendered:2140,legacyId:2147},{name:2135,abbreviation:2136,description:2137},"Operating Systems","OS","A deep dive into OS concepts while keeping them interesting and engaging.","src/content/series/os.md","35632c1e04de86a5",{html:2094,metadata:2141},{headings:2142,localImagePaths:2143,remoteImagePaths:2144,frontmatter:2145,imagePaths:2146},[],[],[],{name:2135,abbreviation:2136,description:2137,minutesRead:2100},[],"os.md",{id:23,data:2149,filePath:2153,digest:2154,rendered:2155,legacyId:2162},{name:2150,abbreviation:2151,description:2152},"Theory of Computation","TOC","An interesting exploration of the Theory of Computation, the mathematical framework that underlies all computing systems.","src/content/series/toc.md","2b0575fd8b001012",{html:2094,metadata:2156},{headings:2157,localImagePaths:2158,remoteImagePaths:2159,frontmatter:2160,imagePaths:2161},[],[],[],{name:2150,abbreviation:2151,description:2152,minutesRead:2100},[],"toc.md"];

export { _astro_dataLayerContent as default };
